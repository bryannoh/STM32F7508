
F7508.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e3c  08009e3c  00019e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e48  08009e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08009e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000096c8  20000090  08009edc  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20009758  08009edc  00029758  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   000542d6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b8e4  00000000  00000000  00074396  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000226c4  00000000  00000000  0007fc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002c70  00000000  00000000  000a2340  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000037b8  00000000  00000000  000a4fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001aad8  00000000  00000000  000a8768  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000fb26  00000000  00000000  000c3240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000d2d66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000084a4  00000000  00000000  000d2de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d84 	.word	0x08009d84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08009d84 	.word	0x08009d84

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b97a 	b.w	800051c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	468c      	mov	ip, r1
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	9e08      	ldr	r6, [sp, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d151      	bne.n	80002f4 <__udivmoddi4+0xb4>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d96d      	bls.n	8000332 <__udivmoddi4+0xf2>
 8000256:	fab2 fe82 	clz	lr, r2
 800025a:	f1be 0f00 	cmp.w	lr, #0
 800025e:	d00b      	beq.n	8000278 <__udivmoddi4+0x38>
 8000260:	f1ce 0c20 	rsb	ip, lr, #32
 8000264:	fa01 f50e 	lsl.w	r5, r1, lr
 8000268:	fa20 fc0c 	lsr.w	ip, r0, ip
 800026c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000270:	ea4c 0c05 	orr.w	ip, ip, r5
 8000274:	fa00 f40e 	lsl.w	r4, r0, lr
 8000278:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800027c:	0c25      	lsrs	r5, r4, #16
 800027e:	fbbc f8fa 	udiv	r8, ip, sl
 8000282:	fa1f f987 	uxth.w	r9, r7
 8000286:	fb0a cc18 	mls	ip, sl, r8, ip
 800028a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800028e:	fb08 f309 	mul.w	r3, r8, r9
 8000292:	42ab      	cmp	r3, r5
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x6c>
 8000296:	19ed      	adds	r5, r5, r7
 8000298:	f108 32ff 	add.w	r2, r8, #4294967295
 800029c:	f080 8123 	bcs.w	80004e6 <__udivmoddi4+0x2a6>
 80002a0:	42ab      	cmp	r3, r5
 80002a2:	f240 8120 	bls.w	80004e6 <__udivmoddi4+0x2a6>
 80002a6:	f1a8 0802 	sub.w	r8, r8, #2
 80002aa:	443d      	add	r5, r7
 80002ac:	1aed      	subs	r5, r5, r3
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	fb00 f909 	mul.w	r9, r0, r9
 80002c0:	45a1      	cmp	r9, r4
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x98>
 80002c4:	19e4      	adds	r4, r4, r7
 80002c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ca:	f080 810a 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80002ce:	45a1      	cmp	r9, r4
 80002d0:	f240 8107 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80002d4:	3802      	subs	r0, #2
 80002d6:	443c      	add	r4, r7
 80002d8:	eba4 0409 	sub.w	r4, r4, r9
 80002dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d061      	beq.n	80003aa <__udivmoddi4+0x16a>
 80002e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ea:	2300      	movs	r3, #0
 80002ec:	6034      	str	r4, [r6, #0]
 80002ee:	6073      	str	r3, [r6, #4]
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xc8>
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d054      	beq.n	80003a6 <__udivmoddi4+0x166>
 80002fc:	2100      	movs	r1, #0
 80002fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000302:	4608      	mov	r0, r1
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	fab3 f183 	clz	r1, r3
 800030c:	2900      	cmp	r1, #0
 800030e:	f040 808e 	bne.w	800042e <__udivmoddi4+0x1ee>
 8000312:	42ab      	cmp	r3, r5
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xdc>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80fa 	bhi.w	8000510 <__udivmoddi4+0x2d0>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb65 0503 	sbc.w	r5, r5, r3
 8000322:	2001      	movs	r0, #1
 8000324:	46ac      	mov	ip, r5
 8000326:	2e00      	cmp	r6, #0
 8000328:	d03f      	beq.n	80003aa <__udivmoddi4+0x16a>
 800032a:	e886 1010 	stmia.w	r6, {r4, ip}
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b912      	cbnz	r2, 800033a <__udivmoddi4+0xfa>
 8000334:	2701      	movs	r7, #1
 8000336:	fbb7 f7f2 	udiv	r7, r7, r2
 800033a:	fab7 fe87 	clz	lr, r7
 800033e:	f1be 0f00 	cmp.w	lr, #0
 8000342:	d134      	bne.n	80003ae <__udivmoddi4+0x16e>
 8000344:	1beb      	subs	r3, r5, r7
 8000346:	0c3a      	lsrs	r2, r7, #16
 8000348:	fa1f fc87 	uxth.w	ip, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000352:	0c25      	lsrs	r5, r4, #16
 8000354:	fb02 3318 	mls	r3, r2, r8, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb0c f308 	mul.w	r3, ip, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x134>
 8000364:	19ed      	adds	r5, r5, r7
 8000366:	f108 30ff 	add.w	r0, r8, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x132>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f200 80d1 	bhi.w	8000514 <__udivmoddi4+0x2d4>
 8000372:	4680      	mov	r8, r0
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb5 f0f2 	udiv	r0, r5, r2
 800037c:	fb02 5510 	mls	r5, r2, r0, r5
 8000380:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000384:	fb0c fc00 	mul.w	ip, ip, r0
 8000388:	45a4      	cmp	ip, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x15c>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x15a>
 8000394:	45a4      	cmp	ip, r4
 8000396:	f200 80b8 	bhi.w	800050a <__udivmoddi4+0x2ca>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 040c 	sub.w	r4, r4, ip
 80003a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a4:	e79d      	b.n	80002e2 <__udivmoddi4+0xa2>
 80003a6:	4631      	mov	r1, r6
 80003a8:	4630      	mov	r0, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	f1ce 0420 	rsb	r4, lr, #32
 80003b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ba:	fa20 f804 	lsr.w	r8, r0, r4
 80003be:	0c3a      	lsrs	r2, r7, #16
 80003c0:	fa25 f404 	lsr.w	r4, r5, r4
 80003c4:	ea48 0803 	orr.w	r8, r8, r3
 80003c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d0:	fb02 4411 	mls	r4, r2, r1, r4
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003dc:	fb01 f30c 	mul.w	r3, r1, ip
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1bc>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ee:	f080 808a 	bcs.w	8000506 <__udivmoddi4+0x2c6>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8087 	bls.w	8000506 <__udivmoddi4+0x2c6>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	fa1f f588 	uxth.w	r5, r8
 8000402:	fbb3 f0f2 	udiv	r0, r3, r2
 8000406:	fb02 3310 	mls	r3, r2, r0, r3
 800040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040e:	fb00 f30c 	mul.w	r3, r0, ip
 8000412:	42ab      	cmp	r3, r5
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x1e6>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f100 38ff 	add.w	r8, r0, #4294967295
 800041c:	d26f      	bcs.n	80004fe <__udivmoddi4+0x2be>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d96d      	bls.n	80004fe <__udivmoddi4+0x2be>
 8000422:	3802      	subs	r0, #2
 8000424:	443d      	add	r5, r7
 8000426:	1aeb      	subs	r3, r5, r3
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	e78f      	b.n	800034e <__udivmoddi4+0x10e>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	fa22 f807 	lsr.w	r8, r2, r7
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 f401 	lsl.w	r4, r5, r1
 800043c:	ea48 0303 	orr.w	r3, r8, r3
 8000440:	fa20 fe07 	lsr.w	lr, r0, r7
 8000444:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000448:	40fd      	lsrs	r5, r7
 800044a:	ea4e 0e04 	orr.w	lr, lr, r4
 800044e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000452:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000456:	fb0c 5519 	mls	r5, ip, r9, r5
 800045a:	fa1f f883 	uxth.w	r8, r3
 800045e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000462:	fb09 f408 	mul.w	r4, r9, r8
 8000466:	42ac      	cmp	r4, r5
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x244>
 8000472:	18ed      	adds	r5, r5, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	d243      	bcs.n	8000502 <__udivmoddi4+0x2c2>
 800047a:	42ac      	cmp	r4, r5
 800047c:	d941      	bls.n	8000502 <__udivmoddi4+0x2c2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	441d      	add	r5, r3
 8000484:	1b2d      	subs	r5, r5, r4
 8000486:	fa1f fe8e 	uxth.w	lr, lr
 800048a:	fbb5 f0fc 	udiv	r0, r5, ip
 800048e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000492:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45a0      	cmp	r8, r4
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x26e>
 800049e:	18e4      	adds	r4, r4, r3
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a4:	d229      	bcs.n	80004fa <__udivmoddi4+0x2ba>
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d927      	bls.n	80004fa <__udivmoddi4+0x2ba>
 80004aa:	3802      	subs	r0, #2
 80004ac:	441c      	add	r4, r3
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba4 0408 	sub.w	r4, r4, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d315      	bcc.n	80004ee <__udivmoddi4+0x2ae>
 80004c2:	d012      	beq.n	80004ea <__udivmoddi4+0x2aa>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x29c>
 80004c6:	ebba 030e 	subs.w	r3, sl, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40cb      	lsrs	r3, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	6037      	str	r7, [r6, #0]
 80004da:	6074      	str	r4, [r6, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	4618      	mov	r0, r3
 80004e4:	e6f8      	b.n	80002d8 <__udivmoddi4+0x98>
 80004e6:	4690      	mov	r8, r2
 80004e8:	e6e0      	b.n	80002ac <__udivmoddi4+0x6c>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2ea      	bcs.n	80004c4 <__udivmoddi4+0x284>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 0503 	sbc.w	r5, r9, r3
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e4      	b.n	80004c4 <__udivmoddi4+0x284>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d7      	b.n	80004ae <__udivmoddi4+0x26e>
 80004fe:	4640      	mov	r0, r8
 8000500:	e791      	b.n	8000426 <__udivmoddi4+0x1e6>
 8000502:	4681      	mov	r9, r0
 8000504:	e7be      	b.n	8000484 <__udivmoddi4+0x244>
 8000506:	4601      	mov	r1, r0
 8000508:	e778      	b.n	80003fc <__udivmoddi4+0x1bc>
 800050a:	3802      	subs	r0, #2
 800050c:	443c      	add	r4, r7
 800050e:	e745      	b.n	800039c <__udivmoddi4+0x15c>
 8000510:	4608      	mov	r0, r1
 8000512:	e708      	b.n	8000326 <__udivmoddi4+0xe6>
 8000514:	f1a8 0802 	sub.w	r8, r8, #2
 8000518:	443d      	add	r5, r7
 800051a:	e72b      	b.n	8000374 <__udivmoddi4+0x134>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000522:	2210      	movs	r2, #16
 8000524:	2100      	movs	r1, #0
 8000526:	4668      	mov	r0, sp

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000528:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 800052c:	f009 fb63 	bl	8009bf6 <memset>
  hadc3.Instance = ADC3;
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <MX_ADC3_Init+0x5c>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_ADC3_Init+0x60>)
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <MX_ADC3_Init+0x64>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000536:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800053a:	2300      	movs	r3, #0
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 800053c:	2401      	movs	r4, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053e:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000540:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000542:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000544:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000546:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 800054e:	61c4      	str	r4, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000550:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000554:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000556:	f001 fd63 	bl	8002020 <HAL_ADC_Init>
 800055a:	b108      	cbz	r0, 8000560 <MX_ADC3_Init+0x40>
  {
    Error_Handler();
 800055c:	f000 fe5a 	bl	8001214 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000560:	2307      	movs	r3, #7
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000562:	4669      	mov	r1, sp
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_ADC3_Init+0x5c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000566:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800056a:	2300      	movs	r3, #0
 800056c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800056e:	f001 fdfd 	bl	800216c <HAL_ADC_ConfigChannel>
 8000572:	b108      	cbz	r0, 8000578 <MX_ADC3_Init+0x58>
  {
    Error_Handler();
 8000574:	f000 fe4e 	bl	8001214 <Error_Handler>
  }

}
 8000578:	b004      	add	sp, #16
 800057a:	bd10      	pop	{r4, pc}
 800057c:	20008424 	.word	0x20008424
 8000580:	40012200 	.word	0x40012200
 8000584:	0f000001 	.word	0x0f000001

08000588 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000588:	b510      	push	{r4, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	2214      	movs	r2, #20
 8000590:	2100      	movs	r1, #0
 8000592:	a803      	add	r0, sp, #12
 8000594:	f009 fb2f 	bl	8009bf6 <memset>
  if(adcHandle->Instance==ADC3)
 8000598:	6822      	ldr	r2, [r4, #0]
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <HAL_ADC_MspInit+0x7c>)
 800059c:	429a      	cmp	r2, r3
 800059e:	d12e      	bne.n	80005fe <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005a0:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a4:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005a6:	a903      	add	r1, sp, #12
 80005a8:	4817      	ldr	r0, [pc, #92]	; (8000608 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005b0:	645a      	str	r2, [r3, #68]	; 0x44
 80005b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005b4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0220 	orr.w	r2, r2, #32
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
 80005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c6:	f002 0220 	and.w	r2, r2, #32
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d0:	f042 0201 	orr.w	r2, r2, #1
 80005d4:	631a      	str	r2, [r3, #48]	; 0x30
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80005e2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80005e6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005e8:	f002 fa84 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80005ec:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80005ee:	a903      	add	r1, sp, #12
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80005f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f002 fa7b 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80005fe:	b008      	add	sp, #32
 8000600:	bd10      	pop	{r4, pc}
 8000602:	bf00      	nop
 8000604:	40012200 	.word	0x40012200
 8000608:	40021400 	.word	0x40021400
 800060c:	40020000 	.word	0x40020000

08000610 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000610:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <MX_CRC_Init+0x28>)
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_CRC_Init+0x2c>)
 8000616:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800061c:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800061e:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000620:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000622:	2301      	movs	r3, #1
 8000624:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000626:	f001 fe99 	bl	800235c <HAL_CRC_Init>
 800062a:	b118      	cbz	r0, 8000634 <MX_CRC_Init+0x24>
  {
    Error_Handler();
  }

}
 800062c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000630:	f000 bdf0 	b.w	8001214 <Error_Handler>
 8000634:	bd08      	pop	{r3, pc}
 8000636:	bf00      	nop
 8000638:	2000846c 	.word	0x2000846c
 800063c:	40023000 	.word	0x40023000

08000640 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000640:	6802      	ldr	r2, [r0, #0]
{
 8000642:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_CRC_MspInit+0x28>)
 8000646:	429a      	cmp	r2, r3
 8000648:	d10b      	bne.n	8000662 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800064a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800064e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000662:	b002      	add	sp, #8
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023000 	.word	0x40023000

0800066c <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800066c:	b508      	push	{r3, lr}

  hdcmi.Instance = DCMI;
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_DCMI_Init+0x30>)
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_DCMI_Init+0x34>)
 8000672:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000674:	2300      	movs	r3, #0
 8000676:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000678:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800067a:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800067c:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800067e:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000680:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000682:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000684:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000686:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000688:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800068a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800068c:	f001 fec2 	bl	8002414 <HAL_DCMI_Init>
 8000690:	b118      	cbz	r0, 800069a <MX_DCMI_Init+0x2e>
  {
    Error_Handler();
  }

}
 8000692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000696:	f000 bdbd 	b.w	8001214 <Error_Handler>
 800069a:	bd08      	pop	{r3, pc}
 800069c:	20008490 	.word	0x20008490
 80006a0:	50050000 	.word	0x50050000

080006a4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006a4:	b570      	push	{r4, r5, r6, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	2214      	movs	r2, #20
 80006ac:	2100      	movs	r1, #0
 80006ae:	a807      	add	r0, sp, #28
 80006b0:	f009 faa1 	bl	8009bf6 <memset>
  if(dcmiHandle->Instance==DCMI)
 80006b4:	6822      	ldr	r2, [r4, #0]
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <HAL_DCMI_MspInit+0xf4>)
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d16b      	bne.n	8000794 <HAL_DCMI_MspInit+0xf0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80006bc:	4b37      	ldr	r3, [pc, #220]	; (800079c <HAL_DCMI_MspInit+0xf8>)
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006c0:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006c2:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 80006c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006c8:	4835      	ldr	r0, [pc, #212]	; (80007a0 <HAL_DCMI_MspInit+0xfc>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
 80006d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d2:	f002 0201 	and.w	r2, r2, #1
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80006da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006dc:	f042 0210 	orr.w	r2, r2, #16
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
 80006e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e4:	f002 0210 	and.w	r2, r2, #16
 80006e8:	9202      	str	r2, [sp, #8]
 80006ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ee:	f042 0208 	orr.w	r2, r2, #8
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
 80006f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f6:	f002 0208 	and.w	r2, r2, #8
 80006fa:	9203      	str	r2, [sp, #12]
 80006fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
 8000706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000708:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800070c:	9204      	str	r2, [sp, #16]
 800070e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
 8000718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800071e:	9205      	str	r2, [sp, #20]
 8000720:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000724:	f042 0201 	orr.w	r2, r2, #1
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	9306      	str	r3, [sp, #24]
 8000734:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000736:	2360      	movs	r3, #96	; 0x60
 8000738:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800073a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800073c:	f002 f9da 	bl	8002af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000740:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000742:	a907      	add	r1, sp, #28
 8000744:	4817      	ldr	r0, [pc, #92]	; (80007a4 <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000746:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800074e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000750:	f002 f9d0 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000754:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000758:	a907      	add	r1, sp, #28
 800075a:	4813      	ldr	r0, [pc, #76]	; (80007a8 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800075c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000764:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000766:	f002 f9c5 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800076a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800076e:	a907      	add	r1, sp, #28
 8000770:	480e      	ldr	r0, [pc, #56]	; (80007ac <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8000772:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800077a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800077c:	f002 f9ba 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000780:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	a907      	add	r1, sp, #28
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000786:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800078e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f002 f9b0 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000794:	b00c      	add	sp, #48	; 0x30
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	50050000 	.word	0x50050000
 800079c:	40023800 	.word	0x40023800
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40021800 	.word	0x40021800
 80007ac:	40021c00 	.word	0x40021c00
 80007b0:	40020000 	.word	0x40020000

080007b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80007b4:	b508      	push	{r3, lr}

  hdma2d.Instance = DMA2D;
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_DMA2D_Init+0x38>)
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_DMA2D_Init+0x3c>)
 80007ba:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007bc:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007be:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007c2:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007c4:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.Init.Mode = DMA2D_M2M;
 80007c6:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007c8:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 80007ca:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007cc:	f001 fea7 	bl	800251e <HAL_DMA2D_Init>
 80007d0:	b108      	cbz	r0, 80007d6 <MX_DMA2D_Init+0x22>
  {
    Error_Handler();
 80007d2:	f000 fd1f 	bl	8001214 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007d6:	2101      	movs	r1, #1
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_DMA2D_Init+0x38>)
 80007da:	f001 ff59 	bl	8002690 <HAL_DMA2D_ConfigLayer>
 80007de:	b118      	cbz	r0, 80007e8 <MX_DMA2D_Init+0x34>
  {
    Error_Handler();
  }

}
 80007e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80007e4:	f000 bd16 	b.w	8001214 <Error_Handler>
 80007e8:	bd08      	pop	{r3, pc}
 80007ea:	bf00      	nop
 80007ec:	200084e0 	.word	0x200084e0
 80007f0:	4002b000 	.word	0x4002b000

080007f4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80007f4:	b507      	push	{r0, r1, r2, lr}

  if(dma2dHandle->Instance==DMA2D)
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_DMA2D_MspInit+0x38>)
 80007f8:	6802      	ldr	r2, [r0, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d112      	bne.n	8000824 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80007fe:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000802:	205a      	movs	r0, #90	; 0x5a
 8000804:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000808:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800080e:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800081a:	f001 fd59 	bl	80022d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800081e:	205a      	movs	r0, #90	; 0x5a
 8000820:	f001 fd8e 	bl	8002340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000824:	b003      	add	sp, #12
 8000826:	f85d fb04 	ldr.w	pc, [sp], #4
 800082a:	bf00      	nop
 800082c:	4002b000 	.word	0x4002b000

08000830 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000830:	b507      	push	{r0, r1, r2, lr}
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000832:	2301      	movs	r3, #1
  heth.Instance = ETH;
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_ETH_Init+0x4c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_ETH_Init+0x50>)
  MACAddr[1] = 0x80;
  MACAddr[2] = 0xE1;
  MACAddr[3] = 0x00;
  MACAddr[4] = 0x00;
  MACAddr[5] = 0x00;
  heth.Init.MACAddr = &MACAddr[0];
 8000838:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800083c:	e880 000c 	stmia.w	r0, {r2, r3}
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000840:	2300      	movs	r3, #0
  MACAddr[1] = 0x80;
 8000842:	2280      	movs	r2, #128	; 0x80
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000844:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8000846:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 800084a:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 800084e:	22e1      	movs	r2, #225	; 0xe1
  MACAddr[3] = 0x00;
 8000850:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 8000854:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 8000858:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800085c:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800085e:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000860:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  MACAddr[2] = 0xE1;
 8000864:	f88d 2002 	strb.w	r2, [sp, #2]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000868:	6203      	str	r3, [r0, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800086a:	f002 f849 	bl	8002900 <HAL_ETH_Init>
 800086e:	b108      	cbz	r0, 8000874 <MX_ETH_Init+0x44>
  {
    Error_Handler();
 8000870:	f000 fcd0 	bl	8001214 <Error_Handler>
  }

}
 8000874:	b003      	add	sp, #12
 8000876:	f85d fb04 	ldr.w	pc, [sp], #4
 800087a:	bf00      	nop
 800087c:	20008520 	.word	0x20008520
 8000880:	40028000 	.word	0x40028000

08000884 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	b08d      	sub	sp, #52	; 0x34
 8000888:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	2214      	movs	r2, #20
 800088c:	2100      	movs	r1, #0
 800088e:	a807      	add	r0, sp, #28
 8000890:	f009 f9b1 	bl	8009bf6 <memset>
  if(ethHandle->Instance==ETH)
 8000894:	6822      	ldr	r2, [r4, #0]
 8000896:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <HAL_ETH_MspInit+0xd0>)
 8000898:	429a      	cmp	r2, r3
 800089a:	d159      	bne.n	8000950 <HAL_ETH_MspInit+0xcc>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800089c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a4:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 80008a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a8:	a907      	add	r1, sp, #28
 80008aa:	482b      	ldr	r0, [pc, #172]	; (8000958 <HAL_ETH_MspInit+0xd4>)

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 80008ae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
 80008b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80008ba:	9201      	str	r2, [sp, #4]
 80008bc:	9a01      	ldr	r2, [sp, #4]
 80008be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
 80008c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80008cc:	9202      	str	r2, [sp, #8]
 80008ce:	9a02      	ldr	r2, [sp, #8]
 80008d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
 80008d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008da:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80008de:	9203      	str	r2, [sp, #12]
 80008e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
 80008ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80008f0:	9204      	str	r2, [sp, #16]
 80008f2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f6:	f042 0204 	orr.w	r2, r2, #4
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
 80008fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008fe:	f002 0204 	and.w	r2, r2, #4
 8000902:	9205      	str	r2, [sp, #20]
 8000904:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000908:	f042 0201 	orr.w	r2, r2, #1
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	9306      	str	r3, [sp, #24]
 8000918:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800091a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800091e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000922:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000924:	f002 f8e6 	bl	8002af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000928:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	a907      	add	r1, sp, #28
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <HAL_ETH_MspInit+0xd8>)
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800092e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000936:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f002 f8dc 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800093c:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	a907      	add	r1, sp, #28
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <HAL_ETH_MspInit+0xdc>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000942:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f002 f8d2 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000950:	b00d      	add	sp, #52	; 0x34
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000954:	40028000 	.word	0x40028000
 8000958:	40021800 	.word	0x40021800
 800095c:	40020800 	.word	0x40020800
 8000960:	40020000 	.word	0x40020000

08000964 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000964:	b500      	push	{lr}
 8000966:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000968:	221c      	movs	r2, #28
 800096a:	2100      	movs	r1, #0
 800096c:	a801      	add	r0, sp, #4
 800096e:	f009 f942 	bl	8009bf6 <memset>

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000972:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000974:	2210      	movs	r2, #16
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000978:	2104      	movs	r1, #4
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800097a:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800097c:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800097e:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000980:	2300      	movs	r3, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000982:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000984:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000988:	6043      	str	r3, [r0, #4]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800098a:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800098c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000990:	6083      	str	r3, [r0, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000992:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000998:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800099a:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 800099c:	2207      	movs	r2, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800099e:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80009a0:	2302      	movs	r3, #2
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009a2:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
 80009a4:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009a6:	2203      	movs	r2, #3
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009a8:	60c1      	str	r1, [r0, #12]
  SdramTiming.SelfRefreshTime = 4;
 80009aa:	9103      	str	r1, [sp, #12]
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009ac:	4469      	add	r1, sp
  SdramTiming.LoadToActiveDelay = 2;
 80009ae:	9301      	str	r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
 80009b0:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 80009b2:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80009b4:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009b6:	f004 fd98 	bl	80054ea <HAL_SDRAM_Init>
 80009ba:	b108      	cbz	r0, 80009c0 <MX_FMC_Init+0x5c>
  {
    Error_Handler( );
 80009bc:	f000 fc2a 	bl	8001214 <Error_Handler>
  }

}
 80009c0:	b009      	add	sp, #36	; 0x24
 80009c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009c6:	bf00      	nop
 80009c8:	20008568 	.word	0x20008568
 80009cc:	a0000140 	.word	0xa0000140

080009d0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	2214      	movs	r2, #20
 80009d6:	2100      	movs	r1, #0
 80009d8:	a801      	add	r0, sp, #4
 80009da:	f009 f90c 	bl	8009bf6 <memset>
  if (FMC_Initialized) {
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <HAL_SDRAM_MspInit+0xb8>)
 80009e0:	681e      	ldr	r6, [r3, #0]
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14d      	bne.n	8000a82 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80009e6:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ec:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80009ee:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f0:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <HAL_SDRAM_MspInit+0xbc>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f4:	4826      	ldr	r0, [pc, #152]	; (8000a90 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80009f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f8:	f042 0201 	orr.w	r2, r2, #1
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
 80009fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a02:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a08:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8000a0e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a12:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	f002 f86e 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8000a18:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a1c:	a901      	add	r1, sp, #4
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8000a20:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a28:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2a:	f002 f863 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8000a2e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	a901      	add	r1, sp, #4
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8000a36:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a3e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	f002 f858 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8000a44:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a48:	a901      	add	r1, sp, #4
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8000a4c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a54:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a56:	f002 f84d 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000a5a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a5c:	a901      	add	r1, sp, #4
 8000a5e:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000a60:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a68:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a6a:	f002 f843 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000a6e:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000a70:	a901      	add	r1, sp, #4
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000a74:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f002 f839 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000a82:	b007      	add	sp, #28
 8000a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000ac 	.word	0x200000ac
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40021400 	.word	0x40021400
 8000aa0:	40021c00 	.word	0x40021c00
 8000aa4:	40020800 	.word	0x40020800

08000aa8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000aa8:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8000aaa:	f006 fb21 	bl	80070f0 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000aae:	f008 fee7 	bl	8009880 <MX_USB_HOST_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f007 fc11 	bl	80082da <osDelay>
 8000ab8:	e7fb      	b.n	8000ab2 <StartDefaultTask+0xa>

08000aba <vApplicationIdleHook>:
 8000aba:	4770      	bx	lr

08000abc <vApplicationStackOverflowHook>:
{
 8000abc:	4770      	bx	lr

08000abe <vApplicationMallocFailedHook>:
{
 8000abe:	4770      	bx	lr

08000ac0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000ac0:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ac2:	4d07      	ldr	r5, [pc, #28]	; (8000ae0 <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 8000ac4:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac8:	ac01      	add	r4, sp, #4
 8000aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000acc:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ad2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ad4:	f007 fbe9 	bl	80082aa <osThreadCreate>
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <MX_FREERTOS_Init+0x24>)
 8000ada:	6018      	str	r0, [r3, #0]
}
 8000adc:	b007      	add	sp, #28
 8000ade:	bd30      	pop	{r4, r5, pc}
 8000ae0:	08009d9c 	.word	0x08009d9c
 8000ae4:	2000859c 	.word	0x2000859c

08000ae8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB10   ------> USB_OTG_HS_ULPI_D3
*/
void MX_GPIO_Init(void)
{
 8000ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aec:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	2214      	movs	r2, #20
 8000af0:	2100      	movs	r1, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000af2:	4f8d      	ldr	r7, [pc, #564]	; (8000d28 <MX_GPIO_Init+0x240>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	a80d      	add	r0, sp, #52	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000af6:	4e8d      	ldr	r6, [pc, #564]	; (8000d2c <MX_GPIO_Init+0x244>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f009 f87d 	bl	8009bf6 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afc:	4b8c      	ldr	r3, [pc, #560]	; (8000d30 <MX_GPIO_Init+0x248>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000afe:	4638      	mov	r0, r7
 8000b00:	2120      	movs	r1, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b06:	f8df a240 	ldr.w	sl, [pc, #576]	; 8000d48 <MX_GPIO_Init+0x260>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0c:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000b10:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8000d4c <MX_GPIO_Init+0x264>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b14:	f8df b238 	ldr.w	fp, [pc, #568]	; 8000d50 <MX_GPIO_Init+0x268>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b18:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b20:	f002 0210 	and.w	r2, r2, #16
 8000b24:	9202      	str	r2, [sp, #8]
 8000b26:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b32:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b36:	9203      	str	r2, [sp, #12]
 8000b38:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3c:	f042 0202 	orr.w	r2, r2, #2
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
 8000b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b44:	f002 0202 	and.w	r2, r2, #2
 8000b48:	9204      	str	r2, [sp, #16]
 8000b4a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b4e:	f042 0208 	orr.w	r2, r2, #8
 8000b52:	631a      	str	r2, [r3, #48]	; 0x30
 8000b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b56:	f002 0208 	and.w	r2, r2, #8
 8000b5a:	9205      	str	r2, [sp, #20]
 8000b5c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b60:	f042 0204 	orr.w	r2, r2, #4
 8000b64:	631a      	str	r2, [r3, #48]	; 0x30
 8000b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b68:	f002 0204 	and.w	r2, r2, #4
 8000b6c:	9206      	str	r2, [sp, #24]
 8000b6e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b72:	f042 0201 	orr.w	r2, r2, #1
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
 8000b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7a:	f002 0201 	and.w	r2, r2, #1
 8000b7e:	9207      	str	r2, [sp, #28]
 8000b80:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000b90:	9208      	str	r2, [sp, #32]
 8000b92:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
 8000bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8000bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bba:	f042 0220 	orr.w	r2, r2, #32
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc2:	f002 0220 	and.w	r2, r2, #32
 8000bc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8000bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	930c      	str	r3, [sp, #48]	; 0x30
 8000bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bde:	f002 f879 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000be2:	4630      	mov	r0, r6
 8000be4:	2200      	movs	r2, #0
 8000be6:	210c      	movs	r1, #12
 8000be8:	f002 f874 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000bec:	4b51      	ldr	r3, [pc, #324]	; (8000d34 <MX_GPIO_Init+0x24c>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	f002 f86d 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	f002 f867 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c06:	4650      	mov	r0, sl
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0e:	f002 f861 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000c12:	4640      	mov	r0, r8
 8000c14:	2200      	movs	r2, #0
 8000c16:	21c8      	movs	r1, #200	; 0xc8
 8000c18:	f002 f85c 	bl	8002cd4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000c1c:	2208      	movs	r2, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	a90d      	add	r1, sp, #52	; 0x34
 8000c20:	4845      	ldr	r0, [pc, #276]	; (8000d38 <MX_GPIO_Init+0x250>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000c22:	920d      	str	r2, [sp, #52]	; 0x34
 8000c24:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f001 ff63 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c32:	4842      	ldr	r0, [pc, #264]	; (8000d3c <MX_GPIO_Init+0x254>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000c36:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c38:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f001 ff5a 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c40:	2140      	movs	r1, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c42:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c44:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c48:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f001 ff51 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c52:	2120      	movs	r1, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c54:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c58:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f001 ff48 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c64:	f241 010c 	movw	r1, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c68:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c6c:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c6e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c74:	f001 ff3e 	bl	8002af4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c78:	a90d      	add	r1, sp, #52	; 0x34
 8000c7a:	4831      	ldr	r0, [pc, #196]	; (8000d40 <MX_GPIO_Init+0x258>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c7c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f001 ff36 	bl	8002af4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c88:	9b01      	ldr	r3, [sp, #4]
 8000c8a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000c8c:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	4618      	mov	r0, r3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000c92:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f001 ff2c 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c9c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	a90d      	add	r1, sp, #52	; 0x34
 8000ca0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ca4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f001 ff24 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000cac:	f248 0304 	movw	r3, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cb0:	a90d      	add	r1, sp, #52	; 0x34
 8000cb2:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000cb6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cba:	f001 ff1b 	bl	8002af4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	a90d      	add	r1, sp, #52	; 0x34
 8000cc0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000cc2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f001 ff12 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	a90d      	add	r1, sp, #52	; 0x34
 8000cd2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cd4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f001 ff09 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ce2:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce4:	a90d      	add	r1, sp, #52	; 0x34
 8000ce6:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000cea:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf0:	f001 ff00 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000cf4:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	a90d      	add	r1, sp, #52	; 0x34
 8000cf8:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000cfc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f001 fef8 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8000d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000d08:	a90d      	add	r1, sp, #52	; 0x34
 8000d0a:	480e      	ldr	r0, [pc, #56]	; (8000d44 <MX_GPIO_Init+0x25c>)
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8000d0c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f001 feea 	bl	8002af4 <HAL_GPIO_Init>

}
 8000d20:	b013      	add	sp, #76	; 0x4c
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d26:	bf00      	nop
 8000d28:	40020c00 	.word	0x40020c00
 8000d2c:	40022000 	.word	0x40022000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40022800 	.word	0x40022800
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40022400 	.word	0x40022400
 8000d40:	40020800 	.word	0x40020800
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40021c00 	.word	0x40021c00
 8000d4c:	40021800 	.word	0x40021800
 8000d50:	10120000 	.word	0x10120000

08000d54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d54:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000d56:	4812      	ldr	r0, [pc, #72]	; (8000da0 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d58:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d5c:	4912      	ldr	r1, [pc, #72]	; (8000da8 <MX_I2C1_Init+0x54>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000d60:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d68:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d6a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d6c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d70:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d72:	f002 fbf7 	bl	8003564 <HAL_I2C_Init>
 8000d76:	b108      	cbz	r0, 8000d7c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8000d78:	f000 fa4c 	bl	8001214 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <MX_I2C1_Init+0x4c>)
 8000d80:	f002 fc41 	bl	8003606 <HAL_I2CEx_ConfigAnalogFilter>
 8000d84:	b108      	cbz	r0, 8000d8a <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8000d86:	f000 fa45 	bl	8001214 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_I2C1_Init+0x4c>)
 8000d8e:	f002 fc60 	bl	8003652 <HAL_I2CEx_ConfigDigitalFilter>
 8000d92:	b118      	cbz	r0, 8000d9c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8000d94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000d98:	f000 ba3c 	b.w	8001214 <Error_Handler>
 8000d9c:	bd08      	pop	{r3, pc}
 8000d9e:	bf00      	nop
 8000da0:	200085ec 	.word	0x200085ec
 8000da4:	00c0eaff 	.word	0x00c0eaff
 8000da8:	40005400 	.word	0x40005400

08000dac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000dac:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x00C0EAFF;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_I2C3_Init+0x50>)
 8000db4:	4912      	ldr	r1, [pc, #72]	; (8000e00 <MX_I2C3_Init+0x54>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db6:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000db8:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	6083      	str	r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc0:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dc2:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc4:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc6:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dca:	f002 fbcb 	bl	8003564 <HAL_I2C_Init>
 8000dce:	b108      	cbz	r0, 8000dd4 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 8000dd0:	f000 fa20 	bl	8001214 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <MX_I2C3_Init+0x4c>)
 8000dd8:	f002 fc15 	bl	8003606 <HAL_I2CEx_ConfigAnalogFilter>
 8000ddc:	b108      	cbz	r0, 8000de2 <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 8000dde:	f000 fa19 	bl	8001214 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_I2C3_Init+0x4c>)
 8000de6:	f002 fc34 	bl	8003652 <HAL_I2CEx_ConfigDigitalFilter>
 8000dea:	b118      	cbz	r0, 8000df4 <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 8000dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000df0:	f000 ba10 	b.w	8001214 <Error_Handler>
 8000df4:	bd08      	pop	{r3, pc}
 8000df6:	bf00      	nop
 8000df8:	200085a0 	.word	0x200085a0
 8000dfc:	00c0eaff 	.word	0x00c0eaff
 8000e00:	40005c00 	.word	0x40005c00

08000e04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e04:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	2214      	movs	r2, #20
{
 8000e08:	b08a      	sub	sp, #40	; 0x28
 8000e0a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	eb0d 0002 	add.w	r0, sp, r2
 8000e12:	f008 fef0 	bl	8009bf6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <HAL_I2C_MspInit+0xac>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d121      	bne.n	8000e62 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4c25      	ldr	r4, [pc, #148]	; (8000eb4 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	a905      	add	r1, sp, #20
 8000e22:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e44:	2304      	movs	r3, #4
 8000e46:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f001 fe54 	bl	8002af4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	6423      	str	r3, [r4, #64]	; 0x40
 8000e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000e5e:	b00a      	add	sp, #40	; 0x28
 8000e60:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C3)
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_I2C_MspInit+0xb8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d1fa      	bne.n	8000e5e <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e68:	4c12      	ldr	r4, [pc, #72]	; (8000eb4 <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e6a:	a905      	add	r1, sp, #20
 8000e6c:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	6323      	str	r3, [r4, #48]	; 0x30
 8000e76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e80:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e92:	2304      	movs	r3, #4
 8000e94:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e96:	f001 fe2d 	bl	8002af4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ea0:	6423      	str	r3, [r4, #64]	; 0x40
 8000ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea8:	9304      	str	r3, [sp, #16]
 8000eaa:	9b04      	ldr	r3, [sp, #16]
}
 8000eac:	e7d7      	b.n	8000e5e <HAL_I2C_MspInit+0x5a>
 8000eae:	bf00      	nop
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40005c00 	.word	0x40005c00
 8000ec0:	40021c00 	.word	0x40021c00

08000ec4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ec8:	2234      	movs	r2, #52	; 0x34
 8000eca:	2100      	movs	r1, #0

  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ecc:	2400      	movs	r4, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ece:	a801      	add	r0, sp, #4
 8000ed0:	f008 fe91 	bl	8009bf6 <memset>
  hltdc.Instance = LTDC;
 8000ed4:	4826      	ldr	r0, [pc, #152]	; (8000f70 <MX_LTDC_Init+0xac>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_LTDC_Init+0xb0>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ed8:	6084      	str	r4, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000eda:	60c4      	str	r4, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000edc:	6104      	str	r4, [r0, #16]
  hltdc.Init.AccumulatedVBP = 11;
  hltdc.Init.AccumulatedActiveW = 533;
  hltdc.Init.AccumulatedActiveH = 283;
  hltdc.Init.TotalWidth = 565;
  hltdc.Init.TotalHeigh = 285;
  hltdc.Init.Backcolor.Blue = 0;
 8000ede:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ee2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ee6:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000eea:	e880 0018 	stmia.w	r0, {r3, r4}
  hltdc.Init.HorizontalSync = 40;
 8000eee:	2328      	movs	r3, #40	; 0x28
 8000ef0:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8000ef2:	2309      	movs	r3, #9
 8000ef4:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ef6:	2335      	movs	r3, #53	; 0x35
 8000ef8:	61c3      	str	r3, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000efa:	230b      	movs	r3, #11
 8000efc:	6203      	str	r3, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000efe:	f240 2315 	movw	r3, #533	; 0x215
 8000f02:	6243      	str	r3, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000f04:	f240 131b 	movw	r3, #283	; 0x11b
 8000f08:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f0a:	f240 2335 	movw	r3, #565	; 0x235
 8000f0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f10:	f240 131d 	movw	r3, #285	; 0x11d
 8000f14:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f16:	f002 fc47 	bl	80037a8 <HAL_LTDC_Init>
 8000f1a:	b108      	cbz	r0, 8000f20 <MX_LTDC_Init+0x5c>
  {
    Error_Handler();
 8000f1c:	f000 f97a 	bl	8001214 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 480;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 272;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f20:	2102      	movs	r1, #2
  pLayerCfg.WindowX1 = 480;
 8000f22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8000f26:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.ImageWidth = 480;
  pLayerCfg.ImageHeight = 272;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_LTDC_Init+0xac>)
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f2c:	9105      	str	r1, [sp, #20]
  pLayerCfg.Alpha = 255;
 8000f2e:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 8000f30:	9202      	str	r2, [sp, #8]
  pLayerCfg.Alpha = 255;
 8000f32:	9106      	str	r1, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.ImageWidth = 480;
 8000f38:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f3a:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f3c:	9108      	str	r1, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f3e:	2107      	movs	r1, #7
  pLayerCfg.WindowX0 = 0;
 8000f40:	9401      	str	r4, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f42:	9109      	str	r1, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f44:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8000f48:	9403      	str	r4, [sp, #12]
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f4a:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f4c:	a901      	add	r1, sp, #4
  pLayerCfg.WindowY1 = 272;
 8000f4e:	9304      	str	r3, [sp, #16]
  pLayerCfg.Alpha0 = 0;
 8000f50:	9407      	str	r4, [sp, #28]
  pLayerCfg.ImageHeight = 272;
 8000f52:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f54:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f58:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f5c:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f60:	f002 fcee 	bl	8003940 <HAL_LTDC_ConfigLayer>
 8000f64:	b108      	cbz	r0, 8000f6a <MX_LTDC_Init+0xa6>
  {
    Error_Handler();
 8000f66:	f000 f955 	bl	8001214 <Error_Handler>
  }

}
 8000f6a:	b00e      	add	sp, #56	; 0x38
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	bf00      	nop
 8000f70:	20008638 	.word	0x20008638
 8000f74:	40016800 	.word	0x40016800

08000f78 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	2214      	movs	r2, #20
 8000f80:	2100      	movs	r1, #0
 8000f82:	a807      	add	r0, sp, #28
 8000f84:	f008 fe37 	bl	8009bf6 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000f88:	6822      	ldr	r2, [r4, #0]
 8000f8a:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <HAL_LTDC_MspInit+0x10c>)
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d176      	bne.n	800107e <HAL_LTDC_MspInit+0x106>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f90:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f96:	260e      	movs	r6, #14
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000f98:	a907      	add	r1, sp, #28
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2400      	movs	r4, #0
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	483a      	ldr	r0, [pc, #232]	; (8001088 <HAL_LTDC_MspInit+0x110>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fa0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
 8000fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fa8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000fac:	9201      	str	r2, [sp, #4]
 8000fae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb2:	f042 0210 	orr.w	r2, r2, #16
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fba:	f002 0210 	and.w	r2, r2, #16
 8000fbe:	9202      	str	r2, [sp, #8]
 8000fc0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fcc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fd0:	9203      	str	r2, [sp, #12]
 8000fd2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
 8000fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fde:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000fe2:	9204      	str	r2, [sp, #16]
 8000fe4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
 8000fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ff4:	9205      	str	r2, [sp, #20]
 8000ff6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001008:	9306      	str	r3, [sp, #24]
 800100a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800100c:	2310      	movs	r3, #16
 800100e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001010:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001012:	f001 fd6f 	bl	8002af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8001016:	f64e 73ff 	movw	r3, #61439	; 0xefff
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800101a:	a907      	add	r1, sp, #28
 800101c:	481b      	ldr	r0, [pc, #108]	; (800108c <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800101e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001026:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001028:	f001 fd64 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800102c:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800102e:	a907      	add	r1, sp, #28
 8001030:	4817      	ldr	r0, [pc, #92]	; (8001090 <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8001032:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800103c:	f001 fd5a 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001044:	a907      	add	r1, sp, #28
 8001046:	4813      	ldr	r0, [pc, #76]	; (8001094 <HAL_LTDC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001048:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800104a:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800104e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001054:	f001 fd4e 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001058:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800105c:	a907      	add	r1, sp, #28
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <HAL_LTDC_MspInit+0x120>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001060:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001068:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800106a:	f001 fd43 	bl	8002af4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800106e:	2058      	movs	r0, #88	; 0x58
 8001070:	4622      	mov	r2, r4
 8001072:	2105      	movs	r1, #5
 8001074:	f001 f92c 	bl	80022d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001078:	2058      	movs	r0, #88	; 0x58
 800107a:	f001 f961 	bl	8002340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800107e:	b00c      	add	sp, #48	; 0x30
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 8001082:	bf00      	nop
 8001084:	40016800 	.word	0x40016800
 8001088:	40021000 	.word	0x40021000
 800108c:	40022400 	.word	0x40022400
 8001090:	40022800 	.word	0x40022800
 8001094:	40021800 	.word	0x40021800
 8001098:	40022000 	.word	0x40022000

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a0:	2230      	movs	r2, #48	; 0x30
 80010a2:	2100      	movs	r1, #0
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a4:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010a8:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f008 fda4 	bl	8009bf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ae:	2214      	movs	r2, #20
 80010b0:	2100      	movs	r1, #0
 80010b2:	a802      	add	r0, sp, #8
 80010b4:	f008 fd9f 	bl	8009bf6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	2100      	movs	r1, #0
 80010ba:	2284      	movs	r2, #132	; 0x84
 80010bc:	a813      	add	r0, sp, #76	; 0x4c
 80010be:	f008 fd9a 	bl	8009bf6 <memset>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2400      	movs	r4, #0
  HAL_PWR_EnableBkUpAccess();
 80010c4:	f002 fc66 	bl	8003994 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <SystemClock_Config+0xe4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <SystemClock_Config+0xe8>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80010e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ee:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010f8:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010fc:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001102:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001104:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001106:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800110a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLN = 400;
 800110c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800110e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f002 fd00 	bl	8003b18 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001118:	f002 fc44 	bl	80039a4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800111e:	2106      	movs	r1, #6
 8001120:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001122:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001124:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800112a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001132:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001134:	f002 feb2 	bl	8003e9c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <SystemClock_Config+0xec>)
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800113c:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800113e:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001140:	2364      	movs	r3, #100	; 0x64
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001142:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001144:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001146:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800114a:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800114c:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800114e:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001150:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001152:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001154:	2303      	movs	r3, #3
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001156:	961c      	str	r6, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001158:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800115a:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800115e:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001160:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001166:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001168:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800116a:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800116c:	9429      	str	r4, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800116e:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001170:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001172:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001174:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001176:	f002 ff73 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800117a:	b034      	add	sp, #208	; 0xd0
 800117c:	bd70      	pop	{r4, r5, r6, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000
 8001188:	01b14868 	.word	0x01b14868

0800118c <main>:
{
 800118c:	b508      	push	{r3, lr}
  HAL_Init();
 800118e:	f000 ff17 	bl	8001fc0 <HAL_Init>
  SystemClock_Config();
 8001192:	f7ff ff83 	bl	800109c <SystemClock_Config>
  MX_GPIO_Init();
 8001196:	f7ff fca7 	bl	8000ae8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800119a:	f7ff f9c1 	bl	8000520 <MX_ADC3_Init>
  MX_CRC_Init();
 800119e:	f7ff fa37 	bl	8000610 <MX_CRC_Init>
  MX_DCMI_Init();
 80011a2:	f7ff fa63 	bl	800066c <MX_DCMI_Init>
  MX_DMA2D_Init();
 80011a6:	f7ff fb05 	bl	80007b4 <MX_DMA2D_Init>
  MX_ETH_Init();
 80011aa:	f7ff fb41 	bl	8000830 <MX_ETH_Init>
  MX_FMC_Init();
 80011ae:	f7ff fbd9 	bl	8000964 <MX_FMC_Init>
  MX_I2C1_Init();
 80011b2:	f7ff fdcf 	bl	8000d54 <MX_I2C1_Init>
  MX_I2C3_Init();
 80011b6:	f7ff fdf9 	bl	8000dac <MX_I2C3_Init>
  MX_LTDC_Init();
 80011ba:	f7ff fe83 	bl	8000ec4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80011be:	f000 f82b 	bl	8001218 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80011c2:	f000 f8b5 	bl	8001330 <MX_RTC_Init>
  MX_SAI2_Init();
 80011c6:	f000 f935 	bl	8001434 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80011ca:	f000 f9d9 	bl	8001580 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80011ce:	f000 fa33 	bl	8001638 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80011d2:	f000 fa79 	bl	80016c8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80011d6:	f000 fcc3 	bl	8001b60 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011da:	f000 fd31 	bl	8001c40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011de:	f000 fd7d 	bl	8001cdc <MX_TIM3_Init>
  MX_TIM5_Init();
 80011e2:	f000 fdc9 	bl	8001d78 <MX_TIM5_Init>
  MX_TIM8_Init();
 80011e6:	f000 fb95 	bl	8001914 <MX_TIM8_Init>
  MX_TIM12_Init();
 80011ea:	f000 fe13 	bl	8001e14 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80011ee:	f000 fe3d 	bl	8001e6c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80011f2:	f000 fe59 	bl	8001ea8 <MX_USART6_UART_Init>
  MX_FREERTOS_Init();
 80011f6:	f7ff fc63 	bl	8000ac0 <MX_FREERTOS_Init>
  osKernelStart();
 80011fa:	f007 f842 	bl	8008282 <osKernelStart>
 80011fe:	e7fe      	b.n	80011fe <main+0x72>

08001200 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001200:	6802      	ldr	r2, [r0, #0]
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001204:	429a      	cmp	r2, r3
 8001206:	d101      	bne.n	800120c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001208:	f000 bee6 	b.w	8001fd8 <HAL_IncTick>
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40001000 	.word	0x40001000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	4770      	bx	lr
	...

08001218 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001218:	b508      	push	{r3, lr}

  hqspi.Instance = QUADSPI;
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 255;
 800121c:	23ff      	movs	r3, #255	; 0xff
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_QUADSPI_Init+0x34>)
 8001220:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001224:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8001226:	2201      	movs	r2, #1
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001228:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
 800122a:	6082      	str	r2, [r0, #8]
  hqspi.Init.FlashSize = 1;
 800122c:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800122e:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001230:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001232:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001234:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001236:	f002 fc13 	bl	8003a60 <HAL_QSPI_Init>
 800123a:	b118      	cbz	r0, 8001244 <MX_QUADSPI_Init+0x2c>
  {
    Error_Handler();
  }

}
 800123c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001240:	f7ff bfe8 	b.w	8001214 <Error_Handler>
 8001244:	bd08      	pop	{r3, pc}
 8001246:	bf00      	nop
 8001248:	200086e0 	.word	0x200086e0
 800124c:	a0001000 	.word	0xa0001000

08001250 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	2214      	movs	r2, #20
{
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	2100      	movs	r1, #0
 800125c:	eb0d 0002 	add.w	r0, sp, r2
 8001260:	f008 fcc9 	bl	8009bf6 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_QSPI_MspInit+0xcc>)
 8001268:	429a      	cmp	r2, r3
 800126a:	d153      	bne.n	8001314 <HAL_QSPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_QSPI_MspInit+0xd0>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001272:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001276:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800127a:	a905      	add	r1, sp, #20
 800127c:	4829      	ldr	r0, [pc, #164]	; (8001324 <HAL_QSPI_MspInit+0xd4>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800127e:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
 8001286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001288:	f002 0202 	and.w	r2, r2, #2
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129a:	f002 0210 	and.w	r2, r2, #16
 800129e:	9202      	str	r2, [sp, #8]
 80012a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a4:	f042 0202 	orr.w	r2, r2, #2
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	f002 0202 	and.w	r2, r2, #2
 80012b0:	9203      	str	r2, [sp, #12]
 80012b2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b6:	f042 0208 	orr.w	r2, r2, #8
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80012be:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	9304      	str	r3, [sp, #16]
 80012cc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012ce:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f001 fc10 	bl	8002af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80012d4:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80012d6:	a905      	add	r1, sp, #20
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80012da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012dc:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012e0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f001 fc05 	bl	8002af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	a905      	add	r1, sp, #20
 80012ec:	480e      	ldr	r0, [pc, #56]	; (8001328 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ee:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012f8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f001 fbfb 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80012fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	a905      	add	r1, sp, #20
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001306:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800130e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	f001 fbf0 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001314:	b00a      	add	sp, #40	; 0x28
 8001316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800131a:	bf00      	nop
 800131c:	a0001000 	.word	0xa0001000
 8001320:	40023800 	.word	0x40023800
 8001324:	40021000 	.word	0x40021000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020c00 	.word	0x40020c00

08001330 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001330:	b510      	push	{r4, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001334:	2400      	movs	r4, #0
  RTC_TimeTypeDef sTime = {0};
 8001336:	2218      	movs	r2, #24
 8001338:	2100      	movs	r1, #0
 800133a:	a801      	add	r0, sp, #4
 800133c:	f008 fc5b 	bl	8009bf6 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001340:	222c      	movs	r2, #44	; 0x2c
 8001342:	4621      	mov	r1, r4
 8001344:	a807      	add	r0, sp, #28
  RTC_DateTypeDef sDate = {0};
 8001346:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001348:	f008 fc55 	bl	8009bf6 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800134c:	4830      	ldr	r0, [pc, #192]	; (8001410 <MX_RTC_Init+0xe0>)
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <MX_RTC_Init+0xe4>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001350:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001352:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001354:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001356:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 800135a:	237f      	movs	r3, #127	; 0x7f
 800135c:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800135e:	23ff      	movs	r3, #255	; 0xff
 8001360:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001362:	f003 f99d 	bl	80046a0 <HAL_RTC_Init>
 8001366:	b108      	cbz	r0, 800136c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001368:	f7ff ff54 	bl	8001214 <Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800136c:	2201      	movs	r2, #1
 800136e:	a901      	add	r1, sp, #4
 8001370:	4827      	ldr	r0, [pc, #156]	; (8001410 <MX_RTC_Init+0xe0>)
  sTime.Hours = 0x0;
 8001372:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8001376:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 800137a:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800137e:	9405      	str	r4, [sp, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001380:	9406      	str	r4, [sp, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001382:	f003 f9da 	bl	800473a <HAL_RTC_SetTime>
 8001386:	b108      	cbz	r0, 800138c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001388:	f7ff ff44 	bl	8001214 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800138c:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 800138e:	2400      	movs	r4, #0
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001390:	4669      	mov	r1, sp
 8001392:	481f      	ldr	r0, [pc, #124]	; (8001410 <MX_RTC_Init+0xe0>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001394:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8001398:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800139c:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 80013a0:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013a4:	f003 fa37 	bl	8004816 <HAL_RTC_SetDate>
 80013a8:	b108      	cbz	r0, 80013ae <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80013aa:	f7ff ff33 	bl	8001214 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80013ae:	f88d 401c 	strb.w	r4, [sp, #28]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Minutes = 0x0;
 80013b6:	f88d 401d 	strb.w	r4, [sp, #29]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013ba:	a907      	add	r1, sp, #28
  sAlarm.AlarmTime.Seconds = 0x0;
 80013bc:	f88d 401e 	strb.w	r4, [sp, #30]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013c0:	9408      	str	r4, [sp, #32]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013c2:	940b      	str	r4, [sp, #44]	; 0x2c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013c4:	940c      	str	r4, [sp, #48]	; 0x30
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013c6:	940d      	str	r4, [sp, #52]	; 0x34
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013c8:	940e      	str	r4, [sp, #56]	; 0x38
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013ca:	940f      	str	r4, [sp, #60]	; 0x3c
  sAlarm.AlarmDateWeekDay = 0x1;
 80013cc:	2401      	movs	r4, #1
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013ce:	4810      	ldr	r0, [pc, #64]	; (8001410 <MX_RTC_Init+0xe0>)
 80013d0:	4622      	mov	r2, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 80013d2:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_A;
 80013d6:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013d8:	f003 fa7c 	bl	80048d4 <HAL_RTC_SetAlarm>
 80013dc:	b108      	cbz	r0, 80013e2 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80013de:	f7ff ff19 	bl	8001214 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_B;
 80013e2:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013e6:	2201      	movs	r2, #1
 80013e8:	a907      	add	r1, sp, #28
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <MX_RTC_Init+0xe0>)
  sAlarm.AlarmDateWeekDay = 0x1;
 80013ec:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_B;
 80013f0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013f2:	f003 fa6f 	bl	80048d4 <HAL_RTC_SetAlarm>
 80013f6:	b108      	cbz	r0, 80013fc <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 80013f8:	f7ff ff0c 	bl	8001214 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80013fc:	2202      	movs	r2, #2
 80013fe:	2100      	movs	r1, #0
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_RTC_Init+0xe0>)
 8001402:	f003 fb05 	bl	8004a10 <HAL_RTCEx_SetTimeStamp>
 8001406:	b108      	cbz	r0, 800140c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8001408:	f7ff ff04 	bl	8001214 <Error_Handler>
  }

}
 800140c:	b012      	add	sp, #72	; 0x48
 800140e:	bd10      	pop	{r4, pc}
 8001410:	2000872c 	.word	0x2000872c
 8001414:	40002800 	.word	0x40002800

08001418 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001418:	6802      	ldr	r2, [r0, #0]
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <HAL_RTC_MspInit+0x14>)
 800141c:	429a      	cmp	r2, r3
 800141e:	d104      	bne.n	800142a <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001420:	4a03      	ldr	r2, [pc, #12]	; (8001430 <HAL_RTC_MspInit+0x18>)
 8001422:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001428:	6713      	str	r3, [r2, #112]	; 0x70
 800142a:	4770      	bx	lr
 800142c:	40002800 	.word	0x40002800
 8001430:	40023800 	.word	0x40023800

08001434 <MX_SAI2_Init>:

/* SAI2 init function */
void MX_SAI2_Init(void)
{

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001434:	4824      	ldr	r0, [pc, #144]	; (80014c8 <MX_SAI2_Init+0x94>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001436:	2240      	movs	r2, #64	; 0x40
{
 8001438:	b508      	push	{r3, lr}
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800143a:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800143c:	4a23      	ldr	r2, [pc, #140]	; (80014cc <MX_SAI2_Init+0x98>)
  hsai_BlockA2.Instance = SAI2_Block_A;
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_SAI2_Init+0x9c>)
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001440:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001442:	2208      	movs	r2, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001444:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001446:	2300      	movs	r3, #0
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001448:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800144a:	2201      	movs	r2, #1
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800144c:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800144e:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001450:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001452:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001454:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001456:	6103      	str	r3, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001458:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800145a:	6183      	str	r3, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800145c:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800145e:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001460:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001462:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001464:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001466:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001468:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800146a:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800146c:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800146e:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001470:	65c2      	str	r2, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001472:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001474:	f003 fb12 	bl	8004a9c <HAL_SAI_Init>
 8001478:	b108      	cbz	r0, 800147e <MX_SAI2_Init+0x4a>
  {
    Error_Handler();
 800147a:	f7ff fecb 	bl	8001214 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 800147e:	4815      	ldr	r0, [pc, #84]	; (80014d4 <MX_SAI2_Init+0xa0>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001480:	2203      	movs	r2, #3
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_SAI2_Init+0xa4>)
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8001484:	2118      	movs	r1, #24
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001486:	6042      	str	r2, [r0, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001488:	2240      	movs	r2, #64	; 0x40
  hsai_BlockB2.Instance = SAI2_Block_B;
 800148a:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800148c:	2300      	movs	r3, #0
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800148e:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001490:	2201      	movs	r2, #1
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001492:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001494:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001496:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001498:	6082      	str	r2, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800149a:	6103      	str	r3, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800149c:	6183      	str	r3, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800149e:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80014a0:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014a2:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 80014a6:	6401      	str	r1, [r0, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80014a8:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80014aa:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014ac:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80014ae:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80014b0:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014b2:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80014b4:	65c2      	str	r2, [r0, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80014b6:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80014b8:	f003 faf0 	bl	8004a9c <HAL_SAI_Init>
 80014bc:	b118      	cbz	r0, 80014c6 <MX_SAI2_Init+0x92>
  {
    Error_Handler();
  }

}
 80014be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014c2:	f7ff bea7 	b.w	8001214 <Error_Handler>
 80014c6:	bd08      	pop	{r3, pc}
 80014c8:	200087d0 	.word	0x200087d0
 80014cc:	0002ee00 	.word	0x0002ee00
 80014d0:	40015c04 	.word	0x40015c04
 80014d4:	2000874c 	.word	0x2000874c
 80014d8:	40015c24 	.word	0x40015c24

080014dc <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80014dc:	6802      	ldr	r2, [r0, #0]
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_SAI_MspInit+0x8c>)
 80014e0:	429a      	cmp	r2, r3
{
 80014e2:	b510      	push	{r4, lr}
 80014e4:	4604      	mov	r4, r0
 80014e6:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 80014e8:	d11b      	bne.n	8001522 <HAL_SAI_MspInit+0x46>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_SAI_MspInit+0x90>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	b94a      	cbnz	r2, 8001504 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80014f0:	491f      	ldr	r1, [pc, #124]	; (8001570 <HAL_SAI_MspInit+0x94>)
 80014f2:	6c48      	ldr	r0, [r1, #68]	; 0x44
 80014f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80014f8:	6448      	str	r0, [r1, #68]	; 0x44
 80014fa:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80014fc:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001500:	9101      	str	r1, [sp, #4]
 8001502:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 8001504:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001506:	a903      	add	r1, sp, #12
 8001508:	481a      	ldr	r0, [pc, #104]	; (8001574 <HAL_SAI_MspInit+0x98>)
    SAI2_client ++;
 800150a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800150c:	23f0      	movs	r3, #240	; 0xf0
 800150e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800151a:	230a      	movs	r3, #10
 800151c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800151e:	f001 fae9 	bl	8002af4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001522:	6822      	ldr	r2, [r4, #0]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_SAI_MspInit+0x9c>)
 8001526:	429a      	cmp	r2, r3
 8001528:	d11c      	bne.n	8001564 <HAL_SAI_MspInit+0x88>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_SAI_MspInit+0x90>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	b94a      	cbnz	r2, 8001544 <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001530:	490f      	ldr	r1, [pc, #60]	; (8001570 <HAL_SAI_MspInit+0x94>)
 8001532:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001534:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001538:	6448      	str	r0, [r1, #68]	; 0x44
 800153a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800153c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001540:	9102      	str	r1, [sp, #8]
 8001542:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 8001544:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001546:	a903      	add	r1, sp, #12
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <HAL_SAI_MspInit+0xa0>)
    SAI2_client ++;
 800154a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800154c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001550:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800155c:	230a      	movs	r3, #10
 800155e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001560:	f001 fac8 	bl	8002af4 <HAL_GPIO_Init>

    }
}
 8001564:	b008      	add	sp, #32
 8001566:	bd10      	pop	{r4, pc}
 8001568:	40015c04 	.word	0x40015c04
 800156c:	200000b0 	.word	0x200000b0
 8001570:	40023800 	.word	0x40023800
 8001574:	40022000 	.word	0x40022000
 8001578:	40015c24 	.word	0x40015c24
 800157c:	40021800 	.word	0x40021800

08001580 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <MX_SDMMC1_SD_Init+0x18>)
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <MX_SDMMC1_SD_Init+0x1c>)
 8001584:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800158a:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800158c:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800158e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001590:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20008854 	.word	0x20008854
 800159c:	40012c00 	.word	0x40012c00

080015a0 <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	2214      	movs	r2, #20
 80015a8:	2100      	movs	r1, #0
 80015aa:	a803      	add	r0, sp, #12
 80015ac:	f008 fb23 	bl	8009bf6 <memset>
  if(sdHandle->Instance==SDMMC1)
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_SD_MspInit+0x8c>)
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d136      	bne.n	8001626 <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015b8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015bc:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	eb0d 0104 	add.w	r1, sp, r4
 80015c8:	4819      	ldr	r0, [pc, #100]	; (8001630 <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
 80015d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015d6:	9200      	str	r2, [sp, #0]
 80015d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015dc:	f042 0204 	orr.w	r2, r2, #4
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
 80015e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e4:	f002 0204 	and.w	r2, r2, #4
 80015e8:	9201      	str	r2, [sp, #4]
 80015ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ee:	f042 0208 	orr.w	r2, r2, #8
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f8:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015fe:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8001604:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001608:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f001 fa73 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800160e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001610:	eb0d 0104 	add.w	r1, sp, r4
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001616:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001620:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001622:	f001 fa67 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001626:	b008      	add	sp, #32
 8001628:	bd70      	pop	{r4, r5, r6, pc}
 800162a:	bf00      	nop
 800162c:	40012c00 	.word	0x40012c00
 8001630:	40020800 	.word	0x40020800
 8001634:	40020c00 	.word	0x40020c00

08001638 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001638:	b508      	push	{r3, lr}

  hspdif.Instance = SPDIFRX;
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <MX_SPDIFRX_Init+0x30>)
 800163c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001640:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001642:	2300      	movs	r3, #0
 8001644:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001646:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001648:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800164a:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800164c:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800164e:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001650:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001652:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001654:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001656:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001658:	f003 ff67 	bl	800552a <HAL_SPDIFRX_Init>
 800165c:	b118      	cbz	r0, 8001666 <MX_SPDIFRX_Init+0x2e>
  {
    Error_Handler();
  }

}
 800165e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001662:	f7ff bdd7 	b.w	8001214 <Error_Handler>
 8001666:	bd08      	pop	{r3, pc}
 8001668:	200088d8 	.word	0x200088d8

0800166c <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 800166c:	b510      	push	{r4, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	2214      	movs	r2, #20
 8001674:	2100      	movs	r1, #0
 8001676:	a803      	add	r0, sp, #12
 8001678:	f008 fabd 	bl	8009bf6 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001682:	d11d      	bne.n	80016c0 <HAL_SPDIFRX_MspInit+0x54>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001684:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001688:	a903      	add	r1, sp, #12
 800168a:	480e      	ldr	r0, [pc, #56]	; (80016c4 <HAL_SPDIFRX_MspInit+0x58>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800168c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
 8001694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001696:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800169a:	9201      	str	r2, [sp, #4]
 800169c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a0:	f042 0208 	orr.w	r2, r2, #8
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80016b8:	2308      	movs	r3, #8
 80016ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f001 fa1a 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 80016c0:	b008      	add	sp, #32
 80016c2:	bd10      	pop	{r4, pc}
 80016c4:	40020c00 	.word	0x40020c00

080016c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016c8:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80016ca:	4810      	ldr	r0, [pc, #64]	; (800170c <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016cc:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80016d0:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <MX_SPI2_Init+0x48>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80016d6:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016dc:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016e0:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016e2:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 80016e4:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e8:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ec:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ee:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016f4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f6:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 80016f8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016fa:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016fc:	f003 ff4c 	bl	8005598 <HAL_SPI_Init>
 8001700:	b118      	cbz	r0, 800170a <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 8001702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001706:	f7ff bd85 	b.w	8001214 <Error_Handler>
 800170a:	bd08      	pop	{r3, pc}
 800170c:	20008924 	.word	0x20008924
 8001710:	40003800 	.word	0x40003800

08001714 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001714:	b530      	push	{r4, r5, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	2214      	movs	r2, #20
 800171c:	2100      	movs	r1, #0
 800171e:	a803      	add	r0, sp, #12
 8001720:	f008 fa69 	bl	8009bf6 <memset>
  if(spiHandle->Instance==SPI2)
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_SPI_MspInit+0x80>)
 8001728:	429a      	cmp	r2, r3
 800172a:	d131      	bne.n	8001790 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800172c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001730:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001732:	2505      	movs	r5, #5
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001734:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001738:	4817      	ldr	r0, [pc, #92]	; (8001798 <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800173a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
 8001740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001742:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800174a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
 8001752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001754:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001758:	9201      	str	r2, [sp, #4]
 800175a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175e:	f042 0202 	orr.w	r2, r2, #2
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001766:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800176e:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001774:	f001 f9be 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001778:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	a903      	add	r1, sp, #12
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001780:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800178a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f001 f9b2 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001790:	b009      	add	sp, #36	; 0x24
 8001792:	bd30      	pop	{r4, r5, pc}
 8001794:	40003800 	.word	0x40003800
 8001798:	40022000 	.word	0x40022000
 800179c:	40020400 	.word	0x40020400

080017a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_MspInit+0x3c>)
{
 80017a2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017a6:	210f      	movs	r1, #15
 80017a8:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
 80017b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017c4:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d0:	f000 fd7e 	bl	80022d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	b003      	add	sp, #12
 80017d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80017e2:	4601      	mov	r1, r0
{
 80017e4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80017e6:	2200      	movs	r2, #0
 80017e8:	2036      	movs	r0, #54	; 0x36
 80017ea:	f000 fd71 	bl	80022d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80017ee:	2036      	movs	r0, #54	; 0x36
 80017f0:	f000 fda6 	bl	8002340 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f6:	a901      	add	r1, sp, #4
 80017f8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017fc:	4c13      	ldr	r4, [pc, #76]	; (800184c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017fe:	f042 0210 	orr.w	r2, r2, #16
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180e:	f002 fc09 	bl	8004024 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001812:	f002 fbe7 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001818:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800181a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800181c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001820:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_InitTick+0x74>)
 8001824:	fbb0 f0f3 	udiv	r0, r0, r3
 8001828:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800182a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800182c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800182e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001830:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001834:	f004 f91a 	bl	8005a6c <HAL_TIM_Base_Init>
 8001838:	b920      	cbnz	r0, 8001844 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800183a:	4620      	mov	r0, r4
 800183c:	f003 ffe6 	bl	800580c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001840:	b008      	add	sp, #32
 8001842:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
 8001846:	e7fb      	b.n	8001840 <HAL_InitTick+0x60>
 8001848:	40023800 	.word	0x40023800
 800184c:	20008988 	.word	0x20008988
 8001850:	40001000 	.word	0x40001000
 8001854:	000f4240 	.word	0x000f4240

08001858 <NMI_Handler>:
 8001858:	4770      	bx	lr

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	e7fe      	b.n	800185a <HardFault_Handler>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	e7fe      	b.n	800185c <MemManage_Handler>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	e7fe      	b.n	800185e <BusFault_Handler>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler>

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	4770      	bx	lr

08001864 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001864:	4801      	ldr	r0, [pc, #4]	; (800186c <TIM6_DAC_IRQHandler+0x8>)
 8001866:	f003 bfeb 	b.w	8005840 <HAL_TIM_IRQHandler>
 800186a:	bf00      	nop
 800186c:	20008988 	.word	0x20008988

08001870 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001870:	4801      	ldr	r0, [pc, #4]	; (8001878 <OTG_FS_IRQHandler+0x8>)
 8001872:	f001 bb25 	b.w	8002ec0 <HAL_HCD_IRQHandler>
 8001876:	bf00      	nop
 8001878:	20009490 	.word	0x20009490

0800187c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800187c:	4801      	ldr	r0, [pc, #4]	; (8001884 <LTDC_IRQHandler+0x8>)
 800187e:	f002 b802 	b.w	8003886 <HAL_LTDC_IRQHandler>
 8001882:	bf00      	nop
 8001884:	20008638 	.word	0x20008638

08001888 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001888:	4801      	ldr	r0, [pc, #4]	; (8001890 <DMA2D_IRQHandler+0x8>)
 800188a:	f000 be76 	b.w	800257a <HAL_DMA2D_IRQHandler>
 800188e:	bf00      	nop
 8001890:	200084e0 	.word	0x200084e0

08001894 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001894:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <_sbrk+0x2c>)
{
 8001898:	4602      	mov	r2, r0
	if (heap_end == 0)
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	b909      	cbnz	r1, 80018a2 <_sbrk+0xe>
		heap_end = &end;
 800189e:	4909      	ldr	r1, [pc, #36]	; (80018c4 <_sbrk+0x30>)
 80018a0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80018a2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80018a4:	4669      	mov	r1, sp
 80018a6:	4402      	add	r2, r0
 80018a8:	428a      	cmp	r2, r1
 80018aa:	d906      	bls.n	80018ba <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018ac:	f008 f95e 	bl	8009b6c <__errno>
 80018b0:	230c      	movs	r3, #12
 80018b2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80018ba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80018bc:	bd08      	pop	{r3, pc}
 80018be:	bf00      	nop
 80018c0:	200000b4 	.word	0x200000b4
 80018c4:	20009758 	.word	0x20009758

080018c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	490f      	ldr	r1, [pc, #60]	; (8001908 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018ca:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <SystemInit+0x44>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80018e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <SystemInit+0x48>)
 80018f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	40023800 	.word	0x40023800
 8001910:	24003010 	.word	0x24003010

08001914 <MX_TIM8_Init>:
  HAL_TIM_MspPostInit(&htim5);

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001914:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	2210      	movs	r2, #16
{
 8001918:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	2100      	movs	r1, #0
 800191c:	eb0d 0002 	add.w	r0, sp, r2
 8001920:	f008 f969 	bl	8009bf6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	2300      	movs	r3, #0

  htim8.Instance = TIM8;
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <MX_TIM8_Init+0x64>)
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <MX_TIM8_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	9303      	str	r3, [sp, #12]
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 0;
 8001932:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8001936:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	6183      	str	r3, [r0, #24]
  htim8.Init.Prescaler = 0;
 800193a:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800193e:	f004 f895 	bl	8005a6c <HAL_TIM_Base_Init>
 8001942:	b108      	cbz	r0, 8001948 <MX_TIM8_Init+0x34>
  {
    Error_Handler();
 8001944:	f7ff fc66 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800194c:	a904      	add	r1, sp, #16
 800194e:	480a      	ldr	r0, [pc, #40]	; (8001978 <MX_TIM8_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001952:	f004 f987 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8001956:	b108      	cbz	r0, 800195c <MX_TIM8_Init+0x48>
  {
    Error_Handler();
 8001958:	f7ff fc5c 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800195e:	a901      	add	r1, sp, #4
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM8_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001964:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001968:	f004 fa10 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	b108      	cbz	r0, 8001972 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 800196e:	f7ff fc51 	bl	8001214 <Error_Handler>
  }

}
 8001972:	b009      	add	sp, #36	; 0x24
 8001974:	f85d fb04 	ldr.w	pc, [sp], #4
 8001978:	200089c8 	.word	0x200089c8
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001980:	6803      	ldr	r3, [r0, #0]
{
 8001982:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 8001984:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <HAL_TIM_Base_MspInit+0x94>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d10b      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_TIM_Base_MspInit+0x98>)
 800198c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800199e:	b006      	add	sp, #24
 80019a0:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 80019a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a6:	d10b      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80019ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	9b02      	ldr	r3, [sp, #8]
 80019be:	e7ee      	b.n	800199e <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 80019c0:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <HAL_TIM_Base_MspInit+0x9c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10a      	bne.n	80019dc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_TIM_Base_MspInit+0x98>)
 80019c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ca:	f042 0202 	orr.w	r2, r2, #2
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	9303      	str	r3, [sp, #12]
 80019d8:	9b03      	ldr	r3, [sp, #12]
 80019da:	e7e0      	b.n	800199e <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM5)
 80019dc:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_TIM_Base_MspInit+0xa0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10a      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_TIM_Base_MspInit+0x98>)
 80019e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e6:	f042 0208 	orr.w	r2, r2, #8
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	9304      	str	r3, [sp, #16]
 80019f4:	9b04      	ldr	r3, [sp, #16]
 80019f6:	e7d2      	b.n	800199e <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM8)
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_TIM_Base_MspInit+0xa4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d1cf      	bne.n	800199e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_TIM_Base_MspInit+0x98>)
 8001a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a02:	f042 0202 	orr.w	r2, r2, #2
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	9305      	str	r3, [sp, #20]
 8001a10:	9b05      	ldr	r3, [sp, #20]
}
 8001a12:	e7c4      	b.n	800199e <HAL_TIM_Base_MspInit+0x1e>
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40000c00 	.word	0x40000c00
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM12)
 8001a28:	6802      	ldr	r2, [r0, #0]
{
 8001a2a:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM12)
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_TIM_PWM_MspInit+0x24>)
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10a      	bne.n	8001a48 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a32:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8001a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001a48:	b002      	add	sp, #8
 8001a4a:	4770      	bx	lr
 8001a4c:	40001800 	.word	0x40001800

08001a50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a50:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	2214      	movs	r2, #20
{
 8001a54:	b08a      	sub	sp, #40	; 0x28
 8001a56:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	2100      	movs	r1, #0
 8001a5a:	eb0d 0002 	add.w	r0, sp, r2
 8001a5e:	f008 f8ca 	bl	8009bf6 <memset>
  if(timHandle->Instance==TIM1)
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	4a35      	ldr	r2, [pc, #212]	; (8001b3c <HAL_TIM_MspPostInit+0xec>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d116      	bne.n	8001a98 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_TIM_MspPostInit+0xf0>)
 8001a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001a82:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001a86:	a905      	add	r1, sp, #20
 8001a88:	482e      	ldr	r0, [pc, #184]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f001 f830 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001a94:	b00a      	add	sp, #40	; 0x28
 8001a96:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM2)
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d10d      	bne.n	8001aba <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab8:	e7e3      	b.n	8001a82 <HAL_TIM_MspPostInit+0x32>
  else if(timHandle->Instance==TIM3)
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_TIM_MspPostInit+0xf8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <HAL_TIM_MspPostInit+0x94>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	a905      	add	r1, sp, #20
 8001ac4:	4821      	ldr	r0, [pc, #132]	; (8001b4c <HAL_TIM_MspPostInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac8:	f042 0202 	orr.w	r2, r2, #2
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ae2:	e7d5      	b.n	8001a90 <HAL_TIM_MspPostInit+0x40>
  else if(timHandle->Instance==TIM5)
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_TIM_MspPostInit+0x100>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d111      	bne.n	8001b0e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001aec:	a905      	add	r1, sp, #20
 8001aee:	4819      	ldr	r0, [pc, #100]	; (8001b54 <HAL_TIM_MspPostInit+0x104>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	9303      	str	r3, [sp, #12]
 8001b00:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001b02:	2301      	movs	r3, #1
 8001b04:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b0c:	e7c0      	b.n	8001a90 <HAL_TIM_MspPostInit+0x40>
  else if(timHandle->Instance==TIM12)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_TIM_MspPostInit+0x108>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d1bf      	bne.n	8001a94 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001b16:	a905      	add	r1, sp, #20
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0x10c>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b28:	9304      	str	r3, [sp, #16]
 8001b2a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001b2c:	2340      	movs	r3, #64	; 0x40
 8001b2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b34:	2309      	movs	r3, #9
 8001b36:	9309      	str	r3, [sp, #36]	; 0x24
 8001b38:	e7aa      	b.n	8001a90 <HAL_TIM_MspPostInit+0x40>
 8001b3a:	bf00      	nop
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40000c00 	.word	0x40000c00
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40001800 	.word	0x40001800
 8001b5c:	40021c00 	.word	0x40021c00

08001b60 <MX_TIM1_Init>:
{
 8001b60:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	2210      	movs	r2, #16
{
 8001b64:	b09a      	sub	sp, #104	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b66:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b68:	2100      	movs	r1, #0
 8001b6a:	eb0d 0002 	add.w	r0, sp, r2
 8001b6e:	f008 f842 	bl	8009bf6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b72:	221c      	movs	r2, #28
 8001b74:	4621      	mov	r1, r4
 8001b76:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	9401      	str	r4, [sp, #4]
 8001b7a:	9402      	str	r4, [sp, #8]
 8001b7c:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7e:	f008 f83a 	bl	8009bf6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b82:	222c      	movs	r2, #44	; 0x2c
 8001b84:	4621      	mov	r1, r4
 8001b86:	a80f      	add	r0, sp, #60	; 0x3c
 8001b88:	f008 f835 	bl	8009bf6 <memset>
  htim1.Instance = TIM1;
 8001b8c:	482a      	ldr	r0, [pc, #168]	; (8001c38 <MX_TIM1_Init+0xd8>)
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <MX_TIM1_Init+0xdc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 8001b92:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b96:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 0;
 8001b9a:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b9e:	f003 ff65 	bl	8005a6c <HAL_TIM_Base_Init>
 8001ba2:	b108      	cbz	r0, 8001ba8 <MX_TIM1_Init+0x48>
    Error_Handler();
 8001ba4:	f7ff fb36 	bl	8001214 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bac:	a904      	add	r1, sp, #16
 8001bae:	4822      	ldr	r0, [pc, #136]	; (8001c38 <MX_TIM1_Init+0xd8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bb2:	f004 f857 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8001bb6:	b108      	cbz	r0, 8001bbc <MX_TIM1_Init+0x5c>
    Error_Handler();
 8001bb8:	f7ff fb2c 	bl	8001214 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bbc:	481e      	ldr	r0, [pc, #120]	; (8001c38 <MX_TIM1_Init+0xd8>)
 8001bbe:	f003 ff6f 	bl	8005aa0 <HAL_TIM_PWM_Init>
 8001bc2:	b108      	cbz	r0, 8001bc8 <MX_TIM1_Init+0x68>
    Error_Handler();
 8001bc4:	f7ff fb26 	bl	8001214 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bca:	a901      	add	r1, sp, #4
 8001bcc:	481a      	ldr	r0, [pc, #104]	; (8001c38 <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bd0:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd4:	f004 f8da 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	b108      	cbz	r0, 8001bde <MX_TIM1_Init+0x7e>
    Error_Handler();
 8001bda:	f7ff fb1b 	bl	8001214 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bde:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be0:	2200      	movs	r2, #0
 8001be2:	a908      	add	r1, sp, #32
 8001be4:	4814      	ldr	r0, [pc, #80]	; (8001c38 <MX_TIM1_Init+0xd8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be6:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8001be8:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bec:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bee:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf0:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf2:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf4:	f003 ffa6 	bl	8005b44 <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	b108      	cbz	r0, 8001bfe <MX_TIM1_Init+0x9e>
    Error_Handler();
 8001bfa:	f7ff fb0b 	bl	8001214 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c02:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c04:	a90f      	add	r1, sp, #60	; 0x3c
 8001c06:	480c      	ldr	r0, [pc, #48]	; (8001c38 <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c08:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c0e:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c10:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c12:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c14:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c16:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c18:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c1a:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c1c:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c1e:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c20:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c22:	f004 f8df 	bl	8005de4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c26:	b108      	cbz	r0, 8001c2c <MX_TIM1_Init+0xcc>
    Error_Handler();
 8001c28:	f7ff faf4 	bl	8001214 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <MX_TIM1_Init+0xd8>)
 8001c2e:	f7ff ff0f 	bl	8001a50 <HAL_TIM_MspPostInit>
}
 8001c32:	b01a      	add	sp, #104	; 0x68
 8001c34:	bd10      	pop	{r4, pc}
 8001c36:	bf00      	nop
 8001c38:	20008a88 	.word	0x20008a88
 8001c3c:	40010000 	.word	0x40010000

08001c40 <MX_TIM2_Init>:
{
 8001c40:	b510      	push	{r4, lr}
 8001c42:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c44:	2210      	movs	r2, #16
 8001c46:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	a803      	add	r0, sp, #12
 8001c4c:	f007 ffd3 	bl	8009bf6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c50:	221c      	movs	r2, #28
 8001c52:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c56:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5a:	9401      	str	r4, [sp, #4]
 8001c5c:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5e:	f007 ffca 	bl	8009bf6 <memset>
  htim2.Instance = TIM2;
 8001c62:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <MX_TIM2_Init+0x98>)
 8001c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 8001c6a:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	6184      	str	r4, [r0, #24]
  htim2.Init.Prescaler = 0;
 8001c70:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c74:	f003 fefa 	bl	8005a6c <HAL_TIM_Base_Init>
 8001c78:	b108      	cbz	r0, 8001c7e <MX_TIM2_Init+0x3e>
    Error_Handler();
 8001c7a:	f7ff facb 	bl	8001214 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c82:	a903      	add	r1, sp, #12
 8001c84:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <MX_TIM2_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c86:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c88:	f003 ffec 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8001c8c:	b108      	cbz	r0, 8001c92 <MX_TIM2_Init+0x52>
    Error_Handler();
 8001c8e:	f7ff fac1 	bl	8001214 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c92:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <MX_TIM2_Init+0x98>)
 8001c94:	f003 ff04 	bl	8005aa0 <HAL_TIM_PWM_Init>
 8001c98:	b108      	cbz	r0, 8001c9e <MX_TIM2_Init+0x5e>
    Error_Handler();
 8001c9a:	f7ff fabb 	bl	8001214 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9e:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	4669      	mov	r1, sp
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_TIM2_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca4:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca8:	f004 f870 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	b108      	cbz	r0, 8001cb2 <MX_TIM2_Init+0x72>
    Error_Handler();
 8001cae:	f7ff fab1 	bl	8001214 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	a907      	add	r1, sp, #28
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_TIM2_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cba:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001cbc:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	f003 ff3f 	bl	8005b44 <HAL_TIM_PWM_ConfigChannel>
 8001cc6:	b108      	cbz	r0, 8001ccc <MX_TIM2_Init+0x8c>
    Error_Handler();
 8001cc8:	f7ff faa4 	bl	8001214 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <MX_TIM2_Init+0x98>)
 8001cce:	f7ff febf 	bl	8001a50 <HAL_TIM_MspPostInit>
}
 8001cd2:	b00e      	add	sp, #56	; 0x38
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20008ac8 	.word	0x20008ac8

08001cdc <MX_TIM3_Init>:
{
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	a803      	add	r0, sp, #12
 8001ce8:	f007 ff85 	bl	8009bf6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cec:	221c      	movs	r2, #28
 8001cee:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf2:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf6:	9401      	str	r4, [sp, #4]
 8001cf8:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	f007 ff7c 	bl	8009bf6 <memset>
  htim3.Instance = TIM3;
 8001cfe:	481c      	ldr	r0, [pc, #112]	; (8001d70 <MX_TIM3_Init+0x94>)
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_TIM3_Init+0x98>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 0;
 8001d04:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d06:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	6184      	str	r4, [r0, #24]
  htim3.Init.Prescaler = 0;
 8001d0a:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d0e:	f003 fead 	bl	8005a6c <HAL_TIM_Base_Init>
 8001d12:	b108      	cbz	r0, 8001d18 <MX_TIM3_Init+0x3c>
    Error_Handler();
 8001d14:	f7ff fa7e 	bl	8001214 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d1c:	a903      	add	r1, sp, #12
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <MX_TIM3_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d20:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d22:	f003 ff9f 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8001d26:	b108      	cbz	r0, 8001d2c <MX_TIM3_Init+0x50>
    Error_Handler();
 8001d28:	f7ff fa74 	bl	8001214 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d2c:	4810      	ldr	r0, [pc, #64]	; (8001d70 <MX_TIM3_Init+0x94>)
 8001d2e:	f003 feb7 	bl	8005aa0 <HAL_TIM_PWM_Init>
 8001d32:	b108      	cbz	r0, 8001d38 <MX_TIM3_Init+0x5c>
    Error_Handler();
 8001d34:	f7ff fa6e 	bl	8001214 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3a:	4669      	mov	r1, sp
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <MX_TIM3_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d40:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d42:	f004 f823 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	b108      	cbz	r0, 8001d4c <MX_TIM3_Init+0x70>
    Error_Handler();
 8001d48:	f7ff fa64 	bl	8001214 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	a907      	add	r1, sp, #28
 8001d52:	4807      	ldr	r0, [pc, #28]	; (8001d70 <MX_TIM3_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d54:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001d56:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d58:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5a:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d5c:	f003 fef2 	bl	8005b44 <HAL_TIM_PWM_ConfigChannel>
 8001d60:	b108      	cbz	r0, 8001d66 <MX_TIM3_Init+0x8a>
    Error_Handler();
 8001d62:	f7ff fa57 	bl	8001214 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001d66:	4802      	ldr	r0, [pc, #8]	; (8001d70 <MX_TIM3_Init+0x94>)
 8001d68:	f7ff fe72 	bl	8001a50 <HAL_TIM_MspPostInit>
}
 8001d6c:	b00e      	add	sp, #56	; 0x38
 8001d6e:	bd10      	pop	{r4, pc}
 8001d70:	20008a48 	.word	0x20008a48
 8001d74:	40000400 	.word	0x40000400

08001d78 <MX_TIM5_Init>:
{
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	a803      	add	r0, sp, #12
 8001d84:	f007 ff37 	bl	8009bf6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d88:	221c      	movs	r2, #28
 8001d8a:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8e:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d92:	9401      	str	r4, [sp, #4]
 8001d94:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d96:	f007 ff2e 	bl	8009bf6 <memset>
  htim5.Instance = TIM5;
 8001d9a:	481c      	ldr	r0, [pc, #112]	; (8001e0c <MX_TIM5_Init+0x94>)
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <MX_TIM5_Init+0x98>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	6084      	str	r4, [r0, #8]
  htim5.Init.Period = 0;
 8001da0:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	6184      	str	r4, [r0, #24]
  htim5.Init.Prescaler = 0;
 8001da6:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001daa:	f003 fe5f 	bl	8005a6c <HAL_TIM_Base_Init>
 8001dae:	b108      	cbz	r0, 8001db4 <MX_TIM5_Init+0x3c>
    Error_Handler();
 8001db0:	f7ff fa30 	bl	8001214 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001db8:	a903      	add	r1, sp, #12
 8001dba:	4814      	ldr	r0, [pc, #80]	; (8001e0c <MX_TIM5_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbc:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dbe:	f003 ff51 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8001dc2:	b108      	cbz	r0, 8001dc8 <MX_TIM5_Init+0x50>
    Error_Handler();
 8001dc4:	f7ff fa26 	bl	8001214 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001dc8:	4810      	ldr	r0, [pc, #64]	; (8001e0c <MX_TIM5_Init+0x94>)
 8001dca:	f003 fe69 	bl	8005aa0 <HAL_TIM_PWM_Init>
 8001dce:	b108      	cbz	r0, 8001dd4 <MX_TIM5_Init+0x5c>
    Error_Handler();
 8001dd0:	f7ff fa20 	bl	8001214 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dd6:	4669      	mov	r1, sp
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <MX_TIM5_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dda:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ddc:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dde:	f003 ffd5 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	b108      	cbz	r0, 8001de8 <MX_TIM5_Init+0x70>
    Error_Handler();
 8001de4:	f7ff fa16 	bl	8001214 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dea:	220c      	movs	r2, #12
 8001dec:	a907      	add	r1, sp, #28
 8001dee:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_TIM5_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001df2:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df8:	f003 fea4 	bl	8005b44 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	b108      	cbz	r0, 8001e02 <MX_TIM5_Init+0x8a>
    Error_Handler();
 8001dfe:	f7ff fa09 	bl	8001214 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 8001e02:	4802      	ldr	r0, [pc, #8]	; (8001e0c <MX_TIM5_Init+0x94>)
 8001e04:	f7ff fe24 	bl	8001a50 <HAL_TIM_MspPostInit>
}
 8001e08:	b00e      	add	sp, #56	; 0x38
 8001e0a:	bd10      	pop	{r4, pc}
 8001e0c:	20008a08 	.word	0x20008a08
 8001e10:	40000c00 	.word	0x40000c00

08001e14 <MX_TIM12_Init>:
{
 8001e14:	b510      	push	{r4, lr}
 8001e16:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e18:	221c      	movs	r2, #28
 8001e1a:	2100      	movs	r1, #0
  htim12.Init.Prescaler = 0;
 8001e1c:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1e:	a801      	add	r0, sp, #4
 8001e20:	f007 fee9 	bl	8009bf6 <memset>
  htim12.Instance = TIM12;
 8001e24:	480f      	ldr	r0, [pc, #60]	; (8001e64 <MX_TIM12_Init+0x50>)
  htim12.Init.Prescaler = 0;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_TIM12_Init+0x54>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	6084      	str	r4, [r0, #8]
  htim12.Init.Period = 0;
 8001e2a:	60c4      	str	r4, [r0, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	6104      	str	r4, [r0, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	6184      	str	r4, [r0, #24]
  htim12.Init.Prescaler = 0;
 8001e30:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e34:	f003 fe34 	bl	8005aa0 <HAL_TIM_PWM_Init>
 8001e38:	b108      	cbz	r0, 8001e3e <MX_TIM12_Init+0x2a>
    Error_Handler();
 8001e3a:	f7ff f9eb 	bl	8001214 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	2200      	movs	r2, #0
 8001e42:	a901      	add	r1, sp, #4
 8001e44:	4807      	ldr	r0, [pc, #28]	; (8001e64 <MX_TIM12_Init+0x50>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e46:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001e48:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4a:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4e:	f003 fe79 	bl	8005b44 <HAL_TIM_PWM_ConfigChannel>
 8001e52:	b108      	cbz	r0, 8001e58 <MX_TIM12_Init+0x44>
    Error_Handler();
 8001e54:	f7ff f9de 	bl	8001214 <Error_Handler>
  HAL_TIM_MspPostInit(&htim12);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <MX_TIM12_Init+0x50>)
 8001e5a:	f7ff fdf9 	bl	8001a50 <HAL_TIM_MspPostInit>
}
 8001e5e:	b008      	add	sp, #32
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	bf00      	nop
 8001e64:	20008b08 	.word	0x20008b08
 8001e68:	40001800 	.word	0x40001800

08001e6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e6c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8001e70:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e76:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001e78:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e80:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e82:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e84:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e8c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8e:	f004 f9d7 	bl	8006240 <HAL_UART_Init>
 8001e92:	b118      	cbz	r0, 8001e9c <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001e94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e98:	f7ff b9bc 	b.w	8001214 <Error_Handler>
 8001e9c:	bd08      	pop	{r3, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20008b48 	.word	0x20008b48
 8001ea4:	40011000 	.word	0x40011000

08001ea8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001ea8:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <MX_USART6_UART_Init+0x34>)
  huart6.Init.BaudRate = 115200;
 8001eac:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART6_UART_Init+0x38>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001eb2:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 8001eb4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb8:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001eba:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebc:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ebe:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ec0:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec6:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001eca:	f004 f9b9 	bl	8006240 <HAL_UART_Init>
 8001ece:	b118      	cbz	r0, 8001ed8 <MX_USART6_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001ed4:	f7ff b99e 	b.w	8001214 <Error_Handler>
 8001ed8:	bd08      	pop	{r3, pc}
 8001eda:	bf00      	nop
 8001edc:	20008bc8 	.word	0x20008bc8
 8001ee0:	40011400 	.word	0x40011400

08001ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	2214      	movs	r2, #20
{
 8001ee8:	b08b      	sub	sp, #44	; 0x2c
 8001eea:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	2100      	movs	r1, #0
 8001eee:	eb0d 0002 	add.w	r0, sp, r2
 8001ef2:	f007 fe80 	bl	8009bf6 <memset>
  if(uartHandle->Instance==USART1)
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_UART_MspInit+0xc4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d133      	bne.n	8001f66 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_UART_MspInit+0xc8>)
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f02:	2407      	movs	r4, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f04:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f08:	4829      	ldr	r0, [pc, #164]	; (8001fb0 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0a:	f042 0210 	orr.w	r2, r2, #16
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f12:	f002 0210 	and.w	r2, r2, #16
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1c:	f042 0202 	orr.w	r2, r2, #2
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
 8001f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f24:	f002 0202 	and.w	r2, r2, #2
 8001f28:	9201      	str	r2, [sp, #4]
 8001f2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f3c:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f000 fdd5 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	a905      	add	r1, sp, #20
 8001f50:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f52:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f5c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f000 fdc9 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001f62:	b00b      	add	sp, #44	; 0x2c
 8001f64:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==USART6)
 8001f66:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <HAL_UART_MspInit+0xd4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d1fa      	bne.n	8001f62 <HAL_UART_MspInit+0x7e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6e:	a905      	add	r1, sp, #20
 8001f70:	4812      	ldr	r0, [pc, #72]	; (8001fbc <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	f042 0220 	orr.w	r2, r2, #32
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
 8001f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f7c:	f002 0220 	and.w	r2, r2, #32
 8001f80:	9203      	str	r2, [sp, #12]
 8001f82:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f86:	f042 0204 	orr.w	r2, r2, #4
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	9304      	str	r3, [sp, #16]
 8001f94:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001f96:	23c0      	movs	r3, #192	; 0xc0
 8001f98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8001fa6:	e7da      	b.n	8001f5e <HAL_UART_MspInit+0x7a>
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40011400 	.word	0x40011400
 8001fbc:	40020800 	.word	0x40020800

08001fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f000 f972 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fc09 	bl	80017e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fce:	f7ff fbe7 	bl	80017a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	bd08      	pop	{r3, pc}
	...

08001fd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_IncTick+0x10>)
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <HAL_IncTick+0x14>)
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	440b      	add	r3, r1
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20008c48 	.word	0x20008c48
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ff0:	4b01      	ldr	r3, [pc, #4]	; (8001ff8 <HAL_GetTick+0x8>)
 8001ff2:	6818      	ldr	r0, [r3, #0]
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20008c48 	.word	0x20008c48

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff fff6 	bl	8001ff0 <HAL_GetTick>
 8002004:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002008:	bf1e      	ittt	ne
 800200a:	4b04      	ldrne	r3, [pc, #16]	; (800201c <HAL_Delay+0x20>)
 800200c:	781b      	ldrbne	r3, [r3, #0]
 800200e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	1b40      	subs	r0, r0, r5
 8002016:	4284      	cmp	r4, r0
 8002018:	d8fa      	bhi.n	8002010 <HAL_Delay+0x14>
  {
  }
}
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	20000004 	.word	0x20000004

08002020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002020:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002022:	4604      	mov	r4, r0
 8002024:	2800      	cmp	r0, #0
 8002026:	f000 809b 	beq.w	8002160 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800202a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800202c:	b925      	cbnz	r5, 8002038 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202e:	f7fe faab 	bl	8000588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002032:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002034:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800203a:	06db      	lsls	r3, r3, #27
 800203c:	f100 808e 	bmi.w	800215c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002042:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HAL_ADC_Init+0x144>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002058:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	6861      	ldr	r1, [r4, #4]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002062:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002064:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800206c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002074:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002076:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800207e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002084:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002086:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002094:	4934      	ldr	r1, [pc, #208]	; (8002168 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002096:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002098:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800209a:	428a      	cmp	r2, r1
 800209c:	d052      	beq.n	8002144 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80020a4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ba:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020bc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020be:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c0:	f022 0202 	bic.w	r2, r2, #2
 80020c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80020cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ce:	f894 2020 	ldrb.w	r2, [r4, #32]
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d03e      	beq.n	8002154 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020d6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020de:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020e8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f0:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 80020f2:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020f8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020fc:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002102:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002106:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800211a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800212c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800212e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800213c:	2300      	movs	r3, #0
 800213e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8002142:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800214a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002152:	e7b2      	b.n	80020ba <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	e7c9      	b.n	80020f0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800215c:	2001      	movs	r0, #1
 800215e:	e7ed      	b.n	800213c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8002160:	2001      	movs	r0, #1
}
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	40012300 	.word	0x40012300
 8002168:	0f000001 	.word	0x0f000001

0800216c <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800216c:	2300      	movs	r3, #0
{
 800216e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8002170:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002172:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d071      	beq.n	800225e <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 800217a:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800217c:	2301      	movs	r3, #1
 800217e:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002180:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8002182:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8002186:	b2ae      	uxth	r6, r5
 8002188:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800218a:	d931      	bls.n	80021f0 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800218c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002190:	f04f 0e07 	mov.w	lr, #7
 8002194:	68e7      	ldr	r7, [r4, #12]
 8002196:	3b1e      	subs	r3, #30
 8002198:	fa0e fe03 	lsl.w	lr, lr, r3
 800219c:	ea27 070e 	bic.w	r7, r7, lr
 80021a0:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021a2:	4f3d      	ldr	r7, [pc, #244]	; (8002298 <HAL_ADC_ConfigChannel+0x12c>)
 80021a4:	42bd      	cmp	r5, r7
 80021a6:	d11e      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80021a8:	68e3      	ldr	r3, [r4, #12]
 80021aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ae:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 80021b0:	684a      	ldr	r2, [r1, #4]
 80021b2:	2a06      	cmp	r2, #6
 80021b4:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80021b8:	d82a      	bhi.n	8002210 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ba:	4413      	add	r3, r2
 80021bc:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80021be:	1f59      	subs	r1, r3, #5
 80021c0:	231f      	movs	r3, #31
 80021c2:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c4:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021c8:	ea27 0303 	bic.w	r3, r7, r3
 80021cc:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80021d0:	4311      	orrs	r1, r2
 80021d2:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_ADC_ConfigChannel+0x130>)
 80021d6:	429c      	cmp	r4, r3
 80021d8:	d039      	beq.n	800224e <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 80021da:	2300      	movs	r3, #0
 80021dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80021e0:	4618      	mov	r0, r3
}
 80021e2:	b003      	add	sp, #12
 80021e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021e6:	68e7      	ldr	r7, [r4, #12]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	433b      	orrs	r3, r7
 80021ee:	e7de      	b.n	80021ae <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021f0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80021f4:	f04f 0e07 	mov.w	lr, #7
 80021f8:	6927      	ldr	r7, [r4, #16]
 80021fa:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002202:	ea27 070e 	bic.w	r7, r7, lr
 8002206:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002208:	6927      	ldr	r7, [r4, #16]
 800220a:	433b      	orrs	r3, r7
 800220c:	6123      	str	r3, [r4, #16]
 800220e:	e7cf      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8002210:	2a0c      	cmp	r2, #12
 8002212:	d80e      	bhi.n	8002232 <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002214:	4413      	add	r3, r2
 8002216:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002218:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800221c:	231f      	movs	r3, #31
 800221e:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002220:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002224:	ea21 0303 	bic.w	r3, r1, r3
 8002228:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800222a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800222c:	431a      	orrs	r2, r3
 800222e:	6322      	str	r2, [r4, #48]	; 0x30
 8002230:	e7d0      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002232:	4413      	add	r3, r2
 8002234:	221f      	movs	r2, #31
 8002236:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002238:	3b41      	subs	r3, #65	; 0x41
 800223a:	409a      	lsls	r2, r3
 800223c:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002240:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002244:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002246:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002248:	4311      	orrs	r1, r2
 800224a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800224c:	e7c2      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800224e:	2d12      	cmp	r5, #18
 8002250:	d107      	bne.n	8002262 <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <HAL_ADC_ConfigChannel+0x134>)
 8002254:	6853      	ldr	r3, [r2, #4]
 8002256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225a:	6053      	str	r3, [r2, #4]
 800225c:	e7bd      	b.n	80021da <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 800225e:	2002      	movs	r0, #2
 8002260:	e7bf      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_ADC_ConfigChannel+0x12c>)
 8002264:	429d      	cmp	r5, r3
 8002266:	d001      	beq.n	800226c <HAL_ADC_ConfigChannel+0x100>
 8002268:	2d11      	cmp	r5, #17
 800226a:	d1b6      	bne.n	80021da <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800226e:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002270:	684a      	ldr	r2, [r1, #4]
 8002272:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002276:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002278:	d1af      	bne.n	80021da <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_ADC_ConfigChannel+0x138>)
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_ADC_ConfigChannel+0x13c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fbb3 f2f2 	udiv	r2, r3, r2
 8002284:	230a      	movs	r3, #10
 8002286:	4353      	muls	r3, r2
        counter--;
 8002288:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800228a:	9b01      	ldr	r3, [sp, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0a4      	beq.n	80021da <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8002290:	9b01      	ldr	r3, [sp, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	e7f8      	b.n	8002288 <HAL_ADC_ConfigChannel+0x11c>
 8002296:	bf00      	nop
 8002298:	10000012 	.word	0x10000012
 800229c:	40012000 	.word	0x40012000
 80022a0:	40012300 	.word	0x40012300
 80022a4:	20000000 	.word	0x20000000
 80022a8:	000f4240 	.word	0x000f4240

080022ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ae:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80022c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80022c8:	60d3      	str	r3, [r2, #12]
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b530      	push	{r4, r5, lr}
 80022d4:	68dc      	ldr	r4, [r3, #12]
 80022d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	bf28      	it	cs
 80022e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ec:	bf8c      	ite	hi
 80022ee:	3c03      	subhi	r4, #3
 80022f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80022f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80022fc:	ea01 0103 	and.w	r1, r1, r3
 8002300:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	fa05 f404 	lsl.w	r4, r5, r4
 8002308:	f104 34ff 	add.w	r4, r4, #4294967295
 800230c:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	ea42 0201 	orr.w	r2, r2, r1
 8002314:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8002318:	db07      	blt.n	800232a <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002324:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8002328:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	f000 000f 	and.w	r0, r0, #15
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <HAL_NVIC_SetPriority+0x6c>)
 8002332:	541a      	strb	r2, [r3, r0]
 8002334:	bd30      	pop	{r4, r5, pc}
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	e000ed14 	.word	0xe000ed14

08002340 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002340:	2800      	cmp	r0, #0
 8002342:	db08      	blt.n	8002356 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002344:	0942      	lsrs	r2, r0, #5
 8002346:	2301      	movs	r3, #1
 8002348:	f000 001f 	and.w	r0, r0, #31
 800234c:	fa03 f000 	lsl.w	r0, r3, r0
 8002350:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_NVIC_EnableIRQ+0x18>)
 8002352:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100

0800235c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800235c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800235e:	4604      	mov	r4, r0
 8002360:	b908      	cbnz	r0, 8002366 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8002362:	2001      	movs	r0, #1
 8002364:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002366:	7f43      	ldrb	r3, [r0, #29]
 8002368:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800236c:	b913      	cbnz	r3, 8002374 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800236e:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002370:	f7fe f966 	bl	8000640 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002374:	2302      	movs	r3, #2
 8002376:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002378:	7923      	ldrb	r3, [r4, #4]
 800237a:	b9e3      	cbnz	r3, 80023b6 <HAL_CRC_Init+0x5a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	4a13      	ldr	r2, [pc, #76]	; (80023cc <HAL_CRC_Init+0x70>)
 8002380:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	f022 0218 	bic.w	r2, r2, #24
 8002388:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800238a:	7962      	ldrb	r2, [r4, #5]
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	b9d2      	cbnz	r2, 80023c6 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002394:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
 8002396:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	6961      	ldr	r1, [r4, #20]
 800239c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023a0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023a2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023a4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80023b0:	2301      	movs	r3, #1
 80023b2:	7763      	strb	r3, [r4, #29]
}
 80023b4:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80023b6:	68e2      	ldr	r2, [r4, #12]
 80023b8:	4620      	mov	r0, r4
 80023ba:	68a1      	ldr	r1, [r4, #8]
 80023bc:	f000 f808 	bl	80023d0 <HAL_CRCEx_Polynomial_Set>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d0e2      	beq.n	800238a <HAL_CRC_Init+0x2e>
 80023c4:	e7cd      	b.n	8002362 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023c6:	6922      	ldr	r2, [r4, #16]
 80023c8:	e7e4      	b.n	8002394 <HAL_CRC_Init+0x38>
 80023ca:	bf00      	nop
 80023cc:	04c11db7 	.word	0x04c11db7

080023d0 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80023d0:	231f      	movs	r3, #31
{
 80023d2:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80023d4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80023d8:	d306      	bcc.n	80023e8 <HAL_CRCEx_Polynomial_Set+0x18>
 80023da:	fa21 f403 	lsr.w	r4, r1, r3
 80023de:	07e4      	lsls	r4, r4, #31
 80023e0:	d5f8      	bpl.n	80023d4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80023e2:	2a08      	cmp	r2, #8
 80023e4:	d014      	beq.n	8002410 <HAL_CRCEx_Polynomial_Set+0x40>
 80023e6:	d809      	bhi.n	80023fc <HAL_CRCEx_Polynomial_Set+0x2c>
 80023e8:	b972      	cbnz	r2, 8002408 <HAL_CRCEx_Polynomial_Set+0x38>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80023ea:	6800      	ldr	r0, [r0, #0]
 80023ec:	6141      	str	r1, [r0, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80023ee:	6883      	ldr	r3, [r0, #8]
 80023f0:	f023 0318 	bic.w	r3, r3, #24
 80023f4:	431a      	orrs	r2, r3
 80023f6:	6082      	str	r2, [r0, #8]
 80023f8:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
 80023fa:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 80023fc:	2a10      	cmp	r2, #16
 80023fe:	d005      	beq.n	800240c <HAL_CRCEx_Polynomial_Set+0x3c>
 8002400:	2a18      	cmp	r2, #24
 8002402:	d101      	bne.n	8002408 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_7B)
 8002404:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8002406:	d9f0      	bls.n	80023ea <HAL_CRCEx_Polynomial_Set+0x1a>
  switch (PolyLength)
 8002408:	2001      	movs	r0, #1
 800240a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800240c:	2b07      	cmp	r3, #7
 800240e:	e7fa      	b.n	8002406 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002410:	2b0f      	cmp	r3, #15
 8002412:	e7f8      	b.n	8002406 <HAL_CRCEx_Polynomial_Set+0x36>

08002414 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8002414:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002416:	4604      	mov	r4, r0
 8002418:	2800      	cmp	r0, #0
 800241a:	d03d      	beq.n	8002498 <HAL_DCMI_Init+0x84>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800241c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002420:	b90b      	cbnz	r3, 8002426 <HAL_DCMI_Init+0x12>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002422:	f7fe f93f 	bl	80006a4 <HAL_DCMI_MspInit>
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002426:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8002428:	2302      	movs	r3, #2
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800242a:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800242c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HAL_DCMI_Init+0x88>)
 8002432:	6811      	ldr	r1, [r2, #0]
 8002434:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002436:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002438:	6013      	str	r3, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800243a:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800243c:	6963      	ldr	r3, [r4, #20]
 800243e:	6810      	ldr	r0, [r2, #0]
 8002440:	ea43 0301 	orr.w	r3, r3, r1
 8002444:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002448:	6925      	ldr	r5, [r4, #16]
 800244a:	ea43 0305 	orr.w	r3, r3, r5
 800244e:	68a5      	ldr	r5, [r4, #8]
 8002450:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002454:	69a5      	ldr	r5, [r4, #24]
 8002456:	ea43 0305 	orr.w	r3, r3, r5
 800245a:	6a25      	ldr	r5, [r4, #32]
 800245c:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8002460:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002462:	ea43 0305 	orr.w	r3, r3, r5
 8002466:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002468:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800246c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800246e:	ea43 0305 	orr.w	r3, r3, r5
 8002472:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002474:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002478:	ea43 0300 	orr.w	r3, r3, r0
 800247c:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800247e:	d101      	bne.n	8002484 <HAL_DCMI_Init+0x70>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8002480:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8002482:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002484:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002486:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002488:	f043 031e 	orr.w	r3, r3, #30
 800248c:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800248e:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002490:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002492:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8002496:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8002498:	2001      	movs	r0, #1
}
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	ffe0f007 	.word	0xffe0f007

080024a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80024a6:	2c01      	cmp	r4, #1
 80024a8:	d035      	beq.n	8002516 <HAL_DMA_Start_IT+0x76>
 80024aa:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ac:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80024ae:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 80024b0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80024b8:	2c01      	cmp	r4, #1
 80024ba:	f04f 0402 	mov.w	r4, #2
 80024be:	d128      	bne.n	8002512 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c0:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c8:	6825      	ldr	r5, [r4, #0]
 80024ca:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80024ce:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d2:	6883      	ldr	r3, [r0, #8]
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d119      	bne.n	800250c <HAL_DMA_Start_IT+0x6c>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024d8:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024da:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80024de:	233f      	movs	r3, #63	; 0x3f
 80024e0:	4093      	lsls	r3, r2
 80024e2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	f043 0316 	orr.w	r3, r3, #22
 80024ea:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024ec:	6963      	ldr	r3, [r4, #20]
 80024ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024f6:	b11b      	cbz	r3, 8002500 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002500:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6023      	str	r3, [r4, #0]
 800250a:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800250c:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800250e:	60e2      	str	r2, [r4, #12]
 8002510:	e7e4      	b.n	80024dc <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8002512:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002516:	2002      	movs	r0, #2
}
 8002518:	bd70      	pop	{r4, r5, r6, pc}

0800251a <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800251a:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800251c:	4770      	bx	lr

0800251e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800251e:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002520:	4604      	mov	r4, r0
 8002522:	b330      	cbz	r0, 8002572 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002524:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002528:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800252c:	b91b      	cbnz	r3, 8002536 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800252e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002532:	f7fe f95f 	bl	80007f4 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002536:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002538:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800253a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800253c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800253e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002548:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800254a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800254c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800254e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002550:	f023 0307 	bic.w	r3, r3, #7
 8002554:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002556:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002558:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800255a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800255c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002564:	430b      	orrs	r3, r1
 8002566:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002568:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800256a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800256c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002570:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002572:	2001      	movs	r0, #1
}
 8002574:	bd10      	pop	{r4, pc}

08002576 <HAL_DMA2D_LineEventCallback>:
 8002576:	4770      	bx	lr

08002578 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002578:	4770      	bx	lr

0800257a <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800257a:	6803      	ldr	r3, [r0, #0]
{
 800257c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800257e:	685e      	ldr	r6, [r3, #4]
{
 8002580:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002582:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002584:	07f2      	lsls	r2, r6, #31
 8002586:	d514      	bpl.n	80025b2 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002588:	05e9      	lsls	r1, r5, #23
 800258a:	d512      	bpl.n	80025b2 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002592:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002594:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800259c:	2201      	movs	r2, #1
 800259e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025a0:	2304      	movs	r3, #4
 80025a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80025a6:	2300      	movs	r3, #0
 80025a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80025ac:	6943      	ldr	r3, [r0, #20]
 80025ae:	b103      	cbz	r3, 80025b2 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80025b0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80025b2:	06b2      	lsls	r2, r6, #26
 80025b4:	d516      	bpl.n	80025e4 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80025b6:	04ab      	lsls	r3, r5, #18
 80025b8:	d514      	bpl.n	80025e4 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80025c4:	2220      	movs	r2, #32
 80025c6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80025c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025d0:	2304      	movs	r3, #4
 80025d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80025d6:	2300      	movs	r3, #0
 80025d8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80025dc:	6963      	ldr	r3, [r4, #20]
 80025de:	b10b      	cbz	r3, 80025e4 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80025e0:	4620      	mov	r0, r4
 80025e2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80025e4:	0730      	lsls	r0, r6, #28
 80025e6:	d516      	bpl.n	8002616 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80025e8:	0529      	lsls	r1, r5, #20
 80025ea:	d514      	bpl.n	8002616 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80025f6:	2208      	movs	r2, #8
 80025f8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80025fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002602:	2304      	movs	r3, #4
 8002604:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002608:	2300      	movs	r3, #0
 800260a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800260e:	6963      	ldr	r3, [r4, #20]
 8002610:	b10b      	cbz	r3, 8002616 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8002612:	4620      	mov	r0, r4
 8002614:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002616:	0772      	lsls	r2, r6, #29
 8002618:	d50b      	bpl.n	8002632 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800261a:	056b      	lsls	r3, r5, #21
 800261c:	d509      	bpl.n	8002632 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800261e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002620:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002628:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800262a:	2204      	movs	r2, #4
 800262c:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800262e:	f7ff ffa2 	bl	8002576 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002632:	07b0      	lsls	r0, r6, #30
 8002634:	d514      	bpl.n	8002660 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002636:	05a9      	lsls	r1, r5, #22
 8002638:	d512      	bpl.n	8002660 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002644:	2202      	movs	r2, #2
 8002646:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800264a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800264c:	2301      	movs	r3, #1
 800264e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002652:	2300      	movs	r3, #0
 8002654:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8002658:	6923      	ldr	r3, [r4, #16]
 800265a:	b10b      	cbz	r3, 8002660 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800265c:	4620      	mov	r0, r4
 800265e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002660:	06f2      	lsls	r2, r6, #27
 8002662:	d513      	bpl.n	800268c <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002664:	04eb      	lsls	r3, r5, #19
 8002666:	d511      	bpl.n	800268c <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002668:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800266a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002672:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002674:	2210      	movs	r2, #16
 8002676:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800267a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800267c:	2301      	movs	r3, #1
 800267e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002682:	2300      	movs	r3, #0
 8002684:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002688:	f7ff ff76 	bl	8002578 <HAL_DMA2D_CLUTLoadingCpltCallback>
 800268c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002690 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002690:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002694:	2b01      	cmp	r3, #1
 8002696:	f04f 0302 	mov.w	r3, #2
{
 800269a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800269c:	d037      	beq.n	800270e <HAL_DMA2D_ConfigLayer+0x7e>
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800269e:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 80026a0:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80026a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80026a6:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 80026a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 80026ac:	4f1c      	ldr	r7, [pc, #112]	; (8002720 <HAL_DMA2D_ConfigLayer+0x90>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80026ae:	69dd      	ldr	r5, [r3, #28]
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026b4:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026b8:	3d09      	subs	r5, #9
 80026ba:	6803      	ldr	r3, [r0, #0]
 80026bc:	2d01      	cmp	r5, #1
 80026be:	d80f      	bhi.n	80026e0 <HAL_DMA2D_ConfigLayer+0x50>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80026c0:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 80026c4:	ea4e 0202 	orr.w	r2, lr, r2
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80026c8:	b969      	cbnz	r1, 80026e6 <HAL_DMA2D_ConfigLayer+0x56>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026cc:	4039      	ands	r1, r7
 80026ce:	430a      	orrs	r2, r1
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026d2:	6982      	ldr	r2, [r0, #24]
 80026d4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80026d6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80026d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28
 80026de:	e010      	b.n	8002702 <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80026e0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80026e4:	b1a9      	cbz	r1, 8002712 <HAL_DMA2D_ConfigLayer+0x82>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026e6:	69d9      	ldr	r1, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026e8:	4406      	add	r6, r0

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026ea:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026ec:	ea01 0107 	and.w	r1, r1, r7
 80026f0:	ea42 0201 	orr.w	r2, r2, r1
 80026f4:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026f6:	69b2      	ldr	r2, [r6, #24]
 80026f8:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026fa:	d802      	bhi.n	8002702 <HAL_DMA2D_ConfigLayer+0x72>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80026fc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002700:	621c      	str	r4, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002702:	2301      	movs	r3, #1
 8002704:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002708:	2300      	movs	r3, #0
 800270a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800270e:	4618      	mov	r0, r3
 8002710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002712:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002714:	4039      	ands	r1, r7
 8002716:	430a      	orrs	r2, r1
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800271a:	6982      	ldr	r2, [r0, #24]
 800271c:	619a      	str	r2, [r3, #24]
 800271e:	e7f0      	b.n	8002702 <HAL_DMA2D_ConfigLayer+0x72>
 8002720:	00fcfff0 	.word	0x00fcfff0

08002724 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002728:	b129      	cbz	r1, 8002736 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800272a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800272e:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002734:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002736:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002738:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800273a:	2b00      	cmp	r3, #0
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800273c:	68e0      	ldr	r0, [r4, #12]
 800273e:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8002740:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002742:	bf08      	it	eq
 8002744:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8002748:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800274c:	482e      	ldr	r0, [pc, #184]	; (8002808 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800274e:	bf18      	it	ne
 8002750:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002752:	4028      	ands	r0, r5
 8002754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002758:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800275a:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800275c:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800275e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8002760:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002762:	f7ff fc4b 	bl	8001ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002766:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002768:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800276a:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800276c:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800276e:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8002770:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002772:	f7ff fc43 	bl	8001ffc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002776:	6823      	ldr	r3, [r4, #0]
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002778:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800277a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800277c:	2500      	movs	r5, #0
 800277e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002780:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8002782:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002784:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8002788:	0412      	lsls	r2, r2, #16
 800278a:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800278c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002790:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8002792:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002794:	f7ff fc32 	bl	8001ffc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002798:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800279a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800279c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800279e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80027a0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a2:	f7ff fc2b 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80027a6:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a8:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80027ac:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80027ae:	f241 0518 	movw	r5, #4120	; 0x1018
 80027b2:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80027b4:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027b6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80027ba:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80027be:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80027c0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c2:	f7ff fc1b 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80027c6:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c8:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 80027cc:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d2:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80027d4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d6:	f7ff fc11 	bl	8001ffc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80027da:	6822      	ldr	r2, [r4, #0]
 80027dc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80027e0:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80027e2:	69a3      	ldr	r3, [r4, #24]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80027e8:	f241 011c 	movw	r1, #4124	; 0x101c
 80027ec:	5853      	ldr	r3, [r2, r1]
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f6:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027f8:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80027fa:	4a06      	ldr	r2, [pc, #24]	; (8002814 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80027fc:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80027fe:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002800:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <ETH_MACDMAConfig+0xf4>)
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	ff20810f 	.word	0xff20810f
 800280c:	f8de3f23 	.word	0xf8de3f23
 8002810:	02c12080 	.word	0x02c12080
 8002814:	40028040 	.word	0x40028040
 8002818:	40028044 	.word	0x40028044

0800281c <HAL_ETH_ReadPHYRegister>:
{
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800281e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002822:	4605      	mov	r5, r0
 8002824:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002826:	2b82      	cmp	r3, #130	; 0x82
 8002828:	d030      	beq.n	800288c <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 800282a:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800282c:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800282e:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002830:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8002834:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002836:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800283a:	f003 011c 	and.w	r1, r3, #28
 800283e:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002840:	8a04      	ldrh	r4, [r0, #16]
 8002842:	02e4      	lsls	r4, r4, #11
 8002844:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002846:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002848:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 800284c:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800284e:	f7ff fbcf 	bl	8001ff0 <HAL_GetTick>
 8002852:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002854:	f014 0001 	ands.w	r0, r4, #1
 8002858:	d107      	bne.n	800286a <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800285a:	682b      	ldr	r3, [r5, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	b29b      	uxth	r3, r3
 8002860:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002862:	2301      	movs	r3, #1
 8002864:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8002868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800286a:	f7ff fbc1 	bl	8001ff0 <HAL_GetTick>
 800286e:	1bc0      	subs	r0, r0, r7
 8002870:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002874:	d307      	bcc.n	8002886 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8002876:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8002878:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800287a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800287e:	2300      	movs	r3, #0
 8002880:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8002884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	691c      	ldr	r4, [r3, #16]
 800288a:	e7e3      	b.n	8002854 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 800288c:	2002      	movs	r0, #2
}
 800288e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002890 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002890:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002894:	2b42      	cmp	r3, #66	; 0x42
{
 8002896:	b570      	push	{r4, r5, r6, lr}
 8002898:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800289a:	d02e      	beq.n	80028fa <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800289c:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800289e:	018c      	lsls	r4, r1, #6
 80028a0:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80028a2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80028a6:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80028aa:	6803      	ldr	r3, [r0, #0]
 80028ac:	f044 0403 	orr.w	r4, r4, #3
 80028b0:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80028b2:	f000 001c 	and.w	r0, r0, #28
 80028b6:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80028b8:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80028ba:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80028bc:	02e4      	lsls	r4, r4, #11
 80028be:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80028c0:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 80028c2:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80028c4:	f7ff fb94 	bl	8001ff0 <HAL_GetTick>
 80028c8:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028ca:	f014 0001 	ands.w	r0, r4, #1
 80028ce:	d103      	bne.n	80028d8 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80028d8:	f7ff fb8a 	bl	8001ff0 <HAL_GetTick>
 80028dc:	1b80      	subs	r0, r0, r6
 80028de:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80028e2:	d307      	bcc.n	80028f4 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 80028e4:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80028e6:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80028e8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80028ec:	2300      	movs	r3, #0
 80028ee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	691c      	ldr	r4, [r3, #16]
 80028f8:	e7e7      	b.n	80028ca <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80028fa:	2002      	movs	r0, #2
}
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002900 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8002900:	2300      	movs	r3, #0
{
 8002902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8002904:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8002906:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8002908:	2800      	cmp	r0, #0
 800290a:	f000 80dd 	beq.w	8002ac8 <HAL_ETH_Init+0x1c8>
  if(heth->State == HAL_ETH_STATE_RESET)
 800290e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002912:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002916:	b91b      	cbnz	r3, 8002920 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8002918:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800291c:	f7fd ffb2 	bl	8000884 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_ETH_Init+0x1cc>)
 8002922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002934:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_ETH_Init+0x1d0>)
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800293c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	6a21      	ldr	r1, [r4, #32]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002954:	f7ff fb4c 	bl	8001ff0 <HAL_GetTick>
 8002958:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	07d0      	lsls	r0, r2, #31
 8002964:	d41d      	bmi.n	80029a2 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8002966:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8002968:	f001 fb36 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_ETH_Init+0x1d4>)
 800296e:	4a5a      	ldr	r2, [pc, #360]	; (8002ad8 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002970:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002974:	4403      	add	r3, r0
 8002976:	4293      	cmp	r3, r2
 8002978:	d822      	bhi.n	80029c0 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800297a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800297e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002980:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002984:	2100      	movs	r1, #0
 8002986:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002988:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800298a:	f7ff ff81 	bl	8002890 <HAL_ETH_WritePHYRegister>
 800298e:	4605      	mov	r5, r0
 8002990:	b368      	cbz	r0, 80029ee <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8002992:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8002994:	2101      	movs	r1, #1
 8002996:	4620      	mov	r0, r4
 8002998:	f7ff fec4 	bl	8002724 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800299c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80029a0:	e00b      	b.n	80029ba <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80029a2:	f7ff fb25 	bl	8001ff0 <HAL_GetTick>
 80029a6:	1b40      	subs	r0, r0, r5
 80029a8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80029ac:	d9d5      	bls.n	800295a <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80029ae:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80029b0:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80029b2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80029b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80029ba:	4628      	mov	r0, r5
 80029bc:	b003      	add	sp, #12
 80029be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_ETH_Init+0x1dc>)
 80029c2:	4a47      	ldr	r2, [pc, #284]	; (8002ae0 <HAL_ETH_Init+0x1e0>)
 80029c4:	4403      	add	r3, r0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d802      	bhi.n	80029d0 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80029ca:	f045 050c 	orr.w	r5, r5, #12
 80029ce:	e7d6      	b.n	800297e <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80029d0:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <HAL_ETH_Init+0x1e4>)
 80029d2:	4a45      	ldr	r2, [pc, #276]	; (8002ae8 <HAL_ETH_Init+0x1e8>)
 80029d4:	4403      	add	r3, r0
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d9d1      	bls.n	800297e <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80029da:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_ETH_Init+0x1ec>)
 80029dc:	4a44      	ldr	r2, [pc, #272]	; (8002af0 <HAL_ETH_Init+0x1f0>)
 80029de:	4403      	add	r3, r0
 80029e0:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80029e2:	bf94      	ite	ls
 80029e4:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80029e8:	f045 0510 	orrhi.w	r5, r5, #16
 80029ec:	e7c7      	b.n	800297e <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 80029ee:	f640 70ff 	movw	r0, #4095	; 0xfff
 80029f2:	f7ff fb03 	bl	8001ffc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80029f6:	6863      	ldr	r3, [r4, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d053      	beq.n	8002aa4 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 80029fc:	f7ff faf8 	bl	8001ff0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002a00:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a04:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002a06:	466a      	mov	r2, sp
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7ff ff06 	bl	800281c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002a10:	f7ff faee 	bl	8001ff0 <HAL_GetTick>
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	42b8      	cmp	r0, r7
 8002a18:	d90b      	bls.n	8002a32 <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7ff fe81 	bl	8002724 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8002a22:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8002a24:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8002a26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8002a30:	e7c3      	b.n	80029ba <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002a32:	9b00      	ldr	r3, [sp, #0]
 8002a34:	0759      	lsls	r1, r3, #29
 8002a36:	d5e6      	bpl.n	8002a06 <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002a38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff ff26 	bl	8002890 <HAL_ETH_WritePHYRegister>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d1a4      	bne.n	8002992 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8002a48:	f7ff fad2 	bl	8001ff0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002a4c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a50:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002a52:	466a      	mov	r2, sp
 8002a54:	2101      	movs	r1, #1
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff fee0 	bl	800281c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002a5c:	f7ff fac8 	bl	8001ff0 <HAL_GetTick>
 8002a60:	1b80      	subs	r0, r0, r6
 8002a62:	42b8      	cmp	r0, r7
 8002a64:	d8d9      	bhi.n	8002a1a <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002a66:	9b00      	ldr	r3, [sp, #0]
 8002a68:	069a      	lsls	r2, r3, #26
 8002a6a:	d5f2      	bpl.n	8002a52 <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002a6c:	466a      	mov	r2, sp
 8002a6e:	211f      	movs	r1, #31
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff fed3 	bl	800281c <HAL_ETH_ReadPHYRegister>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d18b      	bne.n	8002992 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002a7a:	9b00      	ldr	r3, [sp, #0]
 8002a7c:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002a80:	bf18      	it	ne
 8002a82:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002a86:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002a88:	bf4c      	ite	mi
 8002a8a:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8002a8c:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002a90:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8002a92:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8002a94:	2100      	movs	r1, #0
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff fe44 	bl	8002724 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002aa2:	e78a      	b.n	80029ba <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002aa4:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	68e2      	ldr	r2, [r4, #12]
 8002aaa:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002aac:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002aae:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	f7ff feec 	bl	8002890 <HAL_ETH_WritePHYRegister>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	f47f af6a 	bne.w	8002992 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002abe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002ac2:	f7ff fa9b 	bl	8001ffc <HAL_Delay>
 8002ac6:	e7e5      	b.n	8002a94 <HAL_ETH_Init+0x194>
    return HAL_ERROR;
 8002ac8:	2501      	movs	r5, #1
 8002aca:	e776      	b.n	80029ba <HAL_ETH_Init+0xba>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	feced300 	.word	0xfeced300
 8002ad8:	00e4e1bf 	.word	0x00e4e1bf
 8002adc:	fde9f140 	.word	0xfde9f140
 8002ae0:	017d783f 	.word	0x017d783f
 8002ae4:	fc6c7900 	.word	0xfc6c7900
 8002ae8:	026259ff 	.word	0x026259ff
 8002aec:	fa0a1f00 	.word	0xfa0a1f00
 8002af0:	02faf07f 	.word	0x02faf07f

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af8:	680b      	ldr	r3, [r1, #0]
{
 8002afa:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002cc0 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b00:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b02:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b04:	4a6c      	ldr	r2, [pc, #432]	; (8002cb8 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b06:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002cc4 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8002b0a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8002b10:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b14:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8002b18:	45b6      	cmp	lr, r6
 8002b1a:	f040 80b3 	bne.w	8002c84 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1e:	684c      	ldr	r4, [r1, #4]
 8002b20:	f024 0710 	bic.w	r7, r4, #16
 8002b24:	2f02      	cmp	r7, #2
 8002b26:	d116      	bne.n	8002b56 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8002b28:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b2c:	f003 0b07 	and.w	fp, r3, #7
 8002b30:	f04f 0c0f 	mov.w	ip, #15
 8002b34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002b38:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002b3c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b40:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002b44:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b48:	690d      	ldr	r5, [r1, #16]
 8002b4a:	fa05 f50b 	lsl.w	r5, r5, fp
 8002b4e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8002b52:	f8ca 5020 	str.w	r5, [sl, #32]
 8002b56:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b5a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002b5c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b60:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b64:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b68:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b6a:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b6e:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b70:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b72:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b76:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8002b7a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b7e:	d811      	bhi.n	8002ba4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8002b80:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b82:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b86:	68cf      	ldr	r7, [r1, #12]
 8002b88:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002b8c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002b90:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b92:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b98:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002b9c:	409f      	lsls	r7, r3
 8002b9e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002ba2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002ba4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ba6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ba8:	688f      	ldr	r7, [r1, #8]
 8002baa:	fa07 f70a 	lsl.w	r7, r7, sl
 8002bae:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002bb0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb2:	00e5      	lsls	r5, r4, #3
 8002bb4:	d566      	bpl.n	8002c84 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002bba:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bbe:	f003 0e03 	and.w	lr, r3, #3
 8002bc2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002bca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8002bd6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002bda:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002bde:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8002be2:	9503      	str	r5, [sp, #12]
 8002be4:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002be6:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8002bea:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bee:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bf2:	4d32      	ldr	r5, [pc, #200]	; (8002cbc <HAL_GPIO_Init+0x1c8>)
 8002bf4:	42a8      	cmp	r0, r5
 8002bf6:	d04c      	beq.n	8002c92 <HAL_GPIO_Init+0x19e>
 8002bf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bfc:	42a8      	cmp	r0, r5
 8002bfe:	d04a      	beq.n	8002c96 <HAL_GPIO_Init+0x1a2>
 8002c00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c04:	42a8      	cmp	r0, r5
 8002c06:	d048      	beq.n	8002c9a <HAL_GPIO_Init+0x1a6>
 8002c08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c0c:	42a8      	cmp	r0, r5
 8002c0e:	d046      	beq.n	8002c9e <HAL_GPIO_Init+0x1aa>
 8002c10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c14:	42a8      	cmp	r0, r5
 8002c16:	d044      	beq.n	8002ca2 <HAL_GPIO_Init+0x1ae>
 8002c18:	4548      	cmp	r0, r9
 8002c1a:	d044      	beq.n	8002ca6 <HAL_GPIO_Init+0x1b2>
 8002c1c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c20:	42a8      	cmp	r0, r5
 8002c22:	d042      	beq.n	8002caa <HAL_GPIO_Init+0x1b6>
 8002c24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c28:	42a8      	cmp	r0, r5
 8002c2a:	d040      	beq.n	8002cae <HAL_GPIO_Init+0x1ba>
 8002c2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c30:	42a8      	cmp	r0, r5
 8002c32:	d03e      	beq.n	8002cb2 <HAL_GPIO_Init+0x1be>
 8002c34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c38:	42a8      	cmp	r0, r5
 8002c3a:	bf14      	ite	ne
 8002c3c:	250a      	movne	r5, #10
 8002c3e:	2509      	moveq	r5, #9
 8002c40:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c44:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c48:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c4c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8002c52:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002c54:	bf0c      	ite	eq
 8002c56:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002c58:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c5a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8002c5e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002c60:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	bf0c      	ite	eq
 8002c64:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002c66:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c68:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002c6c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002c6e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	bf0c      	ite	eq
 8002c72:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002c74:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c76:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002c78:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002c7a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	bf54      	ite	pl
 8002c7e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8002c80:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002c82:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c84:	3301      	adds	r3, #1
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	f47f af3f 	bne.w	8002b0a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002c8c:	b005      	add	sp, #20
 8002c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c92:	2500      	movs	r5, #0
 8002c94:	e7d4      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002c96:	2501      	movs	r5, #1
 8002c98:	e7d2      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002c9a:	2502      	movs	r5, #2
 8002c9c:	e7d0      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002c9e:	2503      	movs	r5, #3
 8002ca0:	e7ce      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002ca2:	2504      	movs	r5, #4
 8002ca4:	e7cc      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002ca6:	2505      	movs	r5, #5
 8002ca8:	e7ca      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002caa:	2506      	movs	r5, #6
 8002cac:	e7c8      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002cae:	2507      	movs	r5, #7
 8002cb0:	e7c6      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002cb2:	2508      	movs	r5, #8
 8002cb4:	e7c4      	b.n	8002c40 <HAL_GPIO_Init+0x14c>
 8002cb6:	bf00      	nop
 8002cb8:	40013c00 	.word	0x40013c00
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40021400 	.word	0x40021400

08002cc8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc8:	6903      	ldr	r3, [r0, #16]
 8002cca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ccc:	bf14      	ite	ne
 8002cce:	2001      	movne	r0, #1
 8002cd0:	2000      	moveq	r0, #0
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd4:	b10a      	cbz	r2, 8002cda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cd6:	6181      	str	r1, [r0, #24]
 8002cd8:	4770      	bx	lr
 8002cda:	0409      	lsls	r1, r1, #16
 8002cdc:	e7fb      	b.n	8002cd6 <HAL_GPIO_WritePin+0x2>

08002cde <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002cde:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce2:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ce4:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8002ce8:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8002cec:	2801      	cmp	r0, #1
{
 8002cee:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8002cf2:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8002cf6:	d029      	beq.n	8002d4c <HAL_HCD_HC_Init+0x6e>
 8002cf8:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8002cfa:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002cfc:	f012 0f80 	tst.w	r2, #128	; 0x80
  hhcd->hc[ch_num].do_ping = 0U;
 8002d00:	f04f 0028 	mov.w	r0, #40	; 0x28
  __HAL_LOCK(hhcd);
 8002d04:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d08:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8002d0c:	fb00 4001 	mla	r0, r0, r1, r4
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d10:	bf08      	it	eq
 8002d12:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8002d14:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8002d1c:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d20:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d24:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d28:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d2c:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002d30:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 8002d34:	f8cd c008 	str.w	ip, [sp, #8]
 8002d38:	6820      	ldr	r0, [r4, #0]
 8002d3a:	e88d 4080 	stmia.w	sp, {r7, lr}
 8002d3e:	f003 fffd 	bl	8006d3c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002d42:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8002d46:	b004      	add	sp, #16
 8002d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	e7fa      	b.n	8002d46 <HAL_HCD_HC_Init+0x68>

08002d50 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8002d50:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002d54:	2b01      	cmp	r3, #1
{
 8002d56:	b510      	push	{r4, lr}
 8002d58:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002d5a:	d009      	beq.n	8002d70 <HAL_HCD_HC_Halt+0x20>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d62:	6800      	ldr	r0, [r0, #0]
 8002d64:	f004 f878 	bl	8006e58 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8002d6e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002d70:	2002      	movs	r0, #2
}
 8002d72:	bd10      	pop	{r4, pc}

08002d74 <HAL_HCD_Init>:
{
 8002d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8002d78:	4607      	mov	r7, r0
{
 8002d7a:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d03b      	beq.n	8002df8 <HAL_HCD_Init+0x84>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d80:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
 8002d84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d88:	b91b      	cbnz	r3, 8002d92 <HAL_HCD_Init+0x1e>
    hhcd->Lock = HAL_UNLOCKED;
 8002d8a:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8002d8e:	f006 fd97 	bl	80098c0 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 8002d92:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d94:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d96:	466d      	mov	r5, sp
 8002d98:	f107 0804 	add.w	r8, r7, #4
  __HAL_HCD_DISABLE(hhcd);
 8002d9c:	f854 0b10 	ldr.w	r0, [r4], #16
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002da0:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002da2:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 8002da6:	f003 fe8c 	bl	8006ac2 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dba:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002dbe:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002dc0:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002dc2:	f003 fe3d 	bl	8006a40 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002dc6:	f856 0b10 	ldr.w	r0, [r6], #16
 8002dca:	2101      	movs	r1, #1
 8002dcc:	f003 fe7f 	bl	8006ace <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002dd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ddc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002de0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002de4:	6838      	ldr	r0, [r7, #0]
 8002de6:	f003 ff31 	bl	8006c4c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002dea:	2301      	movs	r3, #1
  return HAL_OK;
 8002dec:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8002dee:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8002df2:	b00a      	add	sp, #40	; 0x28
 8002df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e7fa      	b.n	8002df2 <HAL_HCD_Init+0x7e>

08002dfc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002dfe:	2428      	movs	r4, #40	; 0x28
{
 8002e00:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8002e04:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e06:	fb04 0401 	mla	r4, r4, r1, r0
{
 8002e0a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e0e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8002e16:	b96f      	cbnz	r7, 8002e34 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e18:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e1a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8002e20:	d02b      	beq.n	8002e7a <HAL_HCD_HC_SubmitRequest+0x7e>
 8002e22:	42bb      	cmp	r3, r7
 8002e24:	d029      	beq.n	8002e7a <HAL_HCD_HC_SubmitRequest+0x7e>
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d131      	bne.n	8002e8e <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e2a:	2328      	movs	r3, #40	; 0x28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	fb03 0301 	mla	r3, r3, r1, r0
 8002e32:	e02a      	b.n	8002e8a <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e34:	f04f 0e02 	mov.w	lr, #2
 8002e38:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d826      	bhi.n	8002e8e <HAL_HCD_HC_SubmitRequest+0x92>
 8002e40:	a401      	add	r4, pc, #4	; (adr r4, 8002e48 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8002e42:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e2b 	.word	0x08002e2b
 8002e50:	08002e7b 	.word	0x08002e7b
 8002e54:	08002e7b 	.word	0x08002e7b
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002e58:	2f01      	cmp	r7, #1
 8002e5a:	d118      	bne.n	8002e8e <HAL_HCD_HC_SubmitRequest+0x92>
 8002e5c:	b9ba      	cbnz	r2, 8002e8e <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8002e5e:	b925      	cbnz	r5, 8002e6a <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002e60:	2328      	movs	r3, #40	; 0x28
 8002e62:	fb03 0301 	mla	r3, r3, r1, r0
 8002e66:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e6a:	2328      	movs	r3, #40	; 0x28
 8002e6c:	fb03 0301 	mla	r3, r3, r1, r0
 8002e70:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e74:	b14a      	cbz	r2, 8002e8a <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e76:	2202      	movs	r2, #2
 8002e78:	e007      	b.n	8002e8a <HAL_HCD_HC_SubmitRequest+0x8e>
 8002e7a:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e7c:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8002e80:	b9d2      	cbnz	r2, 8002eb8 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e82:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8002e86:	2c00      	cmp	r4, #0
 8002e88:	d1f5      	bne.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e8e:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e90:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e92:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e96:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e9a:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e9c:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8002e9e:	649d      	str	r5, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ea0:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ea2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002eac:	7c02      	ldrb	r2, [r0, #16]
 8002eae:	6800      	ldr	r0, [r0, #0]
}
 8002eb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002eb4:	f004 b834 	b.w	8006f20 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002eb8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002ebc:	e7da      	b.n	8002e74 <HAL_HCD_HC_SubmitRequest+0x78>
 8002ebe:	bf00      	nop

08002ec0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec4:	6806      	ldr	r6, [r0, #0]
{
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002eca:	4630      	mov	r0, r6
 8002ecc:	f003 fe5e 	bl	8006b8c <USB_GetMode>
 8002ed0:	2801      	cmp	r0, #1
 8002ed2:	f040 80b0 	bne.w	8003036 <HAL_HCD_IRQHandler+0x176>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	f003 fe54 	bl	8006b84 <USB_ReadInterrupts>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	f000 80aa 	beq.w	8003036 <HAL_HCD_IRQHandler+0x176>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	f003 fe4e 	bl	8006b84 <USB_ReadInterrupts>
 8002ee8:	0287      	lsls	r7, r0, #10
 8002eea:	d503      	bpl.n	8002ef4 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ef2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ef4:	6820      	ldr	r0, [r4, #0]
 8002ef6:	f003 fe45 	bl	8006b84 <USB_ReadInterrupts>
 8002efa:	02c5      	lsls	r5, r0, #11
 8002efc:	d503      	bpl.n	8002f06 <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f06:	6820      	ldr	r0, [r4, #0]
 8002f08:	f003 fe3c 	bl	8006b84 <USB_ReadInterrupts>
 8002f0c:	0140      	lsls	r0, r0, #5
 8002f0e:	d503      	bpl.n	8002f18 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f16:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	f003 fe33 	bl	8006b84 <USB_ReadInterrupts>
 8002f1e:	0781      	lsls	r1, r0, #30
 8002f20:	d502      	bpl.n	8002f28 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	2202      	movs	r2, #2
 8002f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f28:	6820      	ldr	r0, [r4, #0]
 8002f2a:	f003 fe2b 	bl	8006b84 <USB_ReadInterrupts>
 8002f2e:	0082      	lsls	r2, r0, #2
 8002f30:	d510      	bpl.n	8002f54 <HAL_HCD_IRQHandler+0x94>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f32:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002f36:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f3c:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8002f40:	f006 fd0a 	bl	8009958 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f44:	2101      	movs	r1, #1
 8002f46:	6820      	ldr	r0, [r4, #0]
 8002f48:	f003 fe24 	bl	8006b94 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	f003 fe15 	bl	8006b84 <USB_ReadInterrupts>
 8002f5a:	01c3      	lsls	r3, r0, #7
 8002f5c:	d542      	bpl.n	8002fe4 <HAL_HCD_IRQHandler+0x124>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f5e:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f60:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002f64:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8002f66:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002f6a:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f6c:	9b05      	ldr	r3, [sp, #20]
 8002f6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f72:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f74:	9b04      	ldr	r3, [sp, #16]
 8002f76:	079f      	lsls	r7, r3, #30
 8002f78:	d50d      	bpl.n	8002f96 <HAL_HCD_IRQHandler+0xd6>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f7a:	9b04      	ldr	r3, [sp, #16]
 8002f7c:	07d8      	lsls	r0, r3, #31
 8002f7e:	d506      	bpl.n	8002f8e <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002f80:	69ab      	ldr	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f82:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002f84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002f88:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8002f8a:	f006 fce1 	bl	8009950 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f8e:	9b05      	ldr	r3, [sp, #20]
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f96:	9b04      	ldr	r3, [sp, #16]
 8002f98:	0719      	lsls	r1, r3, #28
 8002f9a:	d519      	bpl.n	8002fd0 <HAL_HCD_IRQHandler+0x110>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f9c:	9b05      	ldr	r3, [sp, #20]
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fa4:	9b04      	ldr	r3, [sp, #16]
 8002fa6:	075a      	lsls	r2, r3, #29
 8002fa8:	d550      	bpl.n	800304c <HAL_HCD_IRQHandler+0x18c>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002faa:	69a1      	ldr	r1, [r4, #24]
 8002fac:	2902      	cmp	r1, #2
 8002fae:	d145      	bne.n	800303c <HAL_HCD_IRQHandler+0x17c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fb0:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fb2:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fb4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fbc:	bf18      	it	ne
 8002fbe:	2101      	movne	r1, #1
 8002fc0:	f003 fde8 	bl	8006b94 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f006 fccf 	bl	8009968 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f006 fcc0 	bl	8009950 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fd0:	9b04      	ldr	r3, [sp, #16]
 8002fd2:	069b      	lsls	r3, r3, #26
 8002fd4:	d503      	bpl.n	8002fde <HAL_HCD_IRQHandler+0x11e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fd6:	9b05      	ldr	r3, [sp, #20]
 8002fd8:	f043 0320 	orr.w	r3, r3, #32
 8002fdc:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fde:	9b05      	ldr	r3, [sp, #20]
 8002fe0:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	f003 fdcd 	bl	8006b84 <USB_ReadInterrupts>
 8002fea:	0707      	lsls	r7, r0, #28
 8002fec:	d505      	bpl.n	8002ffa <HAL_HCD_IRQHandler+0x13a>
      HAL_HCD_SOF_Callback(hhcd);
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f006 fcaa 	bl	8009948 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ffa:	6820      	ldr	r0, [r4, #0]
 8002ffc:	f003 fdc2 	bl	8006b84 <USB_ReadInterrupts>
 8003000:	0185      	lsls	r5, r0, #6
 8003002:	d512      	bpl.n	800302a <HAL_HCD_IRQHandler+0x16a>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003004:	f04f 0a00 	mov.w	sl, #0
 8003008:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800300c:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800300e:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003012:	46d3      	mov	fp, sl
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	f003 ff1a 	bl	8006e4e <USB_HC_ReadInterrupt>
 800301a:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800301c:	68a3      	ldr	r3, [r4, #8]
 800301e:	459a      	cmp	sl, r3
 8003020:	d323      	bcc.n	800306a <HAL_HCD_IRQHandler+0x1aa>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003028:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	f003 fdaa 	bl	8006b84 <USB_ReadInterrupts>
 8003030:	06c3      	lsls	r3, r0, #27
 8003032:	f100 821e 	bmi.w	8003472 <HAL_HCD_IRQHandler+0x5b2>
}
 8003036:	b007      	add	sp, #28
 8003038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800303c:	68e3      	ldr	r3, [r4, #12]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d1c0      	bne.n	8002fc4 <HAL_HCD_IRQHandler+0x104>
          USBx_HOST->HFIR = 60000U;
 8003042:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003046:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800304a:	e7bb      	b.n	8002fc4 <HAL_HCD_IRQHandler+0x104>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800304c:	4620      	mov	r0, r4
 800304e:	f006 fc8f 	bl	8009970 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003052:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003056:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003058:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800305c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003060:	6993      	ldr	r3, [r2, #24]
 8003062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	e7b2      	b.n	8002fd0 <HAL_HCD_IRQHandler+0x110>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800306a:	f00a 030f 	and.w	r3, sl, #15
 800306e:	9a01      	ldr	r2, [sp, #4]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	07d8      	lsls	r0, r3, #31
 8003076:	f140 808a 	bpl.w	800318e <HAL_HCD_IRQHandler+0x2ce>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800307a:	f8d8 3000 	ldr.w	r3, [r8]
 800307e:	fa5f f58a 	uxtb.w	r5, sl
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003088:	f000 8104 	beq.w	8003294 <HAL_HCD_IRQHandler+0x3d4>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800308c:	016a      	lsls	r2, r5, #5
 800308e:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8003092:	18d6      	adds	r6, r2, r3
 8003094:	68b1      	ldr	r1, [r6, #8]
 8003096:	0749      	lsls	r1, r1, #29
 8003098:	d513      	bpl.n	80030c2 <HAL_HCD_IRQHandler+0x202>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800309a:	2104      	movs	r1, #4
 800309c:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800309e:	68f1      	ldr	r1, [r6, #12]
 80030a0:	f041 0102 	orr.w	r1, r1, #2
 80030a4:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030a6:	68b1      	ldr	r1, [r6, #8]
 80030a8:	0589      	lsls	r1, r1, #22
 80030aa:	d542      	bpl.n	8003132 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ac:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ae:	4629      	mov	r1, r5
 80030b0:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b8:	f003 fece 	bl	8006e58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c0:	e0c7      	b.n	8003252 <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030c2:	68b1      	ldr	r1, [r6, #8]
 80030c4:	0689      	lsls	r1, r1, #26
 80030c6:	d502      	bpl.n	80030ce <HAL_HCD_IRQHandler+0x20e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030c8:	2120      	movs	r1, #32
 80030ca:	60b1      	str	r1, [r6, #8]
 80030cc:	e7eb      	b.n	80030a6 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030ce:	68b1      	ldr	r1, [r6, #8]
 80030d0:	0709      	lsls	r1, r1, #28
 80030d2:	d515      	bpl.n	8003100 <HAL_HCD_IRQHandler+0x240>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d4:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80030d6:	f04f 0e05 	mov.w	lr, #5
 80030da:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030dc:	f041 0102 	orr.w	r1, r1, #2
 80030e0:	9202      	str	r2, [sp, #8]
 80030e2:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80030e4:	fb07 4105 	mla	r1, r7, r5, r4
 80030e8:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030ec:	2110      	movs	r1, #16
 80030ee:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030f0:	2108      	movs	r1, #8
 80030f2:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f4:	4629      	mov	r1, r5
 80030f6:	f003 feaf 	bl	8006e58 <USB_HC_Halt>
 80030fa:	9a02      	ldr	r2, [sp, #8]
 80030fc:	9b03      	ldr	r3, [sp, #12]
 80030fe:	e7d2      	b.n	80030a6 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003100:	68b1      	ldr	r1, [r6, #8]
 8003102:	0549      	lsls	r1, r1, #21
 8003104:	d5cf      	bpl.n	80030a6 <HAL_HCD_IRQHandler+0x1e6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003106:	68f1      	ldr	r1, [r6, #12]
 8003108:	9303      	str	r3, [sp, #12]
 800310a:	f041 0102 	orr.w	r1, r1, #2
 800310e:	9202      	str	r2, [sp, #8]
 8003110:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003112:	4629      	mov	r1, r5
 8003114:	f003 fea0 	bl	8006e58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003118:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800311a:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800311c:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800311e:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003120:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003124:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003126:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800312a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800312e:	60b1      	str	r1, [r6, #8]
 8003130:	e7b9      	b.n	80030a6 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003132:	68b1      	ldr	r1, [r6, #8]
 8003134:	07c8      	lsls	r0, r1, #31
 8003136:	d53d      	bpl.n	80031b4 <HAL_HCD_IRQHandler+0x2f4>
    if (hhcd->Init.dma_enable != 0U)
 8003138:	6921      	ldr	r1, [r4, #16]
 800313a:	b149      	cbz	r1, 8003150 <HAL_HCD_IRQHandler+0x290>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800313c:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800313e:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003142:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003146:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 800314a:	1a09      	subs	r1, r1, r0
 800314c:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8003150:	fb07 4e05 	mla	lr, r7, r5, r4
 8003154:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 800315a:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800315e:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003160:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8003164:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8003168:	d116      	bne.n	8003198 <HAL_HCD_IRQHandler+0x2d8>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316a:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316c:	4629      	mov	r1, r5
 800316e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003176:	f003 fe6f 	bl	8006e58 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800317a:	2310      	movs	r3, #16
 800317c:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800317e:	fb07 4505 	mla	r5, r7, r5, r4
 8003182:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8003186:	f083 0301 	eor.w	r3, r3, #1
 800318a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800318e:	f10a 0a01 	add.w	sl, sl, #1
 8003192:	f108 0820 	add.w	r8, r8, #32
 8003196:	e741      	b.n	800301c <HAL_HCD_IRQHandler+0x15c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003198:	2903      	cmp	r1, #3
 800319a:	d1f0      	bne.n	800317e <HAL_HCD_IRQHandler+0x2be>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800319c:	58d1      	ldr	r1, [r2, r3]
 800319e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80031a2:	50d1      	str	r1, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031a4:	4602      	mov	r2, r0
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031a6:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031aa:	4629      	mov	r1, r5
 80031ac:	4620      	mov	r0, r4
 80031ae:	f006 fbd7 	bl	8009960 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031b2:	e7e4      	b.n	800317e <HAL_HCD_IRQHandler+0x2be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031b4:	68b1      	ldr	r1, [r6, #8]
 80031b6:	0789      	lsls	r1, r1, #30
 80031b8:	d536      	bpl.n	8003228 <HAL_HCD_IRQHandler+0x368>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031ba:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031bc:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031c0:	f021 0102 	bic.w	r1, r1, #2
 80031c4:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031c6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80031ca:	2901      	cmp	r1, #1
 80031cc:	d10c      	bne.n	80031e8 <HAL_HCD_IRQHandler+0x328>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031ce:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031d2:	fb07 4305 	mla	r3, r7, r5, r4
 80031d6:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031d8:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031dc:	4620      	mov	r0, r4
 80031de:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80031e2:	f006 fbbd 	bl	8009960 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031e6:	e7d2      	b.n	800318e <HAL_HCD_IRQHandler+0x2ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031e8:	2905      	cmp	r1, #5
 80031ea:	d0f0      	beq.n	80031ce <HAL_HCD_IRQHandler+0x30e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ec:	2906      	cmp	r1, #6
 80031ee:	d001      	beq.n	80031f4 <HAL_HCD_IRQHandler+0x334>
 80031f0:	2908      	cmp	r1, #8
 80031f2:	d114      	bne.n	800321e <HAL_HCD_IRQHandler+0x35e>
      hhcd->hc[ch_num].ErrCnt++;
 80031f4:	fb07 4105 	mla	r1, r7, r5, r4
 80031f8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80031fa:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80031fc:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80031fe:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003200:	bf85      	ittet	hi
 8003202:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003204:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003208:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800320c:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003210:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003212:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003216:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800321a:	50d1      	str	r1, [r2, r3]
 800321c:	e7d9      	b.n	80031d2 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800321e:	2903      	cmp	r1, #3
 8003220:	d1d7      	bne.n	80031d2 <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003222:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8003226:	e7f3      	b.n	8003210 <HAL_HCD_IRQHandler+0x350>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003228:	68b1      	ldr	r1, [r6, #8]
 800322a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800322e:	d012      	beq.n	8003256 <HAL_HCD_IRQHandler+0x396>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003230:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003232:	4629      	mov	r1, r5
 8003234:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003236:	f043 0302 	orr.w	r3, r3, #2
 800323a:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800323c:	fb07 4305 	mla	r3, r7, r5, r4
 8003240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003242:	3201      	adds	r2, #1
 8003244:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003246:	2206      	movs	r2, #6
 8003248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324c:	f003 fe04 	bl	8006e58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	60b3      	str	r3, [r6, #8]
 8003254:	e79b      	b.n	800318e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003256:	68b3      	ldr	r3, [r6, #8]
 8003258:	06da      	lsls	r2, r3, #27
 800325a:	d598      	bpl.n	800318e <HAL_HCD_IRQHandler+0x2ce>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800325c:	fb07 4205 	mla	r2, r7, r5, r4
 8003260:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8003264:	2b03      	cmp	r3, #3
 8003266:	d10a      	bne.n	800327e <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003268:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800326a:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326c:	4629      	mov	r1, r5
 800326e:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003276:	f003 fdef 	bl	8006e58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800327a:	2310      	movs	r3, #16
 800327c:	e7e9      	b.n	8003252 <HAL_HCD_IRQHandler+0x392>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800327e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8003282:	d1fa      	bne.n	800327a <HAL_HCD_IRQHandler+0x3ba>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003284:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8003286:	6923      	ldr	r3, [r4, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f6      	bne.n	800327a <HAL_HCD_IRQHandler+0x3ba>
        hhcd->hc[ch_num].state = HC_NAK;
 800328c:	2303      	movs	r3, #3
 800328e:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8003292:	e7ea      	b.n	800326a <HAL_HCD_IRQHandler+0x3aa>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003294:	0169      	lsls	r1, r5, #5
 8003296:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 800329a:	188e      	adds	r6, r1, r2
 800329c:	68b3      	ldr	r3, [r6, #8]
 800329e:	f013 0e04 	ands.w	lr, r3, #4
 80032a2:	d006      	beq.n	80032b2 <HAL_HCD_IRQHandler+0x3f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032a4:	2304      	movs	r3, #4
 80032a6:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a8:	68f3      	ldr	r3, [r6, #12]
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	60f3      	str	r3, [r6, #12]
 80032b0:	e76d      	b.n	800318e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032b2:	68b3      	ldr	r3, [r6, #8]
 80032b4:	f013 0320 	ands.w	r3, r3, #32
 80032b8:	d014      	beq.n	80032e4 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032ba:	2320      	movs	r3, #32
 80032bc:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032be:	fb07 4305 	mla	r3, r7, r5, r4
 80032c2:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80032c6:	2a01      	cmp	r2, #1
 80032c8:	f47f af61 	bne.w	800318e <HAL_HCD_IRQHandler+0x2ce>
      hhcd->hc[ch_num].do_ping = 0U;
 80032cc:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d0:	4629      	mov	r1, r5
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032d2:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d6:	68f3      	ldr	r3, [r6, #12]
 80032d8:	f043 0302 	orr.w	r3, r3, #2
 80032dc:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032de:	f003 fdbb 	bl	8006e58 <USB_HC_Halt>
 80032e2:	e754      	b.n	800318e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032e4:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80032e8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80032ec:	d011      	beq.n	8003312 <HAL_HCD_IRQHandler+0x452>
    hhcd->hc[ch_num].state = HC_NYET;
 80032ee:	fb07 4205 	mla	r2, r7, r5, r4
 80032f2:	2104      	movs	r1, #4
 80032f4:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80032f8:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032fa:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].do_ping = 1U;
 80032fc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003300:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003302:	68f3      	ldr	r3, [r6, #12]
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330a:	f003 fda5 	bl	8006e58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800330e:	2340      	movs	r3, #64	; 0x40
 8003310:	e79f      	b.n	8003252 <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003312:	68b3      	ldr	r3, [r6, #8]
 8003314:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8003318:	d005      	beq.n	8003326 <HAL_HCD_IRQHandler+0x466>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800331a:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331c:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	60f3      	str	r3, [r6, #12]
 8003324:	e6c8      	b.n	80030b8 <HAL_HCD_IRQHandler+0x1f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003326:	68b3      	ldr	r3, [r6, #8]
 8003328:	07db      	lsls	r3, r3, #31
 800332a:	d511      	bpl.n	8003350 <HAL_HCD_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800332c:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800332e:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003332:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003334:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003338:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
 800333c:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800333e:	60f2      	str	r2, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003340:	f003 fd8a 	bl	8006e58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003344:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8003346:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003348:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800334a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800334e:	e71e      	b.n	800318e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003350:	68b3      	ldr	r3, [r6, #8]
 8003352:	071b      	lsls	r3, r3, #28
 8003354:	d50e      	bpl.n	8003374 <HAL_HCD_IRQHandler+0x4b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003356:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003358:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_STALL;
 800335a:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800335e:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003360:	68f3      	ldr	r3, [r6, #12]
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003368:	f003 fd76 	bl	8006e58 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800336c:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800336e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8003372:	e70c      	b.n	800318e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003374:	68b3      	ldr	r3, [r6, #8]
 8003376:	06db      	lsls	r3, r3, #27
 8003378:	d515      	bpl.n	80033a6 <HAL_HCD_IRQHandler+0x4e6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800337a:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 800337e:	2203      	movs	r2, #3
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003384:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003388:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 800338c:	b92a      	cbnz	r2, 800339a <HAL_HCD_IRQHandler+0x4da>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800338e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003392:	b912      	cbnz	r2, 800339a <HAL_HCD_IRQHandler+0x4da>
        hhcd->hc[ch_num].do_ping = 1U;
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339a:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339c:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	60f3      	str	r3, [r6, #12]
 80033a4:	e767      	b.n	8003276 <HAL_HCD_IRQHandler+0x3b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033a6:	68b3      	ldr	r3, [r6, #8]
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	d50c      	bpl.n	80033c6 <HAL_HCD_IRQHandler+0x506>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033ac:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ae:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033b0:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ba:	f003 fd4d 	bl	8006e58 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033be:	2306      	movs	r3, #6
 80033c0:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80033c4:	e744      	b.n	8003250 <HAL_HCD_IRQHandler+0x390>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033c6:	68b3      	ldr	r3, [r6, #8]
 80033c8:	055b      	lsls	r3, r3, #21
 80033ca:	d50f      	bpl.n	80033ec <HAL_HCD_IRQHandler+0x52c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033cc:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ce:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033d0:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033da:	f003 fd3d 	bl	8006e58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033de:	2310      	movs	r3, #16
 80033e0:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e6:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033e8:	2308      	movs	r3, #8
 80033ea:	e7c0      	b.n	800336e <HAL_HCD_IRQHandler+0x4ae>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033ec:	68b3      	ldr	r3, [r6, #8]
 80033ee:	0798      	lsls	r0, r3, #30
 80033f0:	f57f aecd 	bpl.w	800318e <HAL_HCD_IRQHandler+0x2ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033f4:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033f6:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033fa:	f023 0302 	bic.w	r3, r3, #2
 80033fe:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003400:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10e      	bne.n	8003426 <HAL_HCD_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003408:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800340c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003410:	3b02      	subs	r3, #2
 8003412:	2b01      	cmp	r3, #1
 8003414:	f63f aedd 	bhi.w	80031d2 <HAL_HCD_IRQHandler+0x312>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003418:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800341c:	f083 0301 	eor.w	r3, r3, #1
 8003420:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8003424:	e6d5      	b.n	80031d2 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003426:	2b03      	cmp	r3, #3
 8003428:	d102      	bne.n	8003430 <HAL_HCD_IRQHandler+0x570>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800342a:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800342e:	e6d0      	b.n	80031d2 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003430:	2b04      	cmp	r3, #4
 8003432:	d0fa      	beq.n	800342a <HAL_HCD_IRQHandler+0x56a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003434:	2b05      	cmp	r3, #5
 8003436:	d102      	bne.n	800343e <HAL_HCD_IRQHandler+0x57e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003438:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800343c:	e6c9      	b.n	80031d2 <HAL_HCD_IRQHandler+0x312>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800343e:	2b06      	cmp	r3, #6
 8003440:	d002      	beq.n	8003448 <HAL_HCD_IRQHandler+0x588>
 8003442:	2b08      	cmp	r3, #8
 8003444:	f47f aec5 	bne.w	80031d2 <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].ErrCnt++;
 8003448:	fb07 4005 	mla	r0, r7, r5, r4
 800344c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800344e:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003450:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8003452:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003454:	bf85      	ittet	hi
 8003456:	2304      	movhi	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003458:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800345c:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003460:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003464:	588b      	ldr	r3, [r1, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003466:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800346a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800346e:	508b      	str	r3, [r1, r2]
 8003470:	e6af      	b.n	80031d2 <HAL_HCD_IRQHandler+0x312>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003472:	6826      	ldr	r6, [r4, #0]
 8003474:	69b3      	ldr	r3, [r6, #24]
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 800347c:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800347e:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8003482:	2a02      	cmp	r2, #2
 8003484:	d129      	bne.n	80034da <HAL_HCD_IRQHandler+0x61a>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003486:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800348a:	f1b8 0f00 	cmp.w	r8, #0
 800348e:	d024      	beq.n	80034da <HAL_HCD_IRQHandler+0x61a>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003490:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003494:	2728      	movs	r7, #40	; 0x28
 8003496:	fb07 4705 	mla	r7, r7, r5, r4
 800349a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800349c:	b1e9      	cbz	r1, 80034da <HAL_HCD_IRQHandler+0x61a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800349e:	4642      	mov	r2, r8
 80034a0:	4630      	mov	r0, r6
 80034a2:	f003 fb61 	bl	8006b68 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80034a8:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034ac:	4443      	add	r3, r8
 80034ae:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80034b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b2:	4443      	add	r3, r8
 80034b4:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80034b6:	016b      	lsls	r3, r5, #5
 80034b8:	199a      	adds	r2, r3, r6
 80034ba:	6911      	ldr	r1, [r2, #16]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <HAL_HCD_IRQHandler+0x628>)
 80034be:	400a      	ands	r2, r1
 80034c0:	b15a      	cbz	r2, 80034da <HAL_HCD_IRQHandler+0x61a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034c2:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034cc:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80034ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80034d2:	f083 0301 	eor.w	r3, r3, #1
 80034d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	6993      	ldr	r3, [r2, #24]
 80034de:	f043 0310 	orr.w	r3, r3, #16
 80034e2:	6193      	str	r3, [r2, #24]
 80034e4:	e5a7      	b.n	8003036 <HAL_HCD_IRQHandler+0x176>
 80034e6:	bf00      	nop
 80034e8:	1ff80000 	.word	0x1ff80000

080034ec <HAL_HCD_Start>:
{
 80034ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80034ee:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 80034f2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d00d      	beq.n	8003514 <HAL_HCD_Start+0x28>
 80034f8:	2501      	movs	r5, #1
 80034fa:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80034fe:	6800      	ldr	r0, [r0, #0]
 8003500:	f003 fad9 	bl	8006ab6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003504:	4629      	mov	r1, r5
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	f003 fb7f 	bl	8006c0a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800350c:	2000      	movs	r0, #0
 800350e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8003512:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8003514:	2002      	movs	r0, #2
}
 8003516:	bd38      	pop	{r3, r4, r5, pc}

08003518 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8003518:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800351c:	2b01      	cmp	r3, #1
{
 800351e:	b510      	push	{r4, lr}
 8003520:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8003522:	d009      	beq.n	8003538 <HAL_HCD_Stop+0x20>
 8003524:	2301      	movs	r3, #1
 8003526:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800352a:	6800      	ldr	r0, [r0, #0]
 800352c:	f003 fdaa 	bl	8007084 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003530:	2000      	movs	r0, #0
 8003532:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8003536:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003538:	2002      	movs	r0, #2
}
 800353a:	bd10      	pop	{r4, pc}

0800353c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800353c:	6800      	ldr	r0, [r0, #0]
 800353e:	f003 bb46 	b.w	8006bce <USB_ResetPort>

08003542 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8003542:	2328      	movs	r3, #40	; 0x28
 8003544:	fb03 0101 	mla	r1, r3, r1, r0
}
 8003548:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800354c:	4770      	bx	lr

0800354e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800354e:	2328      	movs	r3, #40	; 0x28
 8003550:	fb03 0101 	mla	r1, r3, r1, r0
}
 8003554:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8003556:	4770      	bx	lr

08003558 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003558:	6800      	ldr	r0, [r0, #0]
 800355a:	f003 bbea 	b.w	8006d32 <USB_GetCurrentFrame>

0800355e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800355e:	6800      	ldr	r0, [r0, #0]
 8003560:	f003 bbdc 	b.w	8006d1c <USB_GetHostSpeed>

08003564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003564:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003566:	4604      	mov	r4, r0
 8003568:	2800      	cmp	r0, #0
 800356a:	d04a      	beq.n	8003602 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003570:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003574:	b91b      	cbnz	r3, 800357e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357a:	f7fd fc43 	bl	8000e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800357e:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003580:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003582:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003586:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003598:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a4:	d124      	bne.n	80035f0 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035aa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ac:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ae:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035b0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80035b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ba:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035c4:	6922      	ldr	r2, [r4, #16]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	69a1      	ldr	r1, [r4, #24]
 80035ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035ce:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035d0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035d2:	69e2      	ldr	r2, [r4, #28]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80035ee:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035f0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035f6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f8:	d1d8      	bne.n	80035ac <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	e7d4      	b.n	80035ac <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003602:	2001      	movs	r0, #1
}
 8003604:	bd10      	pop	{r4, pc}

08003606 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003606:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	2a20      	cmp	r2, #32
{
 800360e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003610:	d11d      	bne.n	800364e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003612:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003616:	2b01      	cmp	r3, #1
 8003618:	d019      	beq.n	800364e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361a:	2324      	movs	r3, #36	; 0x24
 800361c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	681c      	ldr	r4, [r3, #0]
 8003624:	f024 0401 	bic.w	r4, r4, #1
 8003628:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800362a:	681c      	ldr	r4, [r3, #0]
 800362c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003630:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003632:	681c      	ldr	r4, [r3, #0]
 8003634:	4321      	orrs	r1, r4
 8003636:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	f041 0101 	orr.w	r1, r1, #1
 800363e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003640:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003646:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800364a:	4618      	mov	r0, r3
 800364c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800364e:	2002      	movs	r0, #2
  }
}
 8003650:	bd10      	pop	{r4, pc}

08003652 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003652:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003654:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003658:	b2e4      	uxtb	r4, r4
 800365a:	2c20      	cmp	r4, #32
 800365c:	d11c      	bne.n	8003698 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003662:	2b01      	cmp	r3, #1
 8003664:	d018      	beq.n	8003698 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003666:	2324      	movs	r3, #36	; 0x24
 8003668:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800366c:	6803      	ldr	r3, [r0, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003676:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003678:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800367c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003680:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003690:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003694:	4618      	mov	r0, r3
 8003696:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8003698:	2002      	movs	r0, #2
  }
}
 800369a:	bd10      	pop	{r4, pc}

0800369c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800369c:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800369e:	f04f 0c00 	mov.w	ip, #0
{
 80036a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036a6:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80036a8:	6804      	ldr	r4, [r0, #0]
 80036aa:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036ac:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80036ae:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036b0:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036b4:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80036b6:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036ba:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036be:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036c2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80036c6:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036c8:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036ca:	68e0      	ldr	r0, [r4, #12]
 80036cc:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80036d0:	4430      	add	r0, r6
 80036d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036d6:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036d8:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036da:	68e0      	ldr	r0, [r4, #12]
 80036dc:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80036e0:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036e2:	6898      	ldr	r0, [r3, #8]
 80036e4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80036e8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036ea:	6888      	ldr	r0, [r1, #8]
 80036ec:	68e6      	ldr	r6, [r4, #12]
 80036ee:	3001      	adds	r0, #1
 80036f0:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80036f4:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036f6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036f8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80036fc:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036fe:	6918      	ldr	r0, [r3, #16]
 8003700:	f020 0007 	bic.w	r0, r0, #7
 8003704:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003706:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003708:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800370a:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800370e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003712:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003716:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800371a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800371e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003722:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003726:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003728:	6958      	ldr	r0, [r3, #20]
 800372a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800372e:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003730:	6948      	ldr	r0, [r1, #20]
 8003732:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003734:	69d8      	ldr	r0, [r3, #28]
 8003736:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800373a:	f020 0007 	bic.w	r0, r0, #7
 800373e:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003740:	6a08      	ldr	r0, [r1, #32]
 8003742:	69cd      	ldr	r5, [r1, #28]
 8003744:	4305      	orrs	r5, r0
 8003746:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003748:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800374a:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800374c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003750:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003752:	b31e      	cbz	r6, 800379c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003754:	2e01      	cmp	r6, #1
 8003756:	d023      	beq.n	80037a0 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003758:	1eb0      	subs	r0, r6, #2
 800375a:	2802      	cmp	r0, #2
 800375c:	d922      	bls.n	80037a4 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800375e:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003760:	bf0c      	ite	eq
 8003762:	2002      	moveq	r0, #2
 8003764:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003766:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003768:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800376c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003770:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003772:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003774:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003776:	4345      	muls	r5, r0
 8003778:	4378      	muls	r0, r7
 800377a:	3003      	adds	r0, #3
 800377c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003780:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003782:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003784:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8003788:	f020 0007 	bic.w	r0, r0, #7
 800378c:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800378e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003790:	58a3      	ldr	r3, [r4, r2]
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	50a3      	str	r3, [r4, r2]
 8003798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800379c:	2004      	movs	r0, #4
 800379e:	e7e2      	b.n	8003766 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80037a0:	2003      	movs	r0, #3
 80037a2:	e7e0      	b.n	8003766 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80037a4:	2002      	movs	r0, #2
 80037a6:	e7de      	b.n	8003766 <LTDC_SetConfig+0xca>

080037a8 <HAL_LTDC_Init>:
{
 80037a8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80037aa:	4604      	mov	r4, r0
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d063      	beq.n	8003878 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80037b0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80037b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037b8:	b91b      	cbnz	r3, 80037c2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80037ba:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80037be:	f7fd fbdb 	bl	8000f78 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037c2:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037c4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037c6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80037d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037d4:	6862      	ldr	r2, [r4, #4]
 80037d6:	6999      	ldr	r1, [r3, #24]
 80037d8:	4302      	orrs	r2, r0
 80037da:	68e0      	ldr	r0, [r4, #12]
 80037dc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037de:	6920      	ldr	r0, [r4, #16]
 80037e0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037e2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037e4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037e6:	4925      	ldr	r1, [pc, #148]	; (800387c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037e8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	400a      	ands	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80037f6:	69a0      	ldr	r0, [r4, #24]
 80037f8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80037fa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037fc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	400a      	ands	r2, r1
 8003802:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800380a:	6a20      	ldr	r0, [r4, #32]
 800380c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800380e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003810:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	400a      	ands	r2, r1
 8003816:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800381e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003820:	4302      	orrs	r2, r0
 8003822:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	4011      	ands	r1, r2
 8003828:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800382a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003832:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003834:	430a      	orrs	r2, r1
 8003836:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800383a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800383e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003842:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003846:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800384a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800384e:	430a      	orrs	r2, r1
 8003850:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003854:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003858:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385e:	f042 0206 	orr.w	r2, r2, #6
 8003862:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800386c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800386e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003872:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8003876:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003878:	2001      	movs	r0, #1
}
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	f000f800 	.word	0xf000f800

08003880 <HAL_LTDC_ErrorCallback>:
 8003880:	4770      	bx	lr

08003882 <HAL_LTDC_LineEventCallback>:
 8003882:	4770      	bx	lr

08003884 <HAL_LTDC_ReloadEventCallback>:
{
 8003884:	4770      	bx	lr

08003886 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003886:	6803      	ldr	r3, [r0, #0]
{
 8003888:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800388a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800388c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800388e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003890:	0772      	lsls	r2, r6, #29
 8003892:	d514      	bpl.n	80038be <HAL_LTDC_IRQHandler+0x38>
 8003894:	0769      	lsls	r1, r5, #29
 8003896:	d512      	bpl.n	80038be <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389a:	f022 0204 	bic.w	r2, r2, #4
 800389e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80038a0:	2204      	movs	r2, #4
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80038a4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80038b0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80038b2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80038b6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80038ba:	f7ff ffe1 	bl	8003880 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80038be:	07b2      	lsls	r2, r6, #30
 80038c0:	d516      	bpl.n	80038f0 <HAL_LTDC_IRQHandler+0x6a>
 80038c2:	07ab      	lsls	r3, r5, #30
 80038c4:	d514      	bpl.n	80038f0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80038c6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80038c8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80038ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038cc:	f022 0202 	bic.w	r2, r2, #2
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80038d2:	2202      	movs	r2, #2
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80038d6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80038e0:	2304      	movs	r3, #4
 80038e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80038e6:	2300      	movs	r3, #0
 80038e8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80038ec:	f7ff ffc8 	bl	8003880 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80038f0:	07f0      	lsls	r0, r6, #31
 80038f2:	d510      	bpl.n	8003916 <HAL_LTDC_IRQHandler+0x90>
 80038f4:	07e9      	lsls	r1, r5, #31
 80038f6:	d50e      	bpl.n	8003916 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038f8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80038fa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003904:	2201      	movs	r2, #1
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8003908:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800390a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800390e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003912:	f7ff ffb6 	bl	8003882 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003916:	0732      	lsls	r2, r6, #28
 8003918:	d511      	bpl.n	800393e <HAL_LTDC_IRQHandler+0xb8>
 800391a:	072b      	lsls	r3, r5, #28
 800391c:	d50f      	bpl.n	800393e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800391e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003920:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	f022 0208 	bic.w	r2, r2, #8
 8003928:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800392a:	2208      	movs	r2, #8
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800392e:	2301      	movs	r3, #1
 8003930:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003934:	2300      	movs	r3, #0
 8003936:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800393a:	f7ff ffa3 	bl	8003884 <HAL_LTDC_ReloadEventCallback>
 800393e:	bd70      	pop	{r4, r5, r6, pc}

08003940 <HAL_LTDC_ConfigLayer>:
{
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8003942:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8003946:	4606      	mov	r6, r0
 8003948:	468e      	mov	lr, r1
 800394a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800394c:	2b01      	cmp	r3, #1
 800394e:	f04f 0002 	mov.w	r0, #2
 8003952:	d01d      	beq.n	8003990 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003954:	2434      	movs	r4, #52	; 0x34
 8003956:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003958:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 800395c:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800395e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8003962:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003966:	3438      	adds	r4, #56	; 0x38
 8003968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800396a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800396c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800396e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003974:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003976:	4630      	mov	r0, r6
 8003978:	4662      	mov	r2, ip
 800397a:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800397c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800397e:	f7ff fe8d 	bl	800369c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003982:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003984:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003986:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003988:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800398c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003994 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003994:	4a02      	ldr	r2, [pc, #8]	; (80039a0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4770      	bx	lr
 80039a0:	40007000 	.word	0x40007000

080039a4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x68>)
{
 80039a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80039a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039aa:	4c19      	ldr	r4, [pc, #100]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c4:	f7fe fb14 	bl	8001ff0 <HAL_GetTick>
 80039c8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	03da      	lsls	r2, r3, #15
 80039ce:	d50c      	bpl.n	80039ea <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d8:	f7fe fb0a 	bl	8001ff0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039dc:	4c0c      	ldr	r4, [pc, #48]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80039de:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039e0:	6863      	ldr	r3, [r4, #4]
 80039e2:	039b      	lsls	r3, r3, #14
 80039e4:	d50a      	bpl.n	80039fc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80039e6:	2000      	movs	r0, #0
 80039e8:	e006      	b.n	80039f8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ea:	f7fe fb01 	bl	8001ff0 <HAL_GetTick>
 80039ee:	1b40      	subs	r0, r0, r5
 80039f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80039f4:	d9e9      	bls.n	80039ca <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80039f6:	2003      	movs	r0, #3
}
 80039f8:	b003      	add	sp, #12
 80039fa:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039fc:	f7fe faf8 	bl	8001ff0 <HAL_GetTick>
 8003a00:	1b40      	subs	r0, r0, r5
 8003a02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003a06:	d9eb      	bls.n	80039e0 <HAL_PWREx_EnableOverDrive+0x3c>
 8003a08:	e7f5      	b.n	80039f6 <HAL_PWREx_EnableOverDrive+0x52>
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40007000 	.word	0x40007000

08003a14 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8003a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a18:	9d06      	ldr	r5, [sp, #24]
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	460f      	mov	r7, r1
 8003a1e:	4616      	mov	r6, r2
 8003a20:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a22:	6821      	ldr	r1, [r4, #0]
 8003a24:	688a      	ldr	r2, [r1, #8]
 8003a26:	423a      	tst	r2, r7
 8003a28:	bf14      	ite	ne
 8003a2a:	2201      	movne	r2, #1
 8003a2c:	2200      	moveq	r2, #0
 8003a2e:	42b2      	cmp	r2, r6
 8003a30:	d102      	bne.n	8003a38 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003a32:	2000      	movs	r0, #0
}
 8003a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	1c6b      	adds	r3, r5, #1
 8003a3a:	d0f3      	beq.n	8003a24 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a3c:	b94d      	cbnz	r5, 8003a52 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003a3e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003a40:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003a42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003a46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6463      	str	r3, [r4, #68]	; 0x44
 8003a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a52:	f7fe facd 	bl	8001ff0 <HAL_GetTick>
 8003a56:	eba0 0008 	sub.w	r0, r0, r8
 8003a5a:	4285      	cmp	r5, r0
 8003a5c:	d2e1      	bcs.n	8003a22 <QSPI_WaitFlagStateUntilTimeout+0xe>
 8003a5e:	e7ee      	b.n	8003a3e <QSPI_WaitFlagStateUntilTimeout+0x2a>

08003a60 <HAL_QSPI_Init>:
{
 8003a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a64:	f7fe fac4 	bl	8001ff0 <HAL_GetTick>
 8003a68:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8003a6a:	2c00      	cmp	r4, #0
 8003a6c:	d04d      	beq.n	8003b0a <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 8003a6e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d04b      	beq.n	8003b0e <HAL_QSPI_Init+0xae>
 8003a76:	2301      	movs	r3, #1
 8003a78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a7c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003a80:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003a84:	b93a      	cbnz	r2, 8003a96 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8003a86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7fd fbe0 	bl	8001250 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003a90:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a94:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	68a1      	ldr	r1, [r4, #8]
 8003a9a:	6802      	ldr	r2, [r0, #0]
 8003a9c:	3901      	subs	r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003aa0:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003aa4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003aa8:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003aaa:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003aac:	2200      	movs	r2, #0
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	f7ff ffae 	bl	8003a14 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003ab8:	bb10      	cbnz	r0, 8003b00 <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	69e5      	ldr	r5, [r4, #28]
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	6811      	ldr	r1, [r2, #0]
 8003ac2:	432b      	orrs	r3, r5
 8003ac4:	6a25      	ldr	r5, [r4, #32]
 8003ac6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003aca:	432b      	orrs	r3, r5
 8003acc:	6865      	ldr	r5, [r4, #4]
 8003ace:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8003ad2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003ad6:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003ad8:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003ada:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003adc:	6963      	ldr	r3, [r4, #20]
 8003ade:	6855      	ldr	r5, [r2, #4]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6921      	ldr	r1, [r4, #16]
 8003ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003ae8:	490a      	ldr	r1, [pc, #40]	; (8003b14 <HAL_QSPI_Init+0xb4>)
 8003aea:	4029      	ands	r1, r5
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003af0:	6813      	ldr	r3, [r2, #0]
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003af8:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003afa:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8003afc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003b00:	2300      	movs	r3, #0
 8003b02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003b06:	b003      	add	sp, #12
 8003b08:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	e7fb      	b.n	8003b06 <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 8003b0e:	2002      	movs	r0, #2
 8003b10:	e7f9      	b.n	8003b06 <HAL_QSPI_Init+0xa6>
 8003b12:	bf00      	nop
 8003b14:	ffe0f8fe 	.word	0xffe0f8fe

08003b18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	b918      	cbnz	r0, 8003b28 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8003b22:	b002      	add	sp, #8
 8003b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b28:	6803      	ldr	r3, [r0, #0]
 8003b2a:	07d8      	lsls	r0, r3, #31
 8003b2c:	d410      	bmi.n	8003b50 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	0799      	lsls	r1, r3, #30
 8003b32:	d45e      	bmi.n	8003bf2 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	0719      	lsls	r1, r3, #28
 8003b38:	f100 80a3 	bmi.w	8003c82 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	075a      	lsls	r2, r3, #29
 8003b40:	f100 80c4 	bmi.w	8003ccc <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b44:	69a2      	ldr	r2, [r4, #24]
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	f040 812e 	bne.w	8003da8 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e7e8      	b.n	8003b22 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b50:	4b93      	ldr	r3, [pc, #588]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	f002 020c 	and.w	r2, r2, #12
 8003b58:	2a04      	cmp	r2, #4
 8003b5a:	d007      	beq.n	8003b6c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	f002 020c 	and.w	r2, r2, #12
 8003b62:	2a08      	cmp	r2, #8
 8003b64:	d10a      	bne.n	8003b7c <HAL_RCC_OscConfig+0x64>
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	025a      	lsls	r2, r3, #9
 8003b6a:	d507      	bpl.n	8003b7c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	039b      	lsls	r3, r3, #14
 8003b72:	d5dc      	bpl.n	8003b2e <HAL_RCC_OscConfig+0x16>
 8003b74:	6863      	ldr	r3, [r4, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1d9      	bne.n	8003b2e <HAL_RCC_OscConfig+0x16>
 8003b7a:	e7d1      	b.n	8003b20 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	4d88      	ldr	r5, [pc, #544]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d111      	bne.n	8003baa <HAL_RCC_OscConfig+0x92>
 8003b86:	682b      	ldr	r3, [r5, #0]
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b8e:	f7fe fa2f 	bl	8001ff0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4d83      	ldr	r5, [pc, #524]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8003b94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	039f      	lsls	r7, r3, #14
 8003b9a:	d4c8      	bmi.n	8003b2e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fa28 	bl	8001ff0 <HAL_GetTick>
 8003ba0:	1b80      	subs	r0, r0, r6
 8003ba2:	2864      	cmp	r0, #100	; 0x64
 8003ba4:	d9f7      	bls.n	8003b96 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	e7bb      	b.n	8003b22 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003baa:	b99b      	cbnz	r3, 8003bd4 <HAL_RCC_OscConfig+0xbc>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fa18 	bl	8001ff0 <HAL_GetTick>
 8003bc0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	0398      	lsls	r0, r3, #14
 8003bc6:	d5b2      	bpl.n	8003b2e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fa12 	bl	8001ff0 <HAL_GetTick>
 8003bcc:	1b80      	subs	r0, r0, r6
 8003bce:	2864      	cmp	r0, #100	; 0x64
 8003bd0:	d9f7      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xaa>
 8003bd2:	e7e8      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	d103      	bne.n	8003be4 <HAL_RCC_OscConfig+0xcc>
 8003bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	e7d0      	b.n	8003b86 <HAL_RCC_OscConfig+0x6e>
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be8:	602b      	str	r3, [r5, #0]
 8003bea:	682b      	ldr	r3, [r5, #0]
 8003bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf0:	e7cc      	b.n	8003b8c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf2:	4b6b      	ldr	r3, [pc, #428]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	f012 0f0c 	tst.w	r2, #12
 8003bfa:	d007      	beq.n	8003c0c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	f002 020c 	and.w	r2, r2, #12
 8003c02:	2a08      	cmp	r2, #8
 8003c04:	d111      	bne.n	8003c2a <HAL_RCC_OscConfig+0x112>
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0259      	lsls	r1, r3, #9
 8003c0a:	d40e      	bmi.n	8003c2a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0c:	4b64      	ldr	r3, [pc, #400]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	0792      	lsls	r2, r2, #30
 8003c12:	d502      	bpl.n	8003c1a <HAL_RCC_OscConfig+0x102>
 8003c14:	68e2      	ldr	r2, [r4, #12]
 8003c16:	2a01      	cmp	r2, #1
 8003c18:	d182      	bne.n	8003b20 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	6921      	ldr	r1, [r4, #16]
 8003c1e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003c22:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003c26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c28:	e784      	b.n	8003b34 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	4d5c      	ldr	r5, [pc, #368]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003c2e:	b1bb      	cbz	r3, 8003c60 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c38:	f7fe f9da 	bl	8001ff0 <HAL_GetTick>
 8003c3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	682b      	ldr	r3, [r5, #0]
 8003c40:	079f      	lsls	r7, r3, #30
 8003c42:	d507      	bpl.n	8003c54 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	6922      	ldr	r2, [r4, #16]
 8003c48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c50:	602b      	str	r3, [r5, #0]
 8003c52:	e76f      	b.n	8003b34 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c54:	f7fe f9cc 	bl	8001ff0 <HAL_GetTick>
 8003c58:	1b80      	subs	r0, r0, r6
 8003c5a:	2802      	cmp	r0, #2
 8003c5c:	d9ef      	bls.n	8003c3e <HAL_RCC_OscConfig+0x126>
 8003c5e:	e7a2      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c68:	f7fe f9c2 	bl	8001ff0 <HAL_GetTick>
 8003c6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	0798      	lsls	r0, r3, #30
 8003c72:	f57f af5f 	bpl.w	8003b34 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fe f9bb 	bl	8001ff0 <HAL_GetTick>
 8003c7a:	1b80      	subs	r0, r0, r6
 8003c7c:	2802      	cmp	r0, #2
 8003c7e:	d9f6      	bls.n	8003c6e <HAL_RCC_OscConfig+0x156>
 8003c80:	e791      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c82:	6963      	ldr	r3, [r4, #20]
 8003c84:	4d46      	ldr	r5, [pc, #280]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003c86:	b183      	cbz	r3, 8003caa <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8003c88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003c90:	f7fe f9ae 	bl	8001ff0 <HAL_GetTick>
 8003c94:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003c98:	079b      	lsls	r3, r3, #30
 8003c9a:	f53f af4f 	bmi.w	8003b3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fe f9a7 	bl	8001ff0 <HAL_GetTick>
 8003ca2:	1b80      	subs	r0, r0, r6
 8003ca4:	2802      	cmp	r0, #2
 8003ca6:	d9f6      	bls.n	8003c96 <HAL_RCC_OscConfig+0x17e>
 8003ca8:	e77d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8003caa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003cb2:	f7fe f99d 	bl	8001ff0 <HAL_GetTick>
 8003cb6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003cba:	079f      	lsls	r7, r3, #30
 8003cbc:	f57f af3e 	bpl.w	8003b3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc0:	f7fe f996 	bl	8001ff0 <HAL_GetTick>
 8003cc4:	1b80      	subs	r0, r0, r6
 8003cc6:	2802      	cmp	r0, #2
 8003cc8:	d9f6      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x1a0>
 8003cca:	e76c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd0:	00d0      	lsls	r0, r2, #3
 8003cd2:	d427      	bmi.n	8003d24 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003cd6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce8:	4d2e      	ldr	r5, [pc, #184]	; (8003da4 <HAL_RCC_OscConfig+0x28c>)
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	05d9      	lsls	r1, r3, #23
 8003cee:	d51b      	bpl.n	8003d28 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf0:	68a3      	ldr	r3, [r4, #8]
 8003cf2:	4d2b      	ldr	r5, [pc, #172]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d127      	bne.n	8003d48 <HAL_RCC_OscConfig+0x230>
 8003cf8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003d04:	f7fe f974 	bl	8001ff0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	4f25      	ldr	r7, [pc, #148]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8003d0a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d0e:	079b      	lsls	r3, r3, #30
 8003d10:	d53f      	bpl.n	8003d92 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	f43f af16 	beq.w	8003b44 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <HAL_RCC_OscConfig+0x288>)
 8003d1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
 8003d22:	e70f      	b.n	8003b44 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8003d24:	2600      	movs	r6, #0
 8003d26:	e7df      	b.n	8003ce8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d30:	f7fe f95e 	bl	8001ff0 <HAL_GetTick>
 8003d34:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	05da      	lsls	r2, r3, #23
 8003d3a:	d4d9      	bmi.n	8003cf0 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fe f958 	bl	8001ff0 <HAL_GetTick>
 8003d40:	1bc0      	subs	r0, r0, r7
 8003d42:	2864      	cmp	r0, #100	; 0x64
 8003d44:	d9f7      	bls.n	8003d36 <HAL_RCC_OscConfig+0x21e>
 8003d46:	e72e      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	b9ab      	cbnz	r3, 8003d76 <HAL_RCC_OscConfig+0x25e>
 8003d4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	672b      	str	r3, [r5, #112]	; 0x70
 8003d56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003d5e:	f7fe f947 	bl	8001ff0 <HAL_GetTick>
 8003d62:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003d66:	0798      	lsls	r0, r3, #30
 8003d68:	d5d3      	bpl.n	8003d12 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fe f941 	bl	8001ff0 <HAL_GetTick>
 8003d6e:	1bc0      	subs	r0, r0, r7
 8003d70:	4540      	cmp	r0, r8
 8003d72:	d9f7      	bls.n	8003d64 <HAL_RCC_OscConfig+0x24c>
 8003d74:	e717      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003d7a:	d103      	bne.n	8003d84 <HAL_RCC_OscConfig+0x26c>
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	672b      	str	r3, [r5, #112]	; 0x70
 8003d82:	e7b9      	b.n	8003cf8 <HAL_RCC_OscConfig+0x1e0>
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	672b      	str	r3, [r5, #112]	; 0x70
 8003d8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	e7b5      	b.n	8003cfe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d92:	f7fe f92d 	bl	8001ff0 <HAL_GetTick>
 8003d96:	eba0 0008 	sub.w	r0, r0, r8
 8003d9a:	42a8      	cmp	r0, r5
 8003d9c:	d9b6      	bls.n	8003d0c <HAL_RCC_OscConfig+0x1f4>
 8003d9e:	e702      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da8:	4d24      	ldr	r5, [pc, #144]	; (8003e3c <HAL_RCC_OscConfig+0x324>)
 8003daa:	68ab      	ldr	r3, [r5, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	f43f aeb5 	beq.w	8003b20 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003db6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc0:	d12e      	bne.n	8003e20 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8003dc2:	f7fe f915 	bl	8001ff0 <HAL_GetTick>
 8003dc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	0199      	lsls	r1, r3, #6
 8003dcc:	d422      	bmi.n	8003e14 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dce:	6a22      	ldr	r2, [r4, #32]
 8003dd0:	69e3      	ldr	r3, [r4, #28]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003dd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dda:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003dde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003de0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003de4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de6:	4c15      	ldr	r4, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de8:	0852      	lsrs	r2, r2, #1
 8003dea:	3a01      	subs	r2, #1
 8003dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003df0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003df2:	682b      	ldr	r3, [r5, #0]
 8003df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dfa:	f7fe f8f9 	bl	8001ff0 <HAL_GetTick>
 8003dfe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	019a      	lsls	r2, r3, #6
 8003e04:	f53f aea2 	bmi.w	8003b4c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe f8f2 	bl	8001ff0 <HAL_GetTick>
 8003e0c:	1b40      	subs	r0, r0, r5
 8003e0e:	2802      	cmp	r0, #2
 8003e10:	d9f6      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2e8>
 8003e12:	e6c8      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe f8ec 	bl	8001ff0 <HAL_GetTick>
 8003e18:	1b80      	subs	r0, r0, r6
 8003e1a:	2802      	cmp	r0, #2
 8003e1c:	d9d4      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2b0>
 8003e1e:	e6c2      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8003e20:	f7fe f8e6 	bl	8001ff0 <HAL_GetTick>
 8003e24:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	f57f ae8f 	bpl.w	8003b4c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fe f8df 	bl	8001ff0 <HAL_GetTick>
 8003e32:	1b00      	subs	r0, r0, r4
 8003e34:	2802      	cmp	r0, #2
 8003e36:	d9f6      	bls.n	8003e26 <HAL_RCC_OscConfig+0x30e>
 8003e38:	e6b5      	b.n	8003ba6 <HAL_RCC_OscConfig+0x8e>
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800

08003e40 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e40:	4913      	ldr	r1, [pc, #76]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003e42:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e44:	688b      	ldr	r3, [r1, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x16>
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e52:	4810      	ldr	r0, [pc, #64]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003e54:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003e56:	4810      	ldr	r0, [pc, #64]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x58>)
 8003e58:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e5a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e5c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e64:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e68:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003e6c:	bf1a      	itte	ne
 8003e6e:	480a      	ldrne	r0, [pc, #40]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x58>)
 8003e70:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e72:	4808      	ldreq	r0, [pc, #32]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x54>)
 8003e74:	fba1 0100 	umull	r0, r1, r1, r0
 8003e78:	f7fc f9ca 	bl	8000210 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x50>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003e84:	3301      	adds	r3, #1
 8003e86:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003e88:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e8c:	bd08      	pop	{r3, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	017d7840 	.word	0x017d7840

08003e9c <HAL_RCC_ClockConfig>:
{
 8003e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	b910      	cbnz	r0, 8003eac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4a46      	ldr	r2, [pc, #280]	; (8003fc8 <HAL_RCC_ClockConfig+0x12c>)
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	d328      	bcc.n	8003f0a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	6821      	ldr	r1, [r4, #0]
 8003eba:	078f      	lsls	r7, r1, #30
 8003ebc:	d430      	bmi.n	8003f20 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	07c8      	lsls	r0, r1, #31
 8003ec0:	d443      	bmi.n	8003f4a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec2:	4a41      	ldr	r2, [pc, #260]	; (8003fc8 <HAL_RCC_ClockConfig+0x12c>)
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	429d      	cmp	r5, r3
 8003ecc:	d367      	bcc.n	8003f9e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ece:	6822      	ldr	r2, [r4, #0]
 8003ed0:	0751      	lsls	r1, r2, #29
 8003ed2:	d470      	bmi.n	8003fb6 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed4:	0713      	lsls	r3, r2, #28
 8003ed6:	d507      	bpl.n	8003ee8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <HAL_RCC_ClockConfig+0x130>)
 8003eda:	6921      	ldr	r1, [r4, #16]
 8003edc:	6893      	ldr	r3, [r2, #8]
 8003ede:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ee2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ee6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ee8:	f7ff ffaa 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003eec:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_RCC_ClockConfig+0x130>)
 8003eee:	4a38      	ldr	r2, [pc, #224]	; (8003fd0 <HAL_RCC_ClockConfig+0x134>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	40d8      	lsrs	r0, r3
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_RCC_ClockConfig+0x138>)
 8003efc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7fd fc6e 	bl	80017e0 <HAL_InitTick>
  return HAL_OK;
 8003f04:	2000      	movs	r0, #0
 8003f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	f023 030f 	bic.w	r3, r3, #15
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	4299      	cmp	r1, r3
 8003f1c:	d1c3      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xa>
 8003f1e:	e7cb      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	f011 0f04 	tst.w	r1, #4
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_RCC_ClockConfig+0x130>)
 8003f26:	d003      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003f2e:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f30:	070e      	lsls	r6, r1, #28
 8003f32:	d503      	bpl.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003f3a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68a0      	ldr	r0, [r4, #8]
 8003f40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f44:	4302      	orrs	r2, r0
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e7b9      	b.n	8003ebe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	6861      	ldr	r1, [r4, #4]
 8003f4c:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_RCC_ClockConfig+0x130>)
 8003f4e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f50:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	d11c      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f54:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	d0a5      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f60:	4e1a      	ldr	r6, [pc, #104]	; (8003fcc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	f022 0203 	bic.w	r2, r2, #3
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003f6a:	f7fe f841 	bl	8001ff0 <HAL_GetTick>
 8003f6e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f70:	68b3      	ldr	r3, [r6, #8]
 8003f72:	6862      	ldr	r2, [r4, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f7c:	d0a1      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7e:	f7fe f837 	bl	8001ff0 <HAL_GetTick>
 8003f82:	1bc0      	subs	r0, r0, r7
 8003f84:	4540      	cmp	r0, r8
 8003f86:	d9f3      	bls.n	8003f70 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8003f88:	2003      	movs	r0, #3
}
 8003f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8e:	2902      	cmp	r1, #2
 8003f90:	d102      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003f96:	e7df      	b.n	8003f58 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	f012 0f02 	tst.w	r2, #2
 8003f9c:	e7dc      	b.n	8003f58 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	f023 030f 	bic.w	r3, r3, #15
 8003fa4:	432b      	orrs	r3, r5
 8003fa6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	429d      	cmp	r5, r3
 8003fb0:	f47f af79 	bne.w	8003ea6 <HAL_RCC_ClockConfig+0xa>
 8003fb4:	e78b      	b.n	8003ece <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb6:	4905      	ldr	r1, [pc, #20]	; (8003fcc <HAL_RCC_ClockConfig+0x130>)
 8003fb8:	68e0      	ldr	r0, [r4, #12]
 8003fba:	688b      	ldr	r3, [r1, #8]
 8003fbc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003fc0:	4303      	orrs	r3, r0
 8003fc2:	608b      	str	r3, [r1, #8]
 8003fc4:	e786      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x38>
 8003fc6:	bf00      	nop
 8003fc8:	40023c00 	.word	0x40023c00
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	08009de0 	.word	0x08009de0
 8003fd4:	20000000 	.word	0x20000000

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003fd8:	4b01      	ldr	r3, [pc, #4]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x8>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000

08003fe4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003fe6:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x18>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	4a03      	ldr	r2, [pc, #12]	; (8004000 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ff2:	6810      	ldr	r0, [r2, #0]
}
 8003ff4:	40d8      	lsrs	r0, r3
 8003ff6:	4770      	bx	lr
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	08009df0 	.word	0x08009df0
 8004000:	20000000 	.word	0x20000000

08004004 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004006:	4a05      	ldr	r2, [pc, #20]	; (800401c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800400e:	5cd3      	ldrb	r3, [r2, r3]
 8004010:	4a03      	ldr	r2, [pc, #12]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004012:	6810      	ldr	r0, [r2, #0]
}
 8004014:	40d8      	lsrs	r0, r3
 8004016:	4770      	bx	lr
 8004018:	40023800 	.word	0x40023800
 800401c:	08009df0 	.word	0x08009df0
 8004020:	20000000 	.word	0x20000000

08004024 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004024:	230f      	movs	r3, #15
 8004026:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_GetClockConfig+0x34>)
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	f002 0203 	and.w	r2, r2, #3
 8004030:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004038:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004040:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800404a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCC_GetClockConfig+0x38>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	600b      	str	r3, [r1, #0]
 8004056:	4770      	bx	lr
 8004058:	40023800 	.word	0x40023800
 800405c:	40023c00 	.word	0x40023c00

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004064:	6802      	ldr	r2, [r0, #0]
{
 8004066:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004068:	f012 0601 	ands.w	r6, r2, #1
 800406c:	d00b      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800406e:	4bb8      	ldr	r3, [pc, #736]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004070:	6899      	ldr	r1, [r3, #8]
 8004072:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004076:	6099      	str	r1, [r3, #8]
 8004078:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800407a:	6899      	ldr	r1, [r3, #8]
 800407c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800407e:	fab6 f686 	clz	r6, r6
 8004082:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004084:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004086:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800408a:	d012      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800408c:	49b0      	ldr	r1, [pc, #704]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800408e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004090:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004094:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004098:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800409c:	bf08      	it	eq
 800409e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a0:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040a4:	bf16      	itet	ne
 80040a6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80040aa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040ac:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040b2:	02d1      	lsls	r1, r2, #11
 80040b4:	d510      	bpl.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040b6:	48a6      	ldr	r0, [pc, #664]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80040ba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040be:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80040c6:	ea43 0301 	orr.w	r3, r3, r1
 80040ca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040ce:	f000 8185 	beq.w	80043dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80040d2:	2900      	cmp	r1, #0
 80040d4:	bf08      	it	eq
 80040d6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80040d8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80040dc:	bf18      	it	ne
 80040de:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040e0:	0692      	lsls	r2, r2, #26
 80040e2:	d531      	bpl.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b9a      	ldr	r3, [pc, #616]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040e6:	4f9b      	ldr	r7, [pc, #620]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7fd ff75 	bl	8001ff0 <HAL_GetTick>
 8004106:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	05db      	lsls	r3, r3, #23
 800410c:	f140 8168 	bpl.w	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004110:	4f8f      	ldr	r7, [pc, #572]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004112:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004114:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004118:	f040 816d 	bne.w	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800411e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004122:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004126:	4a8a      	ldr	r2, [pc, #552]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004128:	f040 818b 	bne.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800412c:	6891      	ldr	r1, [r2, #8]
 800412e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004132:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004136:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800413a:	4301      	orrs	r1, r0
 800413c:	6091      	str	r1, [r2, #8]
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004144:	430b      	orrs	r3, r1
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	06da      	lsls	r2, r3, #27
 800414c:	d50c      	bpl.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800414e:	4a80      	ldr	r2, [pc, #512]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004150:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004154:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004158:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800415c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004160:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004162:	4301      	orrs	r1, r0
 8004164:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004168:	045f      	lsls	r7, r3, #17
 800416a:	d508      	bpl.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800416c:	4978      	ldr	r1, [pc, #480]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800416e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004170:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004174:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004178:	4302      	orrs	r2, r0
 800417a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800417e:	0418      	lsls	r0, r3, #16
 8004180:	d508      	bpl.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004182:	4973      	ldr	r1, [pc, #460]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004184:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004186:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800418a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800418e:	4302      	orrs	r2, r0
 8004190:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004194:	03d9      	lsls	r1, r3, #15
 8004196:	d508      	bpl.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004198:	496d      	ldr	r1, [pc, #436]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800419a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800419c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80041a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80041a4:	4302      	orrs	r2, r0
 80041a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041aa:	039a      	lsls	r2, r3, #14
 80041ac:	d508      	bpl.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ae:	4968      	ldr	r1, [pc, #416]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80041b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80041b6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80041ba:	4302      	orrs	r2, r0
 80041bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c0:	065f      	lsls	r7, r3, #25
 80041c2:	d508      	bpl.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041c4:	4962      	ldr	r1, [pc, #392]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80041c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80041cc:	f022 0203 	bic.w	r2, r2, #3
 80041d0:	4302      	orrs	r2, r0
 80041d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d6:	0618      	lsls	r0, r3, #24
 80041d8:	d508      	bpl.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041da:	495d      	ldr	r1, [pc, #372]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80041de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80041e2:	f022 020c 	bic.w	r2, r2, #12
 80041e6:	4302      	orrs	r2, r0
 80041e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ec:	05d9      	lsls	r1, r3, #23
 80041ee:	d508      	bpl.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041f0:	4957      	ldr	r1, [pc, #348]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80041f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80041f8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80041fc:	4302      	orrs	r2, r0
 80041fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004202:	059a      	lsls	r2, r3, #22
 8004204:	d508      	bpl.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004206:	4952      	ldr	r1, [pc, #328]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004208:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800420a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800420e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004212:	4302      	orrs	r2, r0
 8004214:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004218:	055f      	lsls	r7, r3, #21
 800421a:	d508      	bpl.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800421c:	494c      	ldr	r1, [pc, #304]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800421e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004220:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004224:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004228:	4302      	orrs	r2, r0
 800422a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800422e:	0518      	lsls	r0, r3, #20
 8004230:	d508      	bpl.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004232:	4947      	ldr	r1, [pc, #284]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004236:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800423a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800423e:	4302      	orrs	r2, r0
 8004240:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004244:	04d9      	lsls	r1, r3, #19
 8004246:	d508      	bpl.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004248:	4941      	ldr	r1, [pc, #260]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800424a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800424c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004250:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004254:	4302      	orrs	r2, r0
 8004256:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800425a:	049a      	lsls	r2, r3, #18
 800425c:	d508      	bpl.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800425e:	493c      	ldr	r1, [pc, #240]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004260:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004262:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004266:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800426a:	4302      	orrs	r2, r0
 800426c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004270:	025f      	lsls	r7, r3, #9
 8004272:	d508      	bpl.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004274:	4936      	ldr	r1, [pc, #216]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004276:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004278:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800427c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004280:	4302      	orrs	r2, r0
 8004282:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004286:	0298      	lsls	r0, r3, #10
 8004288:	d50c      	bpl.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800428a:	4831      	ldr	r0, [pc, #196]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800428c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800428e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004292:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004296:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800429a:	bf08      	it	eq
 800429c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800429e:	430a      	orrs	r2, r1
 80042a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80042a4:	f013 0f08 	tst.w	r3, #8
 80042a8:	bf18      	it	ne
 80042aa:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ac:	0359      	lsls	r1, r3, #13
 80042ae:	d508      	bpl.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b0:	4927      	ldr	r1, [pc, #156]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042b2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80042b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80042b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042bc:	4302      	orrs	r2, r0
 80042be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	d509      	bpl.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c6:	4922      	ldr	r1, [pc, #136]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042c8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80042cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80042d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80042d4:	4302      	orrs	r2, r0
 80042d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80042da:	2e01      	cmp	r6, #1
 80042dc:	f000 80b5 	beq.w	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80042e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e4:	f000 80b1 	beq.w	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042e8:	2d01      	cmp	r5, #1
 80042ea:	d175      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042ec:	4d18      	ldr	r5, [pc, #96]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042ee:	682b      	ldr	r3, [r5, #0]
 80042f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f6:	f7fd fe7b 	bl	8001ff0 <HAL_GetTick>
 80042fa:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	009f      	lsls	r7, r3, #2
 8004300:	f100 8127 	bmi.w	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004304:	6821      	ldr	r1, [r4, #0]
 8004306:	030e      	lsls	r6, r1, #12
 8004308:	d501      	bpl.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800430a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800430c:	b11b      	cbz	r3, 8004316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800430e:	02cd      	lsls	r5, r1, #11
 8004310:	d522      	bpl.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004314:	bb03      	cbnz	r3, 8004358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004318:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800431c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004324:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004328:	4303      	orrs	r3, r0
 800432a:	6960      	ldr	r0, [r4, #20]
 800432c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004330:	69a0      	ldr	r0, [r4, #24]
 8004332:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004336:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800433a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800433e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004340:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004344:	3801      	subs	r0, #1
 8004346:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800434a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800434e:	e003      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004350:	40023800 	.word	0x40023800
 8004354:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004358:	0288      	lsls	r0, r1, #10
 800435a:	d515      	bpl.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800435c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800435e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004362:	d111      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004364:	4a82      	ldr	r2, [pc, #520]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004366:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800436a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800436e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004372:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004376:	4303      	orrs	r3, r0
 8004378:	6960      	ldr	r0, [r4, #20]
 800437a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800437e:	6a20      	ldr	r0, [r4, #32]
 8004380:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004388:	070a      	lsls	r2, r1, #28
 800438a:	d519      	bpl.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800438c:	4978      	ldr	r1, [pc, #480]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800438e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004392:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004396:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800439a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800439e:	4313      	orrs	r3, r2
 80043a0:	6962      	ldr	r2, [r4, #20]
 80043a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80043a6:	69e2      	ldr	r2, [r4, #28]
 80043a8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043b0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80043b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80043b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043c0:	4c6b      	ldr	r4, [pc, #428]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ca:	f7fd fe11 	bl	8001ff0 <HAL_GetTick>
 80043ce:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	f140 80c4 	bpl.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80043d8:	2000      	movs	r0, #0
 80043da:	e009      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 80043dc:	2601      	movs	r6, #1
 80043de:	e67b      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e0:	f7fd fe06 	bl	8001ff0 <HAL_GetTick>
 80043e4:	eba0 0008 	sub.w	r0, r0, r8
 80043e8:	2864      	cmp	r0, #100	; 0x64
 80043ea:	f67f ae8d 	bls.w	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80043ee:	2003      	movs	r0, #3
}
 80043f0:	b003      	add	sp, #12
 80043f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80043f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80043fc:	4293      	cmp	r3, r2
 80043fe:	f43f ae8d 	beq.w	800411c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004404:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800440a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800440e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004410:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004412:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004416:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004418:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800441a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800441c:	07d8      	lsls	r0, r3, #31
 800441e:	f57f ae7d 	bpl.w	800411c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8004422:	f7fd fde5 	bl	8001ff0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800442a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800442e:	0799      	lsls	r1, r3, #30
 8004430:	f53f ae74 	bmi.w	800411c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fd fddc 	bl	8001ff0 <HAL_GetTick>
 8004438:	eba0 0008 	sub.w	r0, r0, r8
 800443c:	4548      	cmp	r0, r9
 800443e:	d9f5      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004440:	e7d5      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004442:	6891      	ldr	r1, [r2, #8]
 8004444:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004448:	e678      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800444a:	4e49      	ldr	r6, [pc, #292]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004452:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004454:	f7fd fdcc 	bl	8001ff0 <HAL_GetTick>
 8004458:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800445a:	6833      	ldr	r3, [r6, #0]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	d472      	bmi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	07d7      	lsls	r7, r2, #31
 8004464:	d512      	bpl.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004468:	b983      	cbnz	r3, 800448c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800446a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800446e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004476:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800447a:	430b      	orrs	r3, r1
 800447c:	6861      	ldr	r1, [r4, #4]
 800447e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004482:	68a1      	ldr	r1, [r4, #8]
 8004484:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004488:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800448c:	0316      	lsls	r6, r2, #12
 800448e:	d503      	bpl.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8004490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004496:	d005      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004498:	02d0      	lsls	r0, r2, #11
 800449a:	d51e      	bpl.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800449c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800449e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a2:	d11a      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044a4:	4932      	ldr	r1, [pc, #200]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80044a6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044aa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80044b6:	4303      	orrs	r3, r0
 80044b8:	6860      	ldr	r0, [r4, #4]
 80044ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80044be:	68e0      	ldr	r0, [r4, #12]
 80044c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80044c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044c8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80044cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ce:	f020 001f 	bic.w	r0, r0, #31
 80044d2:	3b01      	subs	r3, #1
 80044d4:	4303      	orrs	r3, r0
 80044d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044da:	01d1      	lsls	r1, r2, #7
 80044dc:	d511      	bpl.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044de:	4924      	ldr	r1, [pc, #144]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80044e0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044e4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80044ec:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80044f0:	4303      	orrs	r3, r0
 80044f2:	6860      	ldr	r0, [r4, #4]
 80044f4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80044f8:	6920      	ldr	r0, [r4, #16]
 80044fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80044fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004502:	0192      	lsls	r2, r2, #6
 8004504:	d50d      	bpl.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	6862      	ldr	r2, [r4, #4]
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004510:	68e2      	ldr	r2, [r4, #12]
 8004512:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004516:	68a2      	ldr	r2, [r4, #8]
 8004518:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800451c:	4a14      	ldr	r2, [pc, #80]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800451e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004522:	4e13      	ldr	r6, [pc, #76]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800452c:	f7fd fd60 	bl	8001ff0 <HAL_GetTick>
 8004530:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004532:	6833      	ldr	r3, [r6, #0]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	f53f aed7 	bmi.w	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800453a:	f7fd fd59 	bl	8001ff0 <HAL_GetTick>
 800453e:	1bc0      	subs	r0, r0, r7
 8004540:	2864      	cmp	r0, #100	; 0x64
 8004542:	d9f6      	bls.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004544:	e753      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004546:	f7fd fd53 	bl	8001ff0 <HAL_GetTick>
 800454a:	1bc0      	subs	r0, r0, r7
 800454c:	2864      	cmp	r0, #100	; 0x64
 800454e:	d984      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004550:	e74d      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004552:	f7fd fd4d 	bl	8001ff0 <HAL_GetTick>
 8004556:	1b80      	subs	r0, r0, r6
 8004558:	2864      	cmp	r0, #100	; 0x64
 800455a:	f67f aecf 	bls.w	80042fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800455e:	e746      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004560:	f7fd fd46 	bl	8001ff0 <HAL_GetTick>
 8004564:	1b40      	subs	r0, r0, r5
 8004566:	2864      	cmp	r0, #100	; 0x64
 8004568:	f67f af32 	bls.w	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800456c:	e73f      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004574:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004578:	d12a      	bne.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800457a:	4b2c      	ldr	r3, [pc, #176]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800457c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004580:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8004584:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004588:	d032      	beq.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800458a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 800458e:	d02d      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8004590:	2a00      	cmp	r2, #0
 8004592:	d148      	bne.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004594:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004596:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004598:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800459a:	4a24      	ldr	r2, [pc, #144]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800459c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80045a0:	bf54      	ite	pl
 80045a2:	4b23      	ldrpl	r3, [pc, #140]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80045a4:	4b23      	ldrmi	r3, [pc, #140]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80045a6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80045aa:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80045ae:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80045b2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80045b6:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80045b8:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80045bc:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80045c0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80045c4:	f3c3 2304 	ubfx	r3, r3, #8, #5
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80045c8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80045ca:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80045ce:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80045d0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80045d4:	d127      	bne.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    saiclocksource = RCC->DCKCFGR1;
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80045dc:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 80045e0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80045e4:	d004      	beq.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80045e6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80045ea:	e7d0      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80045ec:	4812      	ldr	r0, [pc, #72]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80045ee:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80045f0:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045f2:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80045f4:	0253      	lsls	r3, r2, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80045f6:	4a0d      	ldr	r2, [pc, #52]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80045fc:	bf54      	ite	pl
 80045fe:	4b0c      	ldrpl	r3, [pc, #48]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004600:	4b0c      	ldrmi	r3, [pc, #48]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004602:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004606:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800460a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 800460e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004612:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004614:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004618:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800461c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	e7d0      	b.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0;
 8004626:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	00f42400 	.word	0x00f42400
 8004634:	017d7840 	.word	0x017d7840
 8004638:	00bb8000 	.word	0x00bb8000

0800463c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800463c:	6802      	ldr	r2, [r0, #0]
{
 800463e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004640:	68d3      	ldr	r3, [r2, #12]
{
 8004642:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004648:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800464a:	f7fd fcd1 	bl	8001ff0 <HAL_GetTick>
 800464e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	069b      	lsls	r3, r3, #26
 8004656:	d501      	bpl.n	800465c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004658:	2000      	movs	r0, #0
 800465a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800465c:	f7fd fcc8 	bl	8001ff0 <HAL_GetTick>
 8004660:	1b40      	subs	r0, r0, r5
 8004662:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004666:	d9f3      	bls.n	8004650 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8004668:	2003      	movs	r0, #3
}
 800466a:	bd38      	pop	{r3, r4, r5, pc}

0800466c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800466c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800466e:	6803      	ldr	r3, [r0, #0]
{
 8004670:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	0652      	lsls	r2, r2, #25
 8004676:	d501      	bpl.n	800467c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004678:	2000      	movs	r0, #0
 800467a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800467c:	f04f 32ff 	mov.w	r2, #4294967295
 8004680:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004682:	f7fd fcb5 	bl	8001ff0 <HAL_GetTick>
 8004686:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	065b      	lsls	r3, r3, #25
 800468e:	d4f3      	bmi.n	8004678 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004690:	f7fd fcae 	bl	8001ff0 <HAL_GetTick>
 8004694:	1b40      	subs	r0, r0, r5
 8004696:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800469a:	d9f5      	bls.n	8004688 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800469c:	2003      	movs	r0, #3
}
 800469e:	bd38      	pop	{r3, r4, r5, pc}

080046a0 <HAL_RTC_Init>:
{
 80046a0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80046a2:	4604      	mov	r4, r0
 80046a4:	b1b0      	cbz	r0, 80046d4 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80046a6:	7f43      	ldrb	r3, [r0, #29]
 80046a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046ac:	b913      	cbnz	r3, 80046b4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80046ae:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80046b0:	f7fc feb2 	bl	8001418 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046b4:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046b6:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046b8:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ba:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
 80046c0:	2253      	movs	r2, #83	; 0x53
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046c4:	f7ff ffd2 	bl	800466c <RTC_EnterInitMode>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	b128      	cbz	r0, 80046d8 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046cc:	22ff      	movs	r2, #255	; 0xff
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046d0:	2304      	movs	r3, #4
 80046d2:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 80046d4:	2001      	movs	r0, #1
}
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046d8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046da:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046dc:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80046e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	6899      	ldr	r1, [r3, #8]
 80046ea:	432a      	orrs	r2, r5
 80046ec:	6965      	ldr	r5, [r4, #20]
 80046ee:	432a      	orrs	r2, r5
 80046f0:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80046f2:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046f4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80046f6:	68e2      	ldr	r2, [r4, #12]
 80046f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004700:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004702:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800470a:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800470c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800470e:	f022 0208 	bic.w	r2, r2, #8
 8004712:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004716:	430a      	orrs	r2, r1
 8004718:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800471e:	2301      	movs	r3, #1
 8004720:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8004722:	bd38      	pop	{r3, r4, r5, pc}

08004724 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8004724:	2300      	movs	r3, #0

  while(Value >= 10)
 8004726:	2809      	cmp	r0, #9
 8004728:	d803      	bhi.n	8004732 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800472a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800472e:	b2c0      	uxtb	r0, r0
 8004730:	4770      	bx	lr
    Value -= 10;
 8004732:	380a      	subs	r0, #10
    bcdhigh++;
 8004734:	3301      	adds	r3, #1
    Value -= 10;
 8004736:	b2c0      	uxtb	r0, r0
 8004738:	e7f5      	b.n	8004726 <RTC_ByteToBcd2+0x2>

0800473a <HAL_RTC_SetTime>:
{
 800473a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800473c:	7f03      	ldrb	r3, [r0, #28]
{
 800473e:	4606      	mov	r6, r0
 8004740:	460f      	mov	r7, r1
 8004742:	2502      	movs	r5, #2
  __HAL_LOCK(hrtc);
 8004744:	2b01      	cmp	r3, #1
 8004746:	d02f      	beq.n	80047a8 <HAL_RTC_SetTime+0x6e>
 8004748:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800474a:	7745      	strb	r5, [r0, #29]
  __HAL_LOCK(hrtc);
 800474c:	7703      	strb	r3, [r0, #28]
 800474e:	6803      	ldr	r3, [r0, #0]
 8004750:	784d      	ldrb	r5, [r1, #1]
 8004752:	7808      	ldrb	r0, [r1, #0]
 8004754:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004756:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8004758:	bb42      	cbnz	r2, 80047ac <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800475a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800475e:	bf08      	it	eq
 8004760:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004762:	f7ff ffdf 	bl	8004724 <RTC_ByteToBcd2>
 8004766:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004768:	4628      	mov	r0, r5
 800476a:	f7ff ffdb 	bl	8004724 <RTC_ByteToBcd2>
 800476e:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004770:	4620      	mov	r0, r4
 8004772:	f7ff ffd7 	bl	8004724 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004776:	7b3b      	ldrb	r3, [r7, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004778:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800477c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004780:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004784:	6833      	ldr	r3, [r6, #0]
 8004786:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004788:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
 800478c:	2253      	movs	r2, #83	; 0x53
 800478e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004790:	f7ff ff6c 	bl	800466c <RTC_EnterInitMode>
 8004794:	6833      	ldr	r3, [r6, #0]
 8004796:	4605      	mov	r5, r0
 8004798:	b1a0      	cbz	r0, 80047c4 <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800479a:	22ff      	movs	r2, #255	; 0xff
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800479e:	2304      	movs	r3, #4
 80047a0:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80047a2:	2300      	movs	r3, #0
 80047a4:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80047a6:	2501      	movs	r5, #1
}
 80047a8:	4628      	mov	r0, r5
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)(sTime->Minutes) << 8) | \
 80047ac:	022d      	lsls	r5, r5, #8
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047ae:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80047b2:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
      sTime->TimeFormat = 0x00;
 80047b6:	bf08      	it	eq
 80047b8:	730b      	strbeq	r3, [r1, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80047ba:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 80047bc:	7b0c      	ldrb	r4, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80047be:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80047c2:	e7df      	b.n	8004784 <HAL_RTC_SetTime+0x4a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80047c4:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047c8:	6978      	ldr	r0, [r7, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80047ca:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80047ce:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047d6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	4302      	orrs	r2, r0
 80047de:	430a      	orrs	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	069b      	lsls	r3, r3, #26
 80047ee:	d40a      	bmi.n	8004806 <HAL_RTC_SetTime+0xcc>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047f0:	4630      	mov	r0, r6
 80047f2:	f7ff ff23 	bl	800463c <HAL_RTC_WaitForSynchro>
 80047f6:	b130      	cbz	r0, 8004806 <HAL_RTC_SetTime+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047f8:	6833      	ldr	r3, [r6, #0]
 80047fa:	22ff      	movs	r2, #255	; 0xff
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047fe:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8004800:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004802:	7773      	strb	r3, [r6, #29]
 8004804:	e7cf      	b.n	80047a6 <HAL_RTC_SetTime+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004806:	6833      	ldr	r3, [r6, #0]
 8004808:	22ff      	movs	r2, #255	; 0xff
 800480a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800480c:	2301      	movs	r3, #1
 800480e:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8004810:	2300      	movs	r3, #0
 8004812:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8004814:	e7c8      	b.n	80047a8 <HAL_RTC_SetTime+0x6e>

08004816 <HAL_RTC_SetDate>:
{
 8004816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8004818:	7f03      	ldrb	r3, [r0, #28]
{
 800481a:	4605      	mov	r5, r0
 800481c:	2602      	movs	r6, #2
 __HAL_LOCK(hrtc);
 800481e:	2b01      	cmp	r3, #1
 8004820:	d030      	beq.n	8004884 <HAL_RTC_SetDate+0x6e>
 8004822:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004824:	7746      	strb	r6, [r0, #29]
 __HAL_LOCK(hrtc);
 8004826:	7703      	strb	r3, [r0, #28]
 8004828:	784b      	ldrb	r3, [r1, #1]
 800482a:	78c8      	ldrb	r0, [r1, #3]
 800482c:	788e      	ldrb	r6, [r1, #2]
 800482e:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004830:	2a00      	cmp	r2, #0
 8004832:	d148      	bne.n	80048c6 <HAL_RTC_SetDate+0xb0>
 8004834:	06da      	lsls	r2, r3, #27
 8004836:	d503      	bpl.n	8004840 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004838:	f023 0310 	bic.w	r3, r3, #16
 800483c:	330a      	adds	r3, #10
 800483e:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004840:	f7ff ff70 	bl	8004724 <RTC_ByteToBcd2>
 8004844:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004846:	7848      	ldrb	r0, [r1, #1]
 8004848:	f7ff ff6c 	bl	8004724 <RTC_ByteToBcd2>
 800484c:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800484e:	4630      	mov	r0, r6
 8004850:	f7ff ff68 	bl	8004724 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004854:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8004858:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800485c:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004864:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
 8004868:	2253      	movs	r2, #83	; 0x53
 800486a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800486c:	f7ff fefe 	bl	800466c <RTC_EnterInitMode>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	4606      	mov	r6, r0
 8004874:	b140      	cbz	r0, 8004888 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004876:	22ff      	movs	r2, #255	; 0xff
 8004878:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800487a:	2304      	movs	r3, #4
 800487c:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800487e:	2300      	movs	r3, #0
 8004880:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8004882:	2601      	movs	r6, #1
}
 8004884:	4630      	mov	r0, r6
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004888:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800488c:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004890:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004898:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	069b      	lsls	r3, r3, #26
 800489e:	d40a      	bmi.n	80048b6 <HAL_RTC_SetDate+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048a0:	4628      	mov	r0, r5
 80048a2:	f7ff fecb 	bl	800463c <HAL_RTC_WaitForSynchro>
 80048a6:	b130      	cbz	r0, 80048b6 <HAL_RTC_SetDate+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	22ff      	movs	r2, #255	; 0xff
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048ae:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80048b0:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048b2:	776b      	strb	r3, [r5, #29]
 80048b4:	e7e5      	b.n	8004882 <HAL_RTC_SetDate+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048b6:	682b      	ldr	r3, [r5, #0]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80048bc:	2301      	movs	r3, #1
 80048be:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80048c0:	2300      	movs	r3, #0
 80048c2:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 80048c4:	e7de      	b.n	8004884 <HAL_RTC_SetDate+0x6e>
                  (((uint32_t)sDate->Month) << 8) | \
 80048c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80048c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 80048cc:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80048ce:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 80048d2:	e7c5      	b.n	8004860 <HAL_RTC_SetDate+0x4a>

080048d4 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 80048d4:	7f03      	ldrb	r3, [r0, #28]
 80048d6:	2b01      	cmp	r3, #1
{
 80048d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	4604      	mov	r4, r0
 80048de:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80048e2:	d056      	beq.n	8004992 <HAL_RTC_SetAlarm+0xbe>
 80048e4:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048e6:	7760      	strb	r0, [r4, #29]
 80048e8:	6a0e      	ldr	r6, [r1, #32]
  __HAL_LOCK(hrtc);
 80048ea:	7723      	strb	r3, [r4, #28]
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	7808      	ldrb	r0, [r1, #0]
 80048f0:	f891 9001 	ldrb.w	r9, [r1, #1]
 80048f4:	788d      	ldrb	r5, [r1, #2]
 80048f6:	f891 8024 	ldrb.w	r8, [r1, #36]	; 0x24
 80048fa:	698f      	ldr	r7, [r1, #24]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80048fc:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d149      	bne.n	8004996 <HAL_RTC_SetAlarm+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004902:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004906:	ea46 0607 	orr.w	r6, r6, r7
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800490a:	bf08      	it	eq
 800490c:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800490e:	f7ff ff09 	bl	8004724 <RTC_ByteToBcd2>
 8004912:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004914:	4648      	mov	r0, r9
 8004916:	f7ff ff05 	bl	8004724 <RTC_ByteToBcd2>
 800491a:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800491c:	4628      	mov	r0, r5
 800491e:	f7ff ff01 	bl	8004724 <RTC_ByteToBcd2>
 8004922:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004924:	4640      	mov	r0, r8
 8004926:	f7ff fefd 	bl	8004724 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800492a:	7b0d      	ldrb	r5, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800492c:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8004930:	ea45 0509 	orr.w	r5, r5, r9
 8004934:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8004938:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800493c:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004940:	69cb      	ldr	r3, [r1, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004942:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004944:	684e      	ldr	r6, [r1, #4]
 8004946:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
 800494c:	2253      	movs	r2, #83	; 0x53
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004950:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004952:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004956:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004958:	d13d      	bne.n	80049d6 <HAL_RTC_SetAlarm+0x102>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800495a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800495e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004966:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004968:	f7fd fb42 	bl	8001ff0 <HAL_GetTick>
 800496c:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	68df      	ldr	r7, [r3, #12]
 8004972:	f017 0701 	ands.w	r7, r7, #1
 8004976:	d01f      	beq.n	80049b8 <HAL_RTC_SetAlarm+0xe4>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004978:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800497a:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004982:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004984:	22ff      	movs	r2, #255	; 0xff
 8004986:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 8004988:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800498c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 800498e:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8004990:	7763      	strb	r3, [r4, #29]
}
 8004992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004996:	433e      	orrs	r6, r7
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004998:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800499c:	ea45 0506 	orr.w	r5, r5, r6
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80049a0:	bf08      	it	eq
 80049a2:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80049a4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80049a8:	7b08      	ldrb	r0, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80049aa:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80049ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80049b2:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 80049b6:	e7c3      	b.n	8004940 <HAL_RTC_SetAlarm+0x6c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049b8:	f7fd fb1a 	bl	8001ff0 <HAL_GetTick>
 80049bc:	eba0 0008 	sub.w	r0, r0, r8
 80049c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049c4:	d9d3      	bls.n	800496e <HAL_RTC_SetAlarm+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ca:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ce:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80049d0:	7727      	strb	r7, [r4, #28]
        return HAL_TIMEOUT;
 80049d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80049d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049da:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80049e4:	f7fd fb04 	bl	8001ff0 <HAL_GetTick>
 80049e8:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	68df      	ldr	r7, [r3, #12]
 80049ee:	f017 0702 	ands.w	r7, r7, #2
 80049f2:	d005      	beq.n	8004a00 <HAL_RTC_SetAlarm+0x12c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049f4:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049f6:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fe:	e7c0      	b.n	8004982 <HAL_RTC_SetAlarm+0xae>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a00:	f7fd faf6 	bl	8001ff0 <HAL_GetTick>
 8004a04:	eba0 0008 	sub.w	r0, r0, r8
 8004a08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004a0c:	d9ed      	bls.n	80049ea <HAL_RTC_SetAlarm+0x116>
 8004a0e:	e7da      	b.n	80049c6 <HAL_RTC_SetAlarm+0xf2>

08004a10 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a10:	7f03      	ldrb	r3, [r0, #28]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	f04f 0302 	mov.w	r3, #2
{
 8004a18:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004a1a:	d01d      	beq.n	8004a58 <HAL_RTCEx_SetTimeStamp+0x48>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1c:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8004a1e:	6803      	ldr	r3, [r0, #0]
 8004a20:	689c      	ldr	r4, [r3, #8]
 8004a22:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8004a26:	f024 0408 	bic.w	r4, r4, #8

  tmpreg|= TimeStampEdge;
 8004a2a:	430c      	orrs	r4, r1

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a2c:	21ca      	movs	r1, #202	; 0xca
 8004a2e:	6259      	str	r1, [r3, #36]	; 0x24
 8004a30:	2153      	movs	r1, #83	; 0x53
 8004a32:	6259      	str	r1, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8004a34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a36:	f021 0106 	bic.w	r1, r1, #6
 8004a3a:	64d9      	str	r1, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8004a3c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8004a42:	609c      	str	r4, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a50:	2301      	movs	r3, #1
 8004a52:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a54:	2300      	movs	r3, #0
 8004a56:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8004a58:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004a5a:	bd10      	pop	{r4, pc}

08004a5c <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004a5e:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f641 3358 	movw	r3, #7000	; 0x1b58
 8004a66:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8004a6a:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004a6c:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a72:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004a74:	f112 32ff 	adds.w	r2, r2, #4294967295
 8004a78:	d207      	bcs.n	8004a8a <SAI_Disable+0x2e>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a7a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a82:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004a86:	2003      	movs	r0, #3
      break;
 8004a88:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004a8a:	680b      	ldr	r3, [r1, #0]
 8004a8c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004a90:	d1f0      	bne.n	8004a74 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	4618      	mov	r0, r3

  return status;
}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000000 	.word	0x20000000

08004a9c <HAL_SAI_Init>:
{
 8004a9c:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f000 80c4 	beq.w	8004c2e <HAL_SAI_Init+0x192>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8004aa6:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004aaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004aae:	b91b      	cbnz	r3, 8004ab8 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8004ab0:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8004ab4:	f7fc fd12 	bl	80014dc <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004ab8:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8004aba:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8004abc:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8004ac0:	f7ff ffcc 	bl	8004a5c <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	f000 80a0 	beq.w	8004c0c <HAL_SAI_Init+0x170>
  uint32_t tmpregisterGCR = 0;
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	bf0c      	ite	eq
 8004ad0:	2320      	moveq	r3, #32
 8004ad2:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 8004ad4:	68a2      	ldr	r2, [r4, #8]
 8004ad6:	2a02      	cmp	r2, #2
 8004ad8:	f000 809c 	beq.w	8004c14 <HAL_SAI_Init+0x178>
 8004adc:	2a03      	cmp	r2, #3
 8004ade:	f000 8097 	beq.w	8004c10 <HAL_SAI_Init+0x174>
  uint32_t syncen_bits = 0;
 8004ae2:	2a01      	cmp	r2, #1
 8004ae4:	bf0c      	ite	eq
 8004ae6:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8004aea:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	4951      	ldr	r1, [pc, #324]	; (8004c34 <HAL_SAI_Init+0x198>)
 8004af0:	428a      	cmp	r2, r1
 8004af2:	d003      	beq.n	8004afc <HAL_SAI_Init+0x60>
 8004af4:	4850      	ldr	r0, [pc, #320]	; (8004c38 <HAL_SAI_Init+0x19c>)
 8004af6:	4282      	cmp	r2, r0
 8004af8:	f040 808f 	bne.w	8004c1a <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
 8004afc:	484f      	ldr	r0, [pc, #316]	; (8004c3c <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 8004afe:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004b00:	69e3      	ldr	r3, [r4, #28]
 8004b02:	b313      	cbz	r3, 8004b4a <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8004b04:	428a      	cmp	r2, r1
 8004b06:	d003      	beq.n	8004b10 <HAL_SAI_Init+0x74>
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <HAL_SAI_Init+0x19c>)
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	f040 8087 	bne.w	8004c1e <HAL_SAI_Init+0x182>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b10:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b14:	f7ff fd2e 	bl	8004574 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	4a49      	ldr	r2, [pc, #292]	; (8004c40 <HAL_SAI_Init+0x1a4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d002      	beq.n	8004b26 <HAL_SAI_Init+0x8a>
 8004b20:	3220      	adds	r2, #32
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d103      	bne.n	8004b2e <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004b2a:	f7ff fd23 	bl	8004574 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004b2e:	220a      	movs	r2, #10
 8004b30:	69e3      	ldr	r3, [r4, #28]
 8004b32:	4350      	muls	r0, r2
 8004b34:	025b      	lsls	r3, r3, #9
 8004b36:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8004b3a:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8004b3e:	fb02 0013 	mls	r0, r2, r3, r0
 8004b42:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8004b44:	bf08      	it	eq
 8004b46:	3301      	addeq	r3, #1
 8004b48:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b4a:	6863      	ldr	r3, [r4, #4]
 8004b4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b4e:	f033 0102 	bics.w	r1, r3, #2
 8004b52:	d166      	bne.n	8004c22 <HAL_SAI_Init+0x186>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004b54:	2a01      	cmp	r2, #1
 8004b56:	bf18      	it	ne
 8004b58:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	4839      	ldr	r0, [pc, #228]	; (8004c44 <HAL_SAI_Init+0x1a8>)
 8004b60:	6816      	ldr	r6, [r2, #0]
 8004b62:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b64:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004b66:	4333      	orrs	r3, r6
 8004b68:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004b6a:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b6c:	4333      	orrs	r3, r6
 8004b6e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004b70:	6810      	ldr	r0, [r2, #0]
 8004b72:	4333      	orrs	r3, r6
 8004b74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b76:	4333      	orrs	r3, r6
 8004b78:	6926      	ldr	r6, [r4, #16]
 8004b7a:	4333      	orrs	r3, r6
 8004b7c:	6966      	ldr	r6, [r4, #20]
 8004b7e:	4333      	orrs	r3, r6
 8004b80:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b82:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b84:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004b88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b8a:	432b      	orrs	r3, r5
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004b90:	6853      	ldr	r3, [r2, #4]
 8004b92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b96:	f023 030f 	bic.w	r3, r3, #15
 8004b9a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004b9c:	69a3      	ldr	r3, [r4, #24]
 8004b9e:	6851      	ldr	r1, [r2, #4]
 8004ba0:	4303      	orrs	r3, r0
 8004ba2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004ba4:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004ba6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004bac:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <HAL_SAI_Init+0x1ac>)
 8004bae:	6891      	ldr	r1, [r2, #8]
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004bb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004bb6:	6891      	ldr	r1, [r2, #8]
 8004bb8:	4303      	orrs	r3, r0
 8004bba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004bbc:	4303      	orrs	r3, r0
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004bc2:	3901      	subs	r1, #1
 8004bc4:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004bc6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004bc8:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004bca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004bce:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004bd0:	68d3      	ldr	r3, [r2, #12]
 8004bd2:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8004bd6:	f023 030f 	bic.w	r3, r3, #15
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004be0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004be2:	68d1      	ldr	r1, [r2, #12]
 8004be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004be6:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004be8:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004bea:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004bec:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004bf2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004bf4:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004bf6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004bfa:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8004bfc:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004bfe:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8004c02:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8004c06:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	e761      	b.n	8004ad4 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004c10:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004c14:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8004c18:	e768      	b.n	8004aec <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8004c1a:	480c      	ldr	r0, [pc, #48]	; (8004c4c <HAL_SAI_Init+0x1b0>)
 8004c1c:	e76f      	b.n	8004afe <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e77a      	b.n	8004b18 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004c22:	2a01      	cmp	r2, #1
 8004c24:	bf14      	ite	ne
 8004c26:	2100      	movne	r1, #0
 8004c28:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8004c2c:	e796      	b.n	8004b5c <HAL_SAI_Init+0xc0>
    return HAL_ERROR;
 8004c2e:	2001      	movs	r0, #1
}
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	bf00      	nop
 8004c34:	40015804 	.word	0x40015804
 8004c38:	40015824 	.word	0x40015824
 8004c3c:	40015800 	.word	0x40015800
 8004c40:	40015c04 	.word	0x40015c04
 8004c44:	ff05c010 	.word	0xff05c010
 8004c48:	fff88000 	.word	0xfff88000
 8004c4c:	40015c00 	.word	0x40015c00

08004c50 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004c50:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004c5c:	4770      	bx	lr

08004c5e <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c62:	4605      	mov	r5, r0
 8004c64:	b089      	sub	sp, #36	; 0x24
 8004c66:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004c68:	f7fd f9c2 	bl	8001ff0 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8004c6c:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8004c6e:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004c70:	2108      	movs	r1, #8
 8004c72:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004c78:	f001 fcc5 	bl	8006606 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	bb40      	cbnz	r0, 8004cd2 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004c80:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004c82:	6828      	ldr	r0, [r5, #0]
 8004c84:	0409      	lsls	r1, r1, #16
 8004c86:	f001 fdc9 	bl	800681c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	bb08      	cbnz	r0, 8004cd2 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c92:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 8004c94:	a902      	add	r1, sp, #8
 8004c96:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c98:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004c9e:	2330      	movs	r3, #48	; 0x30
 8004ca0:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004caa:	f001 fc99 	bl	80065e0 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004cae:	6828      	ldr	r0, [r5, #0]
 8004cb0:	f001 fde5 	bl	800687e <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	b960      	cbnz	r0, 8004cd2 <SD_FindSCR+0x74>
 8004cb8:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004cba:	f240 482a 	movw	r8, #1066	; 0x42a
 8004cbe:	6828      	ldr	r0, [r5, #0]
 8004cc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004cc2:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004cc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004cc8:	d007      	beq.n	8004cda <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004cca:	0719      	lsls	r1, r3, #28
 8004ccc:	d518      	bpl.n	8004d00 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004cce:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004cd0:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	b009      	add	sp, #36	; 0x24
 8004cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004cda:	029b      	lsls	r3, r3, #10
 8004cdc:	d507      	bpl.n	8004cee <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004cde:	f001 fbc9 	bl	8006474 <SDMMC_ReadFIFO>
 8004ce2:	ab08      	add	r3, sp, #32
 8004ce4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8004ce8:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004cea:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004cee:	f7fd f97f 	bl	8001ff0 <HAL_GetTick>
 8004cf2:	eba0 0009 	sub.w	r0, r0, r9
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d1e1      	bne.n	8004cbe <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8004cfa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004cfe:	e7e8      	b.n	8004cd2 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004d00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d02:	079a      	lsls	r2, r3, #30
 8004d04:	d501      	bpl.n	8004d0a <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004d06:	2402      	movs	r4, #2
 8004d08:	e7e2      	b.n	8004cd0 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004d0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d0c:	069b      	lsls	r3, r3, #26
 8004d0e:	d501      	bpl.n	8004d14 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004d10:	2420      	movs	r4, #32
 8004d12:	e7dd      	b.n	8004cd0 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d14:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8004d18:	6383      	str	r3, [r0, #56]	; 0x38
 8004d1a:	9b00      	ldr	r3, [sp, #0]
 8004d1c:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d1e:	6073      	str	r3, [r6, #4]
 8004d20:	9b01      	ldr	r3, [sp, #4]
 8004d22:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d24:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8004d26:	e7d4      	b.n	8004cd2 <SD_FindSCR+0x74>

08004d28 <HAL_SD_ReadBlocks_DMA>:
{
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	b086      	sub	sp, #24
 8004d30:	4605      	mov	r5, r0
 8004d32:	461f      	mov	r7, r3
  if(NULL == pData)
 8004d34:	460a      	mov	r2, r1
 8004d36:	b939      	cbnz	r1, 8004d48 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d3e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004d40:	2001      	movs	r0, #1
}
 8004d42:	b006      	add	sp, #24
 8004d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004d48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004d4c:	b2c0      	uxtb	r0, r0
 8004d4e:	2801      	cmp	r0, #1
 8004d50:	d166      	bne.n	8004e20 <HAL_SD_ReadBlocks_DMA+0xf8>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d52:	19f4      	adds	r4, r6, r7
 8004d54:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d58:	428c      	cmp	r4, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d5a:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d5c:	d904      	bls.n	8004d68 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d64:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 8004d66:	e7ec      	b.n	8004d42 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 8004d68:	682c      	ldr	r4, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8004d6a:	2103      	movs	r1, #3
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004d6c:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8004d70:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004d74:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004d76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004d78:	492a      	ldr	r1, [pc, #168]	; (8004e24 <HAL_SD_ReadBlocks_DMA+0xfc>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004d7a:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 8004d7e:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004d80:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004d82:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004d84:	4928      	ldr	r1, [pc, #160]	; (8004e28 <HAL_SD_ReadBlocks_DMA+0x100>)
    hsd->hdmarx->XferAbortCallback = NULL;
 8004d86:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004d88:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004d8c:	64c1      	str	r1, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004d8e:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8004d92:	f7fd fb85 	bl	80024a0 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 8004d96:	6828      	ldr	r0, [r5, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d98:	2401      	movs	r4, #1
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d9a:	4669      	mov	r1, sp
    __HAL_SD_DMA_ENABLE(hsd);
 8004d9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d9e:	9405      	str	r4, [sp, #20]
    __HAL_SD_DMA_ENABLE(hsd);
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	62c3      	str	r3, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004da6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004da8:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004dae:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004db2:	f04f 0390 	mov.w	r3, #144	; 0x90
      BlockAdd *= 512U;
 8004db6:	bf18      	it	ne
 8004db8:	0276      	lslne	r6, r6, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004dba:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9304      	str	r3, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004dc4:	f001 fc0c 	bl	80065e0 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dcc:	6828      	ldr	r0, [r5, #0]
 8004dce:	f001 fc1a 	bl	8006606 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dd2:	b148      	cbz	r0, 8004de8 <HAL_SD_ReadBlocks_DMA+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ddc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004dde:	4318      	orrs	r0, r3
 8004de0:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004de2:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8004de6:	e7ab      	b.n	8004d40 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8004de8:	2f01      	cmp	r7, #1
 8004dea:	d912      	bls.n	8004e12 <HAL_SD_ReadBlocks_DMA+0xea>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004dec:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004dee:	4631      	mov	r1, r6
 8004df0:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004df2:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004df4:	f001 fc37 	bl	8006666 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0a2      	beq.n	8004d42 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e04:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e06:	4318      	orrs	r0, r3
 8004e08:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8004e10:	e797      	b.n	8004d42 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e12:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004e14:	4631      	mov	r1, r6
 8004e16:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e18:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004e1a:	f001 fc0c 	bl	8006636 <SDMMC_CmdReadSingleBlock>
 8004e1e:	e7eb      	b.n	8004df8 <HAL_SD_ReadBlocks_DMA+0xd0>
    return HAL_BUSY;
 8004e20:	2002      	movs	r0, #2
 8004e22:	e78e      	b.n	8004d42 <HAL_SD_ReadBlocks_DMA+0x1a>
 8004e24:	08004f27 	.word	0x08004f27
 8004e28:	0800548f 	.word	0x0800548f

08004e2c <HAL_SD_WriteBlocks_DMA>:
{
 8004e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2e:	4604      	mov	r4, r0
 8004e30:	b087      	sub	sp, #28
 8004e32:	4615      	mov	r5, r2
 8004e34:	461e      	mov	r6, r3
  if(NULL == pData)
 8004e36:	460f      	mov	r7, r1
 8004e38:	b931      	cbnz	r1, 8004e48 <HAL_SD_WriteBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e40:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004e42:	2001      	movs	r0, #1
}
 8004e44:	b007      	add	sp, #28
 8004e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004e48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004e4c:	b2c0      	uxtb	r0, r0
 8004e4e:	2801      	cmp	r0, #1
 8004e50:	d162      	bne.n	8004f18 <HAL_SD_WriteBlocks_DMA+0xec>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e52:	18eb      	adds	r3, r5, r3
 8004e54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e56:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e58:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e5a:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e5c:	d904      	bls.n	8004e68 <HAL_SD_WriteBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e64:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004e66:	e7ed      	b.n	8004e44 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 8004e68:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8004e6a:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004e6c:	492b      	ldr	r1, [pc, #172]	; (8004f1c <HAL_SD_WriteBlocks_DMA+0xf0>)
    hsd->State = HAL_SD_STATE_BUSY;
 8004e6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004e72:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8004e74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004e76:	f043 031a 	orr.w	r3, r3, #26
 8004e7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004e7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e7e:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004e80:	4927      	ldr	r1, [pc, #156]	; (8004f20 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004e84:	64d9      	str	r1, [r3, #76]	; 0x4c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e86:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e8c:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 8004e8e:	bf18      	it	ne
 8004e90:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e92:	f001 fbb8 	bl	8006606 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e96:	b150      	cbz	r0, 8004eae <HAL_SD_WriteBlocks_DMA+0x82>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ea2:	4318      	orrs	r0, r3
 8004ea4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004eac:	e7ca      	b.n	8004e44 <HAL_SD_WriteBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8004eae:	2e01      	cmp	r6, #1
 8004eb0:	d90f      	bls.n	8004ed2 <HAL_SD_WriteBlocks_DMA+0xa6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004eb2:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004eb8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004eba:	f001 fc04 	bl	80066c6 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ec2:	b168      	cbz	r0, 8004ee0 <HAL_SD_WriteBlocks_DMA+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004ec4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8004ec8:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004eca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ecc:	4305      	orrs	r5, r0
 8004ece:	63a5      	str	r5, [r4, #56]	; 0x38
 8004ed0:	e7e9      	b.n	8004ea6 <HAL_SD_WriteBlocks_DMA+0x7a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ed2:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ed8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004eda:	f001 fbdc 	bl	8006696 <SDMMC_CmdWriteSingleBlock>
 8004ede:	e7ee      	b.n	8004ebe <HAL_SD_WriteBlocks_DMA+0x92>
    __HAL_SD_DMA_ENABLE(hsd);
 8004ee0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004ee2:	0276      	lsls	r6, r6, #9
 8004ee4:	3280      	adds	r2, #128	; 0x80
 8004ee6:	4639      	mov	r1, r7
    __HAL_SD_DMA_ENABLE(hsd);
 8004ee8:	f043 0308 	orr.w	r3, r3, #8
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004eec:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8004eee:	f842 3c54 	str.w	r3, [r2, #-84]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004ef2:	08b3      	lsrs	r3, r6, #2
 8004ef4:	f7fd fad4 	bl	80024a0 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295
    SDMMC_ConfigData(hsd->Instance, &config);
 8004efc:	4669      	mov	r1, sp
 8004efe:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004f00:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f02:	9504      	str	r5, [sp, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f04:	e88d 0048 	stmia.w	sp, {r3, r6}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f08:	2390      	movs	r3, #144	; 0x90
 8004f0a:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f10:	f001 fb66 	bl	80065e0 <SDMMC_ConfigData>
    return HAL_OK;
 8004f14:	4628      	mov	r0, r5
 8004f16:	e795      	b.n	8004e44 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 8004f18:	2002      	movs	r0, #2
 8004f1a:	e793      	b.n	8004e44 <HAL_SD_WriteBlocks_DMA+0x18>
 8004f1c:	08004c51 	.word	0x08004c51
 8004f20:	0800548f 	.word	0x0800548f

08004f24 <HAL_SD_ErrorCallback>:
 8004f24:	4770      	bx	lr

08004f26 <SD_DMAReceiveCplt>:
{
 8004f26:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f28:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f2c:	2b82      	cmp	r3, #130	; 0x82
 8004f2e:	d109      	bne.n	8004f44 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	f001 fbe1 	bl	80066f8 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f36:	b128      	cbz	r0, 8004f44 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8004f38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f3a:	4318      	orrs	r0, r3
 8004f3c:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004f44:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 8004f46:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4a:	f022 0208 	bic.w	r2, r2, #8
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f50:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8004f5c:	f002 f902 	bl	8007164 <HAL_SD_RxCpltCallback>
 8004f60:	bd10      	pop	{r4, pc}

08004f62 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004f62:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004f64:	0f9a      	lsrs	r2, r3, #30
 8004f66:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004f68:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8004f6c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8004f6e:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8004f72:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8004f74:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004f78:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8004f7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004f7e:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8004f80:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004f82:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004f84:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004f86:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8004f88:	0112      	lsls	r2, r2, #4
 8004f8a:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004f8c:	88ca      	ldrh	r2, [r1, #6]
{
 8004f8e:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004f90:	b292      	uxth	r2, r2
 8004f92:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8004f96:	4322      	orrs	r2, r4
 8004f98:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004f9a:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8004f9e:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8004fa0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004fa4:	09d4      	lsrs	r4, r2, #7
 8004fa6:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004fa8:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8004fac:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004fae:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8004fb2:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004fb4:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8004fb8:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004fba:	2400      	movs	r4, #0
 8004fbc:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004fbe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004fc0:	2c00      	cmp	r4, #0
 8004fc2:	f040 8083 	bne.w	80050cc <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004fc6:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 8004fc8:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004fca:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 8004fce:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004fd2:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8004fd4:	690a      	ldr	r2, [r1, #16]
 8004fd6:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004fd8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8004fda:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004fdc:	690b      	ldr	r3, [r1, #16]
 8004fde:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8004fe2:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004fe4:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8004fe8:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004fea:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8004fee:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004ff0:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8004ff4:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004ff6:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8004ffa:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004ffc:	0bd3      	lsrs	r3, r2, #15
 8004ffe:	f003 0306 	and.w	r3, r3, #6
 8005002:	760b      	strb	r3, [r1, #24]
 8005004:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8005008:	7e0c      	ldrb	r4, [r1, #24]
 800500a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800500e:	4322      	orrs	r2, r4
 8005010:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005012:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8005014:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005016:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8005018:	3402      	adds	r4, #2
 800501a:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800501c:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800501e:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8005020:	7a0d      	ldrb	r5, [r1, #8]
 8005022:	40ac      	lsls	r4, r5
 8005024:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8005026:	0a64      	lsrs	r4, r4, #9
 8005028:	4362      	muls	r2, r4
 800502a:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800502c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8005030:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8005032:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005036:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8005038:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800503a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800503e:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8005040:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005042:	7e8a      	ldrb	r2, [r1, #26]
 8005044:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800504c:	4322      	orrs	r2, r4
 800504e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005050:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8005052:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005054:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005056:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800505a:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800505c:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005060:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005062:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005066:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005068:	0d9a      	lsrs	r2, r3, #22
 800506a:	f002 020c 	and.w	r2, r2, #12
 800506e:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005070:	7fca      	ldrb	r2, [r1, #31]
 8005072:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8005074:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005076:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005078:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800507c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005080:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8005084:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005088:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800508c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005090:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8005094:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005098:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800509c:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80050a0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80050a4:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80050a8:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80050ac:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80050b0:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80050b4:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80050b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 80050bc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80050c0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80050ca:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80050cc:	2c01      	cmp	r4, #1
 80050ce:	d11a      	bne.n	8005106 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80050d6:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80050d8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 80050da:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80050dc:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 80050de:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80050e2:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80050e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80050e8:	690c      	ldr	r4, [r1, #16]
 80050ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80050ee:	4322      	orrs	r2, r4
 80050f0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80050f2:	690a      	ldr	r2, [r1, #16]
 80050f4:	0292      	lsls	r2, r2, #10
 80050f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050fa:	6542      	str	r2, [r0, #84]	; 0x54
 80050fc:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80050fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005102:	6582      	str	r2, [r0, #88]	; 0x58
 8005104:	e794      	b.n	8005030 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8005106:	6803      	ldr	r3, [r0, #0]
 8005108:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800510e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005116:	2301      	movs	r3, #1
 8005118:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800511c:	4618      	mov	r0, r3
 800511e:	bd30      	pop	{r4, r5, pc}

08005120 <HAL_SD_InitCard>:
{
 8005120:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005122:	2376      	movs	r3, #118	; 0x76
{
 8005124:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005126:	2500      	movs	r5, #0
{
 8005128:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800512a:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 800512c:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800512e:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005130:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005132:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005134:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005136:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8005138:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800513c:	ab07      	add	r3, sp, #28
 800513e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005146:	f001 f979 	bl	800643c <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	6843      	ldr	r3, [r0, #4]
 800514e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005152:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8005154:	f001 f991 	bl	800647a <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8005158:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 800515a:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 800515c:	6853      	ldr	r3, [r2, #4]
 800515e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005162:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8005164:	f7fc ff4a 	bl	8001ffc <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005168:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800516a:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800516c:	f001 faf6 	bl	800675c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005170:	4606      	mov	r6, r0
 8005172:	b968      	cbnz	r0, 8005190 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	f001 fb19 	bl	80067ac <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800517a:	b380      	cbz	r0, 80051de <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800517c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005180:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005182:	9b06      	ldr	r3, [sp, #24]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	42ab      	cmp	r3, r5
 8005188:	9206      	str	r2, [sp, #24]
 800518a:	d108      	bne.n	800519e <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800518c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8005190:	2001      	movs	r0, #1
 8005192:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005196:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005198:	430e      	orrs	r6, r1
 800519a:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 800519c:	e083      	b.n	80052a6 <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800519e:	2100      	movs	r1, #0
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	f001 fb3b 	bl	800681c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80051a6:	4601      	mov	r1, r0
 80051a8:	b110      	cbz	r0, 80051b0 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051aa:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80051ae:	e7ef      	b.n	8005190 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	f001 fb4b 	bl	800684c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80051b6:	4601      	mov	r1, r0
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1f6      	bne.n	80051aa <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	f001 f977 	bl	80064b0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 80051c2:	2800      	cmp	r0, #0
 80051c4:	dadd      	bge.n	8005182 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 80051c6:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80051c8:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 80051ca:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80051cc:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 80051ce:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80051d2:	f001 f956 	bl	8006482 <SDMMC_GetPowerState>
 80051d6:	bb20      	cbnz	r0, 8005222 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051d8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80051dc:	e06d      	b.n	80052ba <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80051de:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80051e0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 80051e4:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80051e6:	9b06      	ldr	r3, [sp, #24]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	42ab      	cmp	r3, r5
 80051ec:	9206      	str	r2, [sp, #24]
 80051ee:	d0cd      	beq.n	800518c <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80051f0:	2100      	movs	r1, #0
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	f001 fb12 	bl	800681c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80051f8:	4606      	mov	r6, r0
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d1c8      	bne.n	8005190 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80051fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	f001 fb22 	bl	800684c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005208:	4606      	mov	r6, r0
 800520a:	2800      	cmp	r0, #0
 800520c:	d1c0      	bne.n	8005190 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800520e:	4601      	mov	r1, r0
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	f001 f94d 	bl	80064b0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8005216:	2800      	cmp	r0, #0
 8005218:	dae5      	bge.n	80051e6 <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800521a:	0043      	lsls	r3, r0, #1
 800521c:	d5d3      	bpl.n	80051c6 <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800521e:	2301      	movs	r3, #1
 8005220:	e7d2      	b.n	80051c8 <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005222:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005224:	2b03      	cmp	r3, #3
 8005226:	d01a      	beq.n	800525e <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	f001 fb40 	bl	80068ae <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800522e:	4605      	mov	r5, r0
 8005230:	2800      	cmp	r0, #0
 8005232:	d142      	bne.n	80052ba <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005234:	4601      	mov	r1, r0
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	f001 f93a 	bl	80064b0 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800523c:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800523e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	f001 f935 	bl	80064b0 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005246:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005248:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800524a:	6820      	ldr	r0, [r4, #0]
 800524c:	f001 f930 	bl	80064b0 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005250:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005252:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	f001 f92b 	bl	80064b0 <SDMMC_GetResponse>
 800525a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800525e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005260:	2b03      	cmp	r3, #3
 8005262:	d122      	bne.n	80052aa <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005264:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005266:	2b03      	cmp	r3, #3
 8005268:	d12e      	bne.n	80052c8 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800526a:	2104      	movs	r1, #4
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	f001 f91f 	bl	80064b0 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005272:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8005274:	0d00      	lsrs	r0, r0, #20
 8005276:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005278:	4620      	mov	r0, r4
 800527a:	f7ff fe72 	bl	8004f62 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800527e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005280:	2300      	movs	r3, #0
 8005282:	6820      	ldr	r0, [r4, #0]
 8005284:	0412      	lsls	r2, r2, #16
 8005286:	f001 fa51 	bl	800672c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800528a:	4605      	mov	r5, r0
 800528c:	b9a8      	cbnz	r0, 80052ba <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 800528e:	f104 0310 	add.w	r3, r4, #16
 8005292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005296:	1d23      	adds	r3, r4, #4
 8005298:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a0:	f001 f8cc 	bl	800643c <SDMMC_Init>
  return HAL_OK;
 80052a4:	4628      	mov	r0, r5
}
 80052a6:	b018      	add	sp, #96	; 0x60
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80052aa:	f10d 0116 	add.w	r1, sp, #22
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	f001 fb28 	bl	8006904 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80052b4:	4605      	mov	r5, r0
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d0d4      	beq.n	8005264 <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 80052ba:	2001      	movs	r0, #1
 80052bc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052c2:	431d      	orrs	r5, r3
 80052c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80052c6:	e7ee      	b.n	80052a6 <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 80052c8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052cc:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 80052ce:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052d0:	0409      	lsls	r1, r1, #16
 80052d2:	f001 fb01 	bl	80068d8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80052d6:	4605      	mov	r5, r0
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1ee      	bne.n	80052ba <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052dc:	4601      	mov	r1, r0
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	f001 f8e6 	bl	80064b0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052e4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052e6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	f001 f8e1 	bl	80064b0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052ee:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052f0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	f001 f8dc 	bl	80064b0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052f8:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052fa:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	f001 f8d7 	bl	80064b0 <SDMMC_GetResponse>
 8005302:	6720      	str	r0, [r4, #112]	; 0x70
 8005304:	e7b1      	b.n	800526a <HAL_SD_InitCard+0x14a>

08005306 <HAL_SD_Init>:
{
 8005306:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8005308:	4604      	mov	r4, r0
 800530a:	b1a0      	cbz	r0, 8005336 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800530c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005310:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005314:	b913      	cbnz	r3, 800531c <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8005316:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005318:	f7fc f942 	bl	80015a0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800531c:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 800531e:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8005320:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8005324:	f7ff fefc 	bl	8005120 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005328:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 800532a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800532c:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800532e:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005334:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005336:	2001      	movs	r0, #1
}
 8005338:	bd10      	pop	{r4, pc}

0800533a <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800533a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800533c:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800533e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005340:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005342:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005344:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005346:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005348:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800534a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800534c:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800534e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005350:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005352:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005354:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005356:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8005358:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800535a:	61cb      	str	r3, [r1, #28]
}
 800535c:	4770      	bx	lr

0800535e <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800535e:	2303      	movs	r3, #3
{
 8005360:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005362:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8005366:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005368:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800536a:	4604      	mov	r4, r0
 800536c:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800536e:	2b03      	cmp	r3, #3
 8005370:	d002      	beq.n	8005378 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005372:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005376:	d103      	bne.n	8005380 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005378:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537e:	e056      	b.n	800542e <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005380:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005384:	d12d      	bne.n	80053e2 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8005386:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005388:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800538a:	9104      	str	r1, [sp, #16]
 800538c:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800538e:	f001 f88f 	bl	80064b0 <SDMMC_GetResponse>
 8005392:	0180      	lsls	r0, r0, #6
 8005394:	d420      	bmi.n	80053d8 <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8005396:	a904      	add	r1, sp, #16
 8005398:	4620      	mov	r0, r4
 800539a:	f7ff fc60 	bl	8004c5e <SD_FindSCR>
  if(errorstate != HAL_OK)
 800539e:	b960      	cbnz	r0, 80053ba <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053a0:	9b05      	ldr	r3, [sp, #20]
 80053a2:	0359      	lsls	r1, r3, #13
 80053a4:	d51a      	bpl.n	80053dc <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80053a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80053a8:	6820      	ldr	r0, [r4, #0]
 80053aa:	0409      	lsls	r1, r1, #16
 80053ac:	f001 fa36 	bl	800681c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80053b0:	b918      	cbnz	r0, 80053ba <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80053b2:	2102      	movs	r1, #2
 80053b4:	6820      	ldr	r0, [r4, #0]
 80053b6:	f001 fb29 	bl	8006a0c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80053ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053bc:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80053be:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80053c0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	d035      	beq.n	8005432 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 80053cc:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80053d4:	b00a      	add	sp, #40	; 0x28
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053d8:	4630      	mov	r0, r6
 80053da:	e7ee      	b.n	80053ba <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053dc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80053e0:	e7eb      	b.n	80053ba <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80053e2:	bb09      	cbnz	r1, 8005428 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053e4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80053e6:	9104      	str	r1, [sp, #16]
 80053e8:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053ea:	f001 f861 	bl	80064b0 <SDMMC_GetResponse>
 80053ee:	0182      	lsls	r2, r0, #6
 80053f0:	d414      	bmi.n	800541c <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80053f2:	a904      	add	r1, sp, #16
 80053f4:	4620      	mov	r0, r4
 80053f6:	f7ff fc32 	bl	8004c5e <SD_FindSCR>
  if(errorstate != HAL_OK)
 80053fa:	b960      	cbnz	r0, 8005416 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053fc:	9b05      	ldr	r3, [sp, #20]
 80053fe:	03db      	lsls	r3, r3, #15
 8005400:	d50f      	bpl.n	8005422 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005402:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	0409      	lsls	r1, r1, #16
 8005408:	f001 fa08 	bl	800681c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800540c:	b918      	cbnz	r0, 8005416 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800540e:	4601      	mov	r1, r0
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	f001 fafb 	bl	8006a0c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005418:	4308      	orrs	r0, r1
 800541a:	e7d0      	b.n	80053be <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800541c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005420:	e7f9      	b.n	8005416 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005422:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005426:	e7f6      	b.n	8005416 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005428:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800542a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800542e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005430:	e7c6      	b.n	80053c0 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005432:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 8005434:	9607      	str	r6, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005436:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005438:	68a3      	ldr	r3, [r4, #8]
 800543a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800543c:	68e3      	ldr	r3, [r4, #12]
 800543e:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005440:	6963      	ldr	r3, [r4, #20]
 8005442:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005444:	69a3      	ldr	r3, [r4, #24]
 8005446:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 8005448:	ab0a      	add	r3, sp, #40	; 0x28
 800544a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800544e:	ab04      	add	r3, sp, #16
 8005450:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005458:	f000 fff0 	bl	800643c <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800545c:	2301      	movs	r3, #1
  return HAL_OK;
 800545e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8005460:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005464:	e7b6      	b.n	80053d4 <HAL_SD_ConfigWideBusOperation+0x76>

08005466 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005466:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8005468:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800546a:	0409      	lsls	r1, r1, #16
{
 800546c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800546e:	6800      	ldr	r0, [r0, #0]
 8005470:	f001 fa9c 	bl	80069ac <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8005474:	4601      	mov	r1, r0
 8005476:	b928      	cbnz	r0, 8005484 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	f001 f819 	bl	80064b0 <SDMMC_GetResponse>
  return cardstate;
 800547e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8005482:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8005484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8005486:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 8005488:	4319      	orrs	r1, r3
 800548a:	63a1      	str	r1, [r4, #56]	; 0x38
 800548c:	e7f7      	b.n	800547e <HAL_SD_GetCardState+0x18>

0800548e <SD_DMAError>:
{
 800548e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005490:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005492:	f7fd f842 	bl	800251a <HAL_DMA_GetError>
 8005496:	2802      	cmp	r0, #2
 8005498:	d026      	beq.n	80054e8 <SD_DMAError+0x5a>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800549a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d003      	beq.n	80054aa <SD_DMAError+0x1c>
 80054a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d11b      	bne.n	80054e2 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
      CardState = HAL_SD_GetCardState(hsd);
 80054b0:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80054b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c2:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80054c4:	f7ff ffcf 	bl	8005466 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80054c8:	3805      	subs	r0, #5
 80054ca:	b2c0      	uxtb	r0, r0
 80054cc:	2801      	cmp	r0, #1
 80054ce:	d805      	bhi.n	80054dc <SD_DMAError+0x4e>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	f001 f911 	bl	80066f8 <SDMMC_CmdStopTransfer>
 80054d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054d8:	4318      	orrs	r0, r3
 80054da:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80054dc:	2301      	movs	r3, #1
 80054de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 80054e2:	4620      	mov	r0, r4
 80054e4:	f7ff fd1e 	bl	8004f24 <HAL_SD_ErrorCallback>
 80054e8:	bd10      	pop	{r4, pc}

080054ea <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80054ea:	b538      	push	{r3, r4, r5, lr}
 80054ec:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80054ee:	4604      	mov	r4, r0
 80054f0:	b1c8      	cbz	r0, 8005526 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80054f2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80054f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054fa:	b91b      	cbnz	r3, 8005504 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80054fc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005500:	f7fb fa66 	bl	80009d0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005504:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005506:	1d21      	adds	r1, r4, #4
 8005508:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800550a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800550e:	f000 fec5 	bl	800629c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	4629      	mov	r1, r5
 8005516:	6820      	ldr	r0, [r4, #0]
 8005518:	f000 feff 	bl	800631a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800551c:	2301      	movs	r3, #1
  
  return HAL_OK;
 800551e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005520:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005524:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005526:	2001      	movs	r0, #1
}
 8005528:	bd38      	pop	{r3, r4, r5, pc}

0800552a <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800552a:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800552c:	4604      	mov	r4, r0
 800552e:	2800      	cmp	r0, #0
 8005530:	d030      	beq.n	8005594 <HAL_SPDIFRX_Init+0x6a>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8005532:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8005536:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800553a:	b91b      	cbnz	r3, 8005544 <HAL_SPDIFRX_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800553c:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8005540:	f7fc f894 	bl	800166c <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005544:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005546:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8005548:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800554a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 800554e:	680b      	ldr	r3, [r1, #0]
 8005550:	f023 0303 	bic.w	r3, r3, #3
 8005554:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8005556:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 8005558:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 800555a:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 800555c:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800555e:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 8005562:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8005564:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005566:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 800556a:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 800556c:	6920      	ldr	r0, [r4, #16]
 800556e:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8005570:	6960      	ldr	r0, [r4, #20]
 8005572:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8005574:	69e0      	ldr	r0, [r4, #28]
 8005576:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8005578:	6a20      	ldr	r0, [r4, #32]
 800557a:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 800557c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800557e:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8005580:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005582:	4303      	orrs	r3, r0
             );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8005584:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 8005586:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 8005588:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800558a:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800558c:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800558e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
 8005592:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005594:	2001      	movs	r0, #1
}
 8005596:	bd10      	pop	{r4, pc}

08005598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005598:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800559a:	4604      	mov	r4, r0
 800559c:	2800      	cmp	r0, #0
 800559e:	d04e      	beq.n	800563e <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055a4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80055a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055ac:	b91b      	cbnz	r3, 80055b6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ae:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b2:	f7fc f8af 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055b8:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ba:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80055bc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80055c0:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055c2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80055c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ca:	600b      	str	r3, [r1, #0]
 80055cc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055d0:	d932      	bls.n	8005638 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055d2:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055d4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d8:	bf18      	it	ne
 80055da:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80055dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055de:	b92b      	cbnz	r3, 80055ec <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80055e4:	bf8c      	ite	hi
 80055e6:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80055e8:	2301      	movls	r3, #1
 80055ea:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80055ec:	68a6      	ldr	r6, [r4, #8]
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	69a5      	ldr	r5, [r4, #24]
 80055f2:	4333      	orrs	r3, r6
 80055f4:	6926      	ldr	r6, [r4, #16]
 80055f6:	4333      	orrs	r3, r6
 80055f8:	6966      	ldr	r6, [r4, #20]
 80055fa:	4333      	orrs	r3, r6
 80055fc:	69e6      	ldr	r6, [r4, #28]
 80055fe:	4333      	orrs	r3, r6
 8005600:	6a26      	ldr	r6, [r4, #32]
 8005602:	4333      	orrs	r3, r6
 8005604:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005606:	4333      	orrs	r3, r6
 8005608:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800560c:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800560e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005610:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005614:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005618:	431a      	orrs	r2, r3
 800561a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800561c:	431a      	orrs	r2, r3
 800561e:	432a      	orrs	r2, r5
 8005620:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005622:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005624:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005626:	69cb      	ldr	r3, [r1, #28]
 8005628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800562c:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800562e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005630:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005632:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8005636:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005638:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800563c:	e7cc      	b.n	80055d8 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800563e:	2001      	movs	r0, #1
}
 8005640:	bd70      	pop	{r4, r5, r6, pc}
	...

08005644 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005644:	6a03      	ldr	r3, [r0, #32]
 8005646:	f023 0301 	bic.w	r3, r3, #1
{
 800564a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005652:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005654:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8005658:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800565a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800565e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005662:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005664:	688d      	ldr	r5, [r1, #8]
 8005666:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005668:	4d0e      	ldr	r5, [pc, #56]	; (80056a4 <TIM_OC1_SetConfig+0x60>)
 800566a:	42a8      	cmp	r0, r5
 800566c:	d002      	beq.n	8005674 <TIM_OC1_SetConfig+0x30>
 800566e:	4e0e      	ldr	r6, [pc, #56]	; (80056a8 <TIM_OC1_SetConfig+0x64>)
 8005670:	42b0      	cmp	r0, r6
 8005672:	d111      	bne.n	8005698 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005674:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005678:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567a:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800567c:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005680:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005684:	d002      	beq.n	800568c <TIM_OC1_SetConfig+0x48>
 8005686:	4d08      	ldr	r5, [pc, #32]	; (80056a8 <TIM_OC1_SetConfig+0x64>)
 8005688:	42a8      	cmp	r0, r5
 800568a:	d105      	bne.n	8005698 <TIM_OC1_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800568c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005692:	698e      	ldr	r6, [r1, #24]
 8005694:	4335      	orrs	r5, r6
 8005696:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800569a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800569c:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800569e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a0:	6203      	str	r3, [r0, #32]
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40010400 	.word	0x40010400

080056ac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ac:	6a03      	ldr	r3, [r0, #32]
 80056ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80056b2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ba:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80056c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056c2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80056c6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80056ca:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056cc:	688d      	ldr	r5, [r1, #8]
 80056ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056d2:	4d11      	ldr	r5, [pc, #68]	; (8005718 <TIM_OC3_SetConfig+0x6c>)
 80056d4:	42a8      	cmp	r0, r5
 80056d6:	d003      	beq.n	80056e0 <TIM_OC3_SetConfig+0x34>
 80056d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056dc:	42a8      	cmp	r0, r5
 80056de:	d114      	bne.n	800570a <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80056e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ea:	4d0b      	ldr	r5, [pc, #44]	; (8005718 <TIM_OC3_SetConfig+0x6c>)
 80056ec:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f2:	d003      	beq.n	80056fc <TIM_OC3_SetConfig+0x50>
 80056f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056f8:	42a8      	cmp	r0, r5
 80056fa:	d106      	bne.n	800570a <TIM_OC3_SetConfig+0x5e>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056fc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005702:	698e      	ldr	r6, [r1, #24]
 8005704:	4335      	orrs	r5, r6
 8005706:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800570c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800570e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005710:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005712:	6203      	str	r3, [r0, #32]
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000

0800571c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800571c:	6a03      	ldr	r3, [r0, #32]
 800571e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8005722:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005724:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572a:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800572c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005730:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005736:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800573e:	688d      	ldr	r5, [r1, #8]
 8005740:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	4d08      	ldr	r5, [pc, #32]	; (8005768 <TIM_OC4_SetConfig+0x4c>)
 8005746:	42a8      	cmp	r0, r5
 8005748:	d003      	beq.n	8005752 <TIM_OC4_SetConfig+0x36>
 800574a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800574e:	42a8      	cmp	r0, r5
 8005750:	d104      	bne.n	800575c <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005752:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005756:	694d      	ldr	r5, [r1, #20]
 8005758:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005760:	684b      	ldr	r3, [r1, #4]
 8005762:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005764:	6202      	str	r2, [r0, #32]
 8005766:	bd30      	pop	{r4, r5, pc}
 8005768:	40010000 	.word	0x40010000

0800576c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800576c:	6a03      	ldr	r3, [r0, #32]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8005772:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005774:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800577a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800577c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8005780:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800578a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800578c:	688d      	ldr	r5, [r1, #8]
 800578e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005792:	4d09      	ldr	r5, [pc, #36]	; (80057b8 <TIM_OC5_SetConfig+0x4c>)
 8005794:	42a8      	cmp	r0, r5
 8005796:	d003      	beq.n	80057a0 <TIM_OC5_SetConfig+0x34>
 8005798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800579c:	42a8      	cmp	r0, r5
 800579e:	d104      	bne.n	80057aa <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057a0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057a4:	694d      	ldr	r5, [r1, #20]
 80057a6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057ac:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ae:	684b      	ldr	r3, [r1, #4]
 80057b0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b2:	6202      	str	r2, [r0, #32]
 80057b4:	bd30      	pop	{r4, r5, pc}
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000

080057bc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057bc:	6a03      	ldr	r3, [r0, #32]
 80057be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80057c2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057cc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057de:	688d      	ldr	r5, [r1, #8]
 80057e0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	4d08      	ldr	r5, [pc, #32]	; (8005808 <TIM_OC6_SetConfig+0x4c>)
 80057e6:	42a8      	cmp	r0, r5
 80057e8:	d003      	beq.n	80057f2 <TIM_OC6_SetConfig+0x36>
 80057ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057ee:	42a8      	cmp	r0, r5
 80057f0:	d104      	bne.n	80057fc <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057f2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057f6:	694d      	ldr	r5, [r1, #20]
 80057f8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057fe:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005800:	684b      	ldr	r3, [r1, #4]
 8005802:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	6202      	str	r2, [r0, #32]
 8005806:	bd30      	pop	{r4, r5, pc}
 8005808:	40010000 	.word	0x40010000

0800580c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800580c:	6803      	ldr	r3, [r0, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005816:	4a07      	ldr	r2, [pc, #28]	; (8005834 <HAL_TIM_Base_Start_IT+0x28>)
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581c:	2a06      	cmp	r2, #6
 800581e:	d006      	beq.n	800582e <HAL_TIM_Base_Start_IT+0x22>
 8005820:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005824:	d003      	beq.n	800582e <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	2000      	movs	r0, #0
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	00010007 	.word	0x00010007

08005838 <HAL_TIM_OC_DelayElapsedCallback>:
 8005838:	4770      	bx	lr

0800583a <HAL_TIM_IC_CaptureCallback>:
 800583a:	4770      	bx	lr

0800583c <HAL_TIM_PWM_PulseFinishedCallback>:
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_TriggerCallback>:
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005840:	6803      	ldr	r3, [r0, #0]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	0791      	lsls	r1, r2, #30
{
 8005846:	b510      	push	{r4, lr}
 8005848:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800584a:	d50f      	bpl.n	800586c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	0792      	lsls	r2, r2, #30
 8005850:	d50c      	bpl.n	800586c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005852:	f06f 0202 	mvn.w	r2, #2
 8005856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005858:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800585a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800585e:	0799      	lsls	r1, r3, #30
 8005860:	f000 8085 	beq.w	800596e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005864:	f7ff ffe9 	bl	800583a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005868:	2300      	movs	r3, #0
 800586a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	0752      	lsls	r2, r2, #29
 8005872:	d510      	bpl.n	8005896 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	0750      	lsls	r0, r2, #29
 8005878:	d50d      	bpl.n	8005896 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800587a:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005882:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005884:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005886:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005888:	f413 7f40 	tst.w	r3, #768	; 0x300
 800588c:	d075      	beq.n	800597a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800588e:	f7ff ffd4 	bl	800583a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	2300      	movs	r3, #0
 8005894:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	0711      	lsls	r1, r2, #28
 800589c:	d50f      	bpl.n	80058be <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	0712      	lsls	r2, r2, #28
 80058a2:	d50c      	bpl.n	80058be <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058a4:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80058a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ac:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b2:	079b      	lsls	r3, r3, #30
 80058b4:	d067      	beq.n	8005986 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	f7ff ffc0 	bl	800583a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	2300      	movs	r3, #0
 80058bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	06d0      	lsls	r0, r2, #27
 80058c4:	d510      	bpl.n	80058e8 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	06d1      	lsls	r1, r2, #27
 80058ca:	d50d      	bpl.n	80058e8 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058cc:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80058d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058da:	f413 7f40 	tst.w	r3, #768	; 0x300
 80058de:	d058      	beq.n	8005992 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80058e0:	f7ff ffab 	bl	800583a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e4:	2300      	movs	r3, #0
 80058e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	07d2      	lsls	r2, r2, #31
 80058ee:	d508      	bpl.n	8005902 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	07d0      	lsls	r0, r2, #31
 80058f4:	d505      	bpl.n	8005902 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058f6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fe:	f7fb fc7f 	bl	8001200 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	0611      	lsls	r1, r2, #24
 8005908:	d508      	bpl.n	800591c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	0612      	lsls	r2, r2, #24
 800590e:	d505      	bpl.n	800591c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005910:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005914:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005916:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005918:	f000 faa7 	bl	8005e6a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	05d0      	lsls	r0, r2, #23
 8005922:	d508      	bpl.n	8005936 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	0611      	lsls	r1, r2, #24
 8005928:	d505      	bpl.n	8005936 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800592a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800592e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005930:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005932:	f000 fa9b 	bl	8005e6c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	0652      	lsls	r2, r2, #25
 800593c:	d508      	bpl.n	8005950 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	0650      	lsls	r0, r2, #25
 8005942:	d505      	bpl.n	8005950 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005944:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8005948:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800594a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800594c:	f7ff ff77 	bl	800583e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	0691      	lsls	r1, r2, #26
 8005956:	d522      	bpl.n	800599e <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	0692      	lsls	r2, r2, #26
 800595c:	d51f      	bpl.n	800599e <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800595e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005962:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005964:	611a      	str	r2, [r3, #16]
}
 8005966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800596a:	f000 ba7d 	b.w	8005e68 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	f7ff ff63 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005972:	4620      	mov	r0, r4
 8005974:	f7ff ff62 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
 8005978:	e776      	b.n	8005868 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	f7ff ff5d 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff ff5c 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
 8005984:	e785      	b.n	8005892 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	f7ff ff57 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff ff56 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
 8005990:	e793      	b.n	80058ba <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	f7ff ff51 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005996:	4620      	mov	r0, r4
 8005998:	f7ff ff50 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
 800599c:	e7a2      	b.n	80058e4 <HAL_TIM_IRQHandler+0xa4>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a0:	4a30      	ldr	r2, [pc, #192]	; (8005a64 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80059a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a4:	4290      	cmp	r0, r2
 80059a6:	d012      	beq.n	80059ce <TIM_Base_SetConfig+0x2e>
 80059a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80059ac:	d00f      	beq.n	80059ce <TIM_Base_SetConfig+0x2e>
 80059ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80059b2:	4290      	cmp	r0, r2
 80059b4:	d00b      	beq.n	80059ce <TIM_Base_SetConfig+0x2e>
 80059b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ba:	4290      	cmp	r0, r2
 80059bc:	d007      	beq.n	80059ce <TIM_Base_SetConfig+0x2e>
 80059be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059c2:	4290      	cmp	r0, r2
 80059c4:	d003      	beq.n	80059ce <TIM_Base_SetConfig+0x2e>
 80059c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80059ca:	4290      	cmp	r0, r2
 80059cc:	d119      	bne.n	8005a02 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80059ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d6:	4a23      	ldr	r2, [pc, #140]	; (8005a64 <TIM_Base_SetConfig+0xc4>)
 80059d8:	4290      	cmp	r0, r2
 80059da:	d029      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 80059dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80059e0:	d026      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 80059e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80059e6:	4290      	cmp	r0, r2
 80059e8:	d022      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 80059ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ee:	4290      	cmp	r0, r2
 80059f0:	d01e      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 80059f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059f6:	4290      	cmp	r0, r2
 80059f8:	d01a      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 80059fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80059fe:	4290      	cmp	r0, r2
 8005a00:	d016      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 8005a02:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <TIM_Base_SetConfig+0xc8>)
 8005a04:	4290      	cmp	r0, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 8005a08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a0c:	4290      	cmp	r0, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 8005a10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a14:	4290      	cmp	r0, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 8005a18:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005a1c:	4290      	cmp	r0, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 8005a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a24:	4290      	cmp	r0, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x90>
 8005a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a2c:	4290      	cmp	r0, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a34:	68ca      	ldr	r2, [r1, #12]
 8005a36:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a38:	694a      	ldr	r2, [r1, #20]
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a3e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005a40:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a42:	688b      	ldr	r3, [r1, #8]
 8005a44:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a46:	680b      	ldr	r3, [r1, #0]
 8005a48:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <TIM_Base_SetConfig+0xc4>)
 8005a4c:	4298      	cmp	r0, r3
 8005a4e:	d003      	beq.n	8005a58 <TIM_Base_SetConfig+0xb8>
 8005a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a54:	4298      	cmp	r0, r3
 8005a56:	d101      	bne.n	8005a5c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005a58:	690b      	ldr	r3, [r1, #16]
 8005a5a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	6143      	str	r3, [r0, #20]
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40014000 	.word	0x40014000

08005a6c <HAL_TIM_Base_Init>:
{
 8005a6c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005a6e:	4604      	mov	r4, r0
 8005a70:	b1a0      	cbz	r0, 8005a9c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a7a:	b91b      	cbnz	r3, 8005a84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005a7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005a80:	f7fb ff7e 	bl	8001980 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8e:	f7ff ff87 	bl	80059a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005a92:	2301      	movs	r3, #1
  return HAL_OK;
 8005a94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a9c:	2001      	movs	r0, #1
}
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <HAL_TIM_PWM_Init>:
{
 8005aa0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	b1a0      	cbz	r0, 8005ad0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005aaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005aae:	b91b      	cbnz	r3, 8005ab8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005ab0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005ab4:	f7fb ffb8 	bl	8001a28 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8005abe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac2:	f7ff ff6d 	bl	80059a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005ac6:	2301      	movs	r3, #1
  return HAL_OK;
 8005ac8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ace:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005ad0:	2001      	movs	r0, #1
}
 8005ad2:	bd10      	pop	{r4, pc}

08005ad4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad4:	6a03      	ldr	r3, [r0, #32]
 8005ad6:	f023 0310 	bic.w	r3, r3, #16
{
 8005ada:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005adc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005ade:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005ae0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aea:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8005aee:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af6:	688d      	ldr	r5, [r1, #8]
 8005af8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005afc:	4d10      	ldr	r5, [pc, #64]	; (8005b40 <TIM_OC2_SetConfig+0x6c>)
 8005afe:	42a8      	cmp	r0, r5
 8005b00:	d003      	beq.n	8005b0a <TIM_OC2_SetConfig+0x36>
 8005b02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b06:	42a8      	cmp	r0, r5
 8005b08:	d114      	bne.n	8005b34 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b0a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b14:	4d0a      	ldr	r5, [pc, #40]	; (8005b40 <TIM_OC2_SetConfig+0x6c>)
 8005b16:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC2_SetConfig+0x52>
 8005b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b22:	42a8      	cmp	r0, r5
 8005b24:	d106      	bne.n	8005b34 <TIM_OC2_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b26:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b2c:	698e      	ldr	r6, [r1, #24]
 8005b2e:	4335      	orrs	r5, r6
 8005b30:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005b34:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005b36:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005b38:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005b3a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005b3c:	6203      	str	r3, [r0, #32]
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	40010000 	.word	0x40010000

08005b44 <HAL_TIM_PWM_ConfigChannel>:
{
 8005b44:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005b46:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d010      	beq.n	8005b74 <HAL_TIM_PWM_ConfigChannel+0x30>
 8005b52:	2301      	movs	r3, #1
  switch (Channel)
 8005b54:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8005b56:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005b5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8005b5e:	d043      	beq.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8005b60:	d809      	bhi.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005b62:	b1fa      	cbz	r2, 8005ba4 <HAL_TIM_PWM_ConfigChannel+0x60>
 8005b64:	2a04      	cmp	r2, #4
 8005b66:	d02e      	beq.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005b6a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b70:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005b76:	2a10      	cmp	r2, #16
 8005b78:	d047      	beq.n	8005c0a <HAL_TIM_PWM_ConfigChannel+0xc6>
 8005b7a:	2a14      	cmp	r2, #20
 8005b7c:	d056      	beq.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0xe8>
 8005b7e:	2a0c      	cmp	r2, #12
 8005b80:	d1f2      	bne.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b82:	6820      	ldr	r0, [r4, #0]
 8005b84:	f7ff fdca 	bl	800571c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b88:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b8a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ba2:	e030      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	f7ff fd4d 	bl	8005644 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005baa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	f042 0208 	orr.w	r2, r2, #8
 8005bb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bb6:	699a      	ldr	r2, [r3, #24]
 8005bb8:	f022 0204 	bic.w	r2, r2, #4
 8005bbc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bc2:	619a      	str	r2, [r3, #24]
      break;
 8005bc4:	e7d0      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc6:	6820      	ldr	r0, [r4, #0]
 8005bc8:	f7ff ff84 	bl	8005ad4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bcc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005be6:	e7ec      	b.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	f7ff fd5f 	bl	80056ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bf0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	f042 0208 	orr.w	r2, r2, #8
 8005bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	f022 0204 	bic.w	r2, r2, #4
 8005c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c06:	61da      	str	r2, [r3, #28]
      break;
 8005c08:	e7ae      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c0a:	6820      	ldr	r0, [r4, #0]
 8005c0c:	f7ff fdae 	bl	800576c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c10:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c12:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1e:	f022 0204 	bic.w	r2, r2, #4
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c26:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c2a:	e79d      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	f7ff fdc5 	bl	80057bc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c32:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c34:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c44:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c4c:	e7ec      	b.n	8005c28 <HAL_TIM_PWM_ConfigChannel+0xe4>

08005c4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c4e:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8005c52:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c54:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c58:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c5c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	6083      	str	r3, [r0, #8]
 8005c60:	bd10      	pop	{r4, pc}
	...

08005c64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005c64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
{
 8005c6a:	b570      	push	{r4, r5, r6, lr}
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005c72:	d017      	beq.n	8005ca4 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005c78:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8005c7a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005c7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c82:	4b41      	ldr	r3, [pc, #260]	; (8005d88 <HAL_TIM_ConfigClockSource+0x124>)
 8005c84:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005c86:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005c88:	680b      	ldr	r3, [r1, #0]
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d065      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xf6>
 8005c8e:	d815      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x58>
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d00c      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x4a>
 8005c94:	d807      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x42>
 8005c96:	b153      	cbz	r3, 8005cae <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005c9a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005ca0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005ca4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d001      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x4a>
 8005caa:	2b30      	cmp	r3, #48	; 0x30
 8005cac:	d1f4      	bne.n	8005c98 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8005cae:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cb0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	e01a      	b.n	8005cf2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8005cbc:	2b60      	cmp	r3, #96	; 0x60
 8005cbe:	d034      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0xc6>
 8005cc0:	d819      	bhi.n	8005cf6 <HAL_TIM_ConfigClockSource+0x92>
 8005cc2:	2b50      	cmp	r3, #80	; 0x50
 8005cc4:	d1e8      	bne.n	8005c98 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc6:	684a      	ldr	r2, [r1, #4]
 8005cc8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005cca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ccc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cce:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd2:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8005cd6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cda:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005ce4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005ce6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005ce8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cee:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005cf2:	6083      	str	r3, [r0, #8]
 8005cf4:	e7d0      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8005cf6:	2b70      	cmp	r3, #112	; 0x70
 8005cf8:	d00c      	beq.n	8005d14 <HAL_TIM_ConfigClockSource+0xb0>
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	d1cb      	bne.n	8005c98 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8005d00:	68cb      	ldr	r3, [r1, #12]
 8005d02:	684a      	ldr	r2, [r1, #4]
 8005d04:	6889      	ldr	r1, [r1, #8]
 8005d06:	f7ff ffa2 	bl	8005c4e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d0a:	6822      	ldr	r2, [r4, #0]
 8005d0c:	6893      	ldr	r3, [r2, #8]
 8005d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d12:	e008      	b.n	8005d26 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8005d14:	68cb      	ldr	r3, [r1, #12]
 8005d16:	684a      	ldr	r2, [r1, #4]
 8005d18:	6889      	ldr	r1, [r1, #8]
 8005d1a:	f7ff ff98 	bl	8005c4e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d26:	6093      	str	r3, [r2, #8]
      break;
 8005d28:	e7b6      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2a:	684d      	ldr	r5, [r1, #4]
 8005d2c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2e:	6a01      	ldr	r1, [r0, #32]
 8005d30:	f021 0110 	bic.w	r1, r1, #16
 8005d34:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d36:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005d38:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d42:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d46:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005d4e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d54:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005d58:	e7cb      	b.n	8005cf2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	684a      	ldr	r2, [r1, #4]
 8005d5c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005d5e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d60:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d62:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8005d6a:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d74:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005d78:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005d7a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005d7c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d82:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005d86:	e7b4      	b.n	8005cf2 <HAL_TIM_ConfigClockSource+0x8e>
 8005d88:	fffe0088 	.word	0xfffe0088

08005d8c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	f04f 0302 	mov.w	r3, #2
{
 8005d96:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005d98:	d01f      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d9a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d9c:	4d10      	ldr	r5, [pc, #64]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da2:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005da4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005da6:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da8:	d003      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8005daa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dae:	42aa      	cmp	r2, r5
 8005db0:	d103      	bne.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005db2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db6:	684d      	ldr	r5, [r1, #4]
 8005db8:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dba:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc0:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc6:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc8:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dca:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8005dce:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005dda:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005ddc:	bd30      	pop	{r4, r5, pc}
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000

08005de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005de8:	2b01      	cmp	r3, #1
{
 8005dea:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8005dec:	d038      	beq.n	8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dee:	68cb      	ldr	r3, [r1, #12]
 8005df0:	688a      	ldr	r2, [r1, #8]
 8005df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005df6:	4c1b      	ldr	r4, [pc, #108]	; (8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005df8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dfa:	684a      	ldr	r2, [r1, #4]
 8005dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e02:	680a      	ldr	r2, [r1, #0]
 8005e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e0a:	690a      	ldr	r2, [r1, #16]
 8005e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e12:	694a      	ldr	r2, [r1, #20]
 8005e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e18:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e1a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e22:	698a      	ldr	r2, [r1, #24]
 8005e24:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005e28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e2c:	6802      	ldr	r2, [r0, #0]
 8005e2e:	42a2      	cmp	r2, r4
 8005e30:	d003      	beq.n	8005e3a <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8005e32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005e36:	42a2      	cmp	r2, r4
 8005e38:	d10c      	bne.n	8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e3a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005e3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e40:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e44:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e46:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e4c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e52:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e54:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e56:	2300      	movs	r3, #0
 8005e58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8005e60:	2002      	movs	r0, #2
}
 8005e62:	bd10      	pop	{r4, pc}
 8005e64:	40010000 	.word	0x40010000

08005e68 <HAL_TIMEx_CommutCallback>:
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIMEx_BreakCallback>:
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e6c:	4770      	bx	lr
	...

08005e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e70:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e72:	69c2      	ldr	r2, [r0, #28]
{
 8005e74:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e76:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e78:	6881      	ldr	r1, [r0, #8]
 8005e7a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e7c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e7e:	4301      	orrs	r1, r0
 8005e80:	6960      	ldr	r0, [r4, #20]
 8005e82:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e84:	4890      	ldr	r0, [pc, #576]	; (80060c8 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e86:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e88:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8005e8a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e8c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e90:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e92:	6859      	ldr	r1, [r3, #4]
 8005e94:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005e98:	4301      	orrs	r1, r0
 8005e9a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e9c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e9e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005ea0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ea2:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8005ea6:	4301      	orrs	r1, r0
 8005ea8:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eaa:	4988      	ldr	r1, [pc, #544]	; (80060cc <UART_SetConfig+0x25c>)
 8005eac:	428b      	cmp	r3, r1
 8005eae:	d117      	bne.n	8005ee0 <UART_SetConfig+0x70>
 8005eb0:	4b87      	ldr	r3, [pc, #540]	; (80060d0 <UART_SetConfig+0x260>)
 8005eb2:	4988      	ldr	r1, [pc, #544]	; (80060d4 <UART_SetConfig+0x264>)
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ebc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005ec0:	5ccb      	ldrb	r3, [r1, r3]
 8005ec2:	d129      	bne.n	8005f18 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	f200 809d 	bhi.w	8006004 <UART_SetConfig+0x194>
 8005eca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ece:	008c      	.short	0x008c
 8005ed0:	00ee00e8 	.word	0x00ee00e8
 8005ed4:	00fa009b 	.word	0x00fa009b
 8005ed8:	009b009b 	.word	0x009b009b
 8005edc:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ee0:	497d      	ldr	r1, [pc, #500]	; (80060d8 <UART_SetConfig+0x268>)
 8005ee2:	428b      	cmp	r3, r1
 8005ee4:	d106      	bne.n	8005ef4 <UART_SetConfig+0x84>
 8005ee6:	4b7a      	ldr	r3, [pc, #488]	; (80060d0 <UART_SetConfig+0x260>)
 8005ee8:	497c      	ldr	r1, [pc, #496]	; (80060dc <UART_SetConfig+0x26c>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	e7e3      	b.n	8005ebc <UART_SetConfig+0x4c>
 8005ef4:	497a      	ldr	r1, [pc, #488]	; (80060e0 <UART_SetConfig+0x270>)
 8005ef6:	428b      	cmp	r3, r1
 8005ef8:	d11d      	bne.n	8005f36 <UART_SetConfig+0xc6>
 8005efa:	4b75      	ldr	r3, [pc, #468]	; (80060d0 <UART_SetConfig+0x260>)
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	f000 80d9 	beq.w	80060bc <UART_SetConfig+0x24c>
 8005f0a:	d80e      	bhi.n	8005f2a <UART_SetConfig+0xba>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d067      	beq.n	8005fe0 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005f14:	d076      	beq.n	8006004 <UART_SetConfig+0x194>
 8005f16:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d873      	bhi.n	8006004 <UART_SetConfig+0x194>
 8005f1c:	e8df f003 	tbb	[pc, r3]
 8005f20:	72a29f99 	.word	0x72a29f99
 8005f24:	727272b4 	.word	0x727272b4
 8005f28:	b7          	.byte	0xb7
 8005f29:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	f000 80ba 	beq.w	80060a4 <UART_SetConfig+0x234>
 8005f30:	2b30      	cmp	r3, #48	; 0x30
 8005f32:	d03f      	beq.n	8005fb4 <UART_SetConfig+0x144>
 8005f34:	e7ec      	b.n	8005f10 <UART_SetConfig+0xa0>
 8005f36:	496b      	ldr	r1, [pc, #428]	; (80060e4 <UART_SetConfig+0x274>)
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	d10d      	bne.n	8005f58 <UART_SetConfig+0xe8>
 8005f3c:	4b64      	ldr	r3, [pc, #400]	; (80060d0 <UART_SetConfig+0x260>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	f000 80b8 	beq.w	80060bc <UART_SetConfig+0x24c>
 8005f4c:	d9de      	bls.n	8005f0c <UART_SetConfig+0x9c>
 8005f4e:	2b80      	cmp	r3, #128	; 0x80
 8005f50:	f000 80a8 	beq.w	80060a4 <UART_SetConfig+0x234>
 8005f54:	2bc0      	cmp	r3, #192	; 0xc0
 8005f56:	e7ec      	b.n	8005f32 <UART_SetConfig+0xc2>
 8005f58:	4963      	ldr	r1, [pc, #396]	; (80060e8 <UART_SetConfig+0x278>)
 8005f5a:	428b      	cmp	r3, r1
 8005f5c:	d110      	bne.n	8005f80 <UART_SetConfig+0x110>
 8005f5e:	4b5c      	ldr	r3, [pc, #368]	; (80060d0 <UART_SetConfig+0x260>)
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6c:	f000 80a6 	beq.w	80060bc <UART_SetConfig+0x24c>
 8005f70:	d9cc      	bls.n	8005f0c <UART_SetConfig+0x9c>
 8005f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f76:	f000 8095 	beq.w	80060a4 <UART_SetConfig+0x234>
 8005f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7e:	e7d8      	b.n	8005f32 <UART_SetConfig+0xc2>
 8005f80:	495a      	ldr	r1, [pc, #360]	; (80060ec <UART_SetConfig+0x27c>)
 8005f82:	428b      	cmp	r3, r1
 8005f84:	d11e      	bne.n	8005fc4 <UART_SetConfig+0x154>
 8005f86:	4b52      	ldr	r3, [pc, #328]	; (80060d0 <UART_SetConfig+0x260>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f94:	f000 8092 	beq.w	80060bc <UART_SetConfig+0x24c>
 8005f98:	d806      	bhi.n	8005fa8 <UART_SetConfig+0x138>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d07c      	beq.n	8006098 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f9e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005fa2:	d12f      	bne.n	8006004 <UART_SetConfig+0x194>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	e78d      	b.n	8005ec4 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fac:	d07a      	beq.n	80060a4 <UART_SetConfig+0x234>
 8005fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fb2:	d1f4      	bne.n	8005f9e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005fb8:	d169      	bne.n	800608e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005fba:	6863      	ldr	r3, [r4, #4]
 8005fbc:	0858      	lsrs	r0, r3, #1
 8005fbe:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8005fc2:	e078      	b.n	80060b6 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fc4:	494a      	ldr	r1, [pc, #296]	; (80060f0 <UART_SetConfig+0x280>)
 8005fc6:	428b      	cmp	r3, r1
 8005fc8:	d124      	bne.n	8006014 <UART_SetConfig+0x1a4>
 8005fca:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <UART_SetConfig+0x260>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	d070      	beq.n	80060bc <UART_SetConfig+0x24c>
 8005fda:	d815      	bhi.n	8006008 <UART_SetConfig+0x198>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1de      	bne.n	8005f9e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005fe4:	d135      	bne.n	8006052 <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005fe6:	f7fd fffd 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	0853      	lsrs	r3, r2, #1
 8005fee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005ff2:	fbb0 f0f2 	udiv	r0, r0, r2
 8005ff6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005ffc:	f1a0 0210 	sub.w	r2, r0, #16
 8006000:	429a      	cmp	r2, r3
 8006002:	d91a      	bls.n	800603a <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8006004:	2001      	movs	r0, #1
 8006006:	e020      	b.n	800604a <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600c:	d04a      	beq.n	80060a4 <UART_SetConfig+0x234>
 800600e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006012:	e7ce      	b.n	8005fb2 <UART_SetConfig+0x142>
 8006014:	4937      	ldr	r1, [pc, #220]	; (80060f4 <UART_SetConfig+0x284>)
 8006016:	428b      	cmp	r3, r1
 8006018:	d1f4      	bne.n	8006004 <UART_SetConfig+0x194>
 800601a:	4b2d      	ldr	r3, [pc, #180]	; (80060d0 <UART_SetConfig+0x260>)
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006028:	d048      	beq.n	80060bc <UART_SetConfig+0x24c>
 800602a:	f67f af6f 	bls.w	8005f0c <UART_SetConfig+0x9c>
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d037      	beq.n	80060a4 <UART_SetConfig+0x234>
 8006034:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006038:	e77b      	b.n	8005f32 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603a:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800603e:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	4318      	orrs	r0, r3
 8006046:	60d0      	str	r0, [r2, #12]
 8006048:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800604e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8006050:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006052:	f7fd ffc7 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800605c:	e008      	b.n	8006070 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800605e:	f7fd ffd1 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8006062:	e7f8      	b.n	8006056 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006064:	6863      	ldr	r3, [r4, #4]
 8006066:	0858      	lsrs	r0, r3, #1
 8006068:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800606c:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006070:	fbb0 f0f3 	udiv	r0, r0, r3
 8006074:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006076:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800607a:	f1a0 0210 	sub.w	r2, r0, #16
 800607e:	429a      	cmp	r2, r3
 8006080:	d8c0      	bhi.n	8006004 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	60d8      	str	r0, [r3, #12]
 8006086:	e7df      	b.n	8006048 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006088:	f7fd feda 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 800608c:	e7e3      	b.n	8006056 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800608e:	6863      	ldr	r3, [r4, #4]
 8006090:	0858      	lsrs	r0, r3, #1
 8006092:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8006096:	e7eb      	b.n	8006070 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006098:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800609c:	d1df      	bne.n	800605e <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800609e:	f7fd ffb1 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 80060a2:	e7a2      	b.n	8005fea <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80060a8:	d1dc      	bne.n	8006064 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80060aa:	6863      	ldr	r3, [r4, #4]
 80060ac:	0858      	lsrs	r0, r3, #1
 80060ae:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 80060b2:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80060b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80060ba:	e79c      	b.n	8005ff6 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80060c0:	d1e2      	bne.n	8006088 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80060c2:	f7fd febd 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 80060c6:	e790      	b.n	8005fea <UART_SetConfig+0x17a>
 80060c8:	efff69f3 	.word	0xefff69f3
 80060cc:	40011000 	.word	0x40011000
 80060d0:	40023800 	.word	0x40023800
 80060d4:	08009df8 	.word	0x08009df8
 80060d8:	40004400 	.word	0x40004400
 80060dc:	08009dfc 	.word	0x08009dfc
 80060e0:	40004800 	.word	0x40004800
 80060e4:	40004c00 	.word	0x40004c00
 80060e8:	40005000 	.word	0x40005000
 80060ec:	40011400 	.word	0x40011400
 80060f0:	40007800 	.word	0x40007800
 80060f4:	40007c00 	.word	0x40007c00

080060f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060fa:	07da      	lsls	r2, r3, #31
{
 80060fc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060fe:	d506      	bpl.n	800610e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006100:	6801      	ldr	r1, [r0, #0]
 8006102:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006104:	684a      	ldr	r2, [r1, #4]
 8006106:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800610a:	4322      	orrs	r2, r4
 800610c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800610e:	079c      	lsls	r4, r3, #30
 8006110:	d506      	bpl.n	8006120 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006112:	6801      	ldr	r1, [r0, #0]
 8006114:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006116:	684a      	ldr	r2, [r1, #4]
 8006118:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800611c:	4322      	orrs	r2, r4
 800611e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006120:	0759      	lsls	r1, r3, #29
 8006122:	d506      	bpl.n	8006132 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006124:	6801      	ldr	r1, [r0, #0]
 8006126:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006128:	684a      	ldr	r2, [r1, #4]
 800612a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800612e:	4322      	orrs	r2, r4
 8006130:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006132:	071a      	lsls	r2, r3, #28
 8006134:	d506      	bpl.n	8006144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006136:	6801      	ldr	r1, [r0, #0]
 8006138:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800613a:	684a      	ldr	r2, [r1, #4]
 800613c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006140:	4322      	orrs	r2, r4
 8006142:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006144:	06dc      	lsls	r4, r3, #27
 8006146:	d506      	bpl.n	8006156 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006148:	6801      	ldr	r1, [r0, #0]
 800614a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800614c:	688a      	ldr	r2, [r1, #8]
 800614e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006152:	4322      	orrs	r2, r4
 8006154:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006156:	0699      	lsls	r1, r3, #26
 8006158:	d506      	bpl.n	8006168 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800615a:	6801      	ldr	r1, [r0, #0]
 800615c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800615e:	688a      	ldr	r2, [r1, #8]
 8006160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006164:	4322      	orrs	r2, r4
 8006166:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006168:	065a      	lsls	r2, r3, #25
 800616a:	d510      	bpl.n	800618e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800616c:	6801      	ldr	r1, [r0, #0]
 800616e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006170:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006172:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006176:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800617a:	ea42 0204 	orr.w	r2, r2, r4
 800617e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006180:	d105      	bne.n	800618e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006182:	684a      	ldr	r2, [r1, #4]
 8006184:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006186:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800618a:	4322      	orrs	r2, r4
 800618c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	d506      	bpl.n	80061a0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006192:	6802      	ldr	r2, [r0, #0]
 8006194:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006196:	6853      	ldr	r3, [r2, #4]
 8006198:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800619c:	430b      	orrs	r3, r1
 800619e:	6053      	str	r3, [r2, #4]
 80061a0:	bd10      	pop	{r4, pc}

080061a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80061a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a6:	9d06      	ldr	r5, [sp, #24]
 80061a8:	4604      	mov	r4, r0
 80061aa:	460f      	mov	r7, r1
 80061ac:	4616      	mov	r6, r2
 80061ae:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b0:	6821      	ldr	r1, [r4, #0]
 80061b2:	69ca      	ldr	r2, [r1, #28]
 80061b4:	ea37 0302 	bics.w	r3, r7, r2
 80061b8:	bf0c      	ite	eq
 80061ba:	2201      	moveq	r2, #1
 80061bc:	2200      	movne	r2, #0
 80061be:	42b2      	cmp	r2, r6
 80061c0:	d002      	beq.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80061c2:	2000      	movs	r0, #0
}
 80061c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80061c8:	1c6b      	adds	r3, r5, #1
 80061ca:	d0f2      	beq.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061cc:	f7fb ff10 	bl	8001ff0 <HAL_GetTick>
 80061d0:	eba0 0008 	sub.w	r0, r0, r8
 80061d4:	4285      	cmp	r5, r0
 80061d6:	d301      	bcc.n	80061dc <UART_WaitOnFlagUntilTimeout+0x3a>
 80061d8:	2d00      	cmp	r5, #0
 80061da:	d1e9      	bne.n	80061b0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061dc:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80061de:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	f022 0201 	bic.w	r2, r2, #1
 80061ee:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80061f0:	2320      	movs	r3, #32
 80061f2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80061f4:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80061f6:	2300      	movs	r3, #0
 80061f8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80061fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006200 <UART_CheckIdleState>:
{
 8006200:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006202:	2500      	movs	r5, #0
{
 8006204:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006206:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006208:	f7fb fef2 	bl	8001ff0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620c:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800620e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	0712      	lsls	r2, r2, #28
 8006214:	d407      	bmi.n	8006226 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8006216:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006218:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800621a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800621c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8006220:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006222:	b003      	add	sp, #12
 8006224:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006226:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800622a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800622e:	4620      	mov	r0, r4
 8006230:	9200      	str	r2, [sp, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	f7ff ffb5 	bl	80061a2 <UART_WaitOnFlagUntilTimeout>
 8006238:	2800      	cmp	r0, #0
 800623a:	d0ec      	beq.n	8006216 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800623c:	2003      	movs	r0, #3
 800623e:	e7f0      	b.n	8006222 <UART_CheckIdleState+0x22>

08006240 <HAL_UART_Init>:
{
 8006240:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006242:	4604      	mov	r4, r0
 8006244:	b340      	cbz	r0, 8006298 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006246:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006248:	b91b      	cbnz	r3, 8006252 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800624a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800624e:	f7fb fe49 	bl	8001ee4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006252:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006254:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006256:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006262:	f7ff fe05 	bl	8005e70 <UART_SetConfig>
 8006266:	2801      	cmp	r0, #1
 8006268:	d016      	beq.n	8006298 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800626a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800626c:	b113      	cbz	r3, 8006274 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800626e:	4620      	mov	r0, r4
 8006270:	f7ff ff42 	bl	80060f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006274:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006276:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800627e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006286:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
}
 800628e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006292:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006294:	f7ff bfb4 	b.w	8006200 <UART_CheckIdleState>
}
 8006298:	2001      	movs	r0, #1
 800629a:	bd10      	pop	{r4, pc}

0800629c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800629c:	680b      	ldr	r3, [r1, #0]
 800629e:	684a      	ldr	r2, [r1, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80062a6:	6803      	ldr	r3, [r0, #0]
{
 80062a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062ac:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80062b0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80062b4:	694d      	ldr	r5, [r1, #20]
 80062b6:	698c      	ldr	r4, [r1, #24]
 80062b8:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80062bc:	6a0f      	ldr	r7, [r1, #32]
 80062be:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80062c0:	d014      	beq.n	80062ec <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80062c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ca:	431a      	orrs	r2, r3
 80062cc:	ea42 0209 	orr.w	r2, r2, r9
 80062d0:	ea42 0208 	orr.w	r2, r2, r8
 80062d4:	ea42 030c 	orr.w	r3, r2, ip
 80062d8:	432b      	orrs	r3, r5
 80062da:	4323      	orrs	r3, r4
 80062dc:	ea43 030e 	orr.w	r3, r3, lr
 80062e0:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80062e2:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80062e4:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80062e6:	2000      	movs	r0, #0
 80062e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80062ec:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80062ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80062f2:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80062f6:	ea43 030e 	orr.w	r3, r3, lr
 80062fa:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80062fe:	433b      	orrs	r3, r7
 8006300:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006302:	431e      	orrs	r6, r3
 8006304:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006308:	6006      	str	r6, [r0, #0]
 800630a:	ea42 0208 	orr.w	r2, r2, r8
 800630e:	ea42 030c 	orr.w	r3, r2, ip
 8006312:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006314:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006316:	6043      	str	r3, [r0, #4]
 8006318:	e7e5      	b.n	80062e6 <FMC_SDRAM_Init+0x4a>

0800631a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800631a:	2a01      	cmp	r2, #1
 800631c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 8006320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006322:	e891 4008 	ldmia.w	r1, {r3, lr}
 8006326:	688f      	ldr	r7, [r1, #8]
 8006328:	690d      	ldr	r5, [r1, #16]
 800632a:	694e      	ldr	r6, [r1, #20]
 800632c:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 800632e:	d01b      	beq.n	8006368 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006330:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006332:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006336:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006338:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800633c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006340:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 8006342:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 8006344:	3901      	subs	r1, #1
 8006346:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 800634a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800634c:	1e7b      	subs	r3, r7, #1
 800634e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8006352:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8006356:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800635a:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800635e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006362:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006364:	2000      	movs	r0, #0
 8006366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006368:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800636a:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800636e:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006370:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006372:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006376:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800637a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 800637e:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006380:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 8006384:	3901      	subs	r1, #1
 8006386:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 800638a:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 800638e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006390:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006392:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 8006396:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800639a:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800639c:	6086      	str	r6, [r0, #8]
 800639e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80063a6:	60c3      	str	r3, [r0, #12]
 80063a8:	e7dc      	b.n	8006364 <FMC_SDRAM_Timing_Init+0x4a>
	...

080063ac <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063ac:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <SDMMC_GetCmdResp2+0x48>)
 80063ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80063b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80063bc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80063be:	f113 33ff 	adds.w	r3, r3, #4294967295
 80063c2:	d314      	bcc.n	80063ee <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80063c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80063c6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80063ca:	d0f8      	beq.n	80063be <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80063ce:	075b      	lsls	r3, r3, #29
 80063d0:	d503      	bpl.n	80063da <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063d2:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80063d4:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80063da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80063dc:	f013 0301 	ands.w	r3, r3, #1
 80063e0:	d001      	beq.n	80063e6 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7f6      	b.n	80063d4 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80063e6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063ea:	6382      	str	r2, [r0, #56]	; 0x38
 80063ec:	e7f3      	b.n	80063d6 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80063ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063f2:	e7f0      	b.n	80063d6 <SDMMC_GetCmdResp2+0x2a>
 80063f4:	20000000 	.word	0x20000000

080063f8 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <SDMMC_GetCmdResp3+0x40>)
 80063fa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	fbb3 f2f2 	udiv	r2, r3, r2
 8006404:	f241 3388 	movw	r3, #5000	; 0x1388
 8006408:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800640a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800640e:	d30f      	bcc.n	8006430 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006410:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006412:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006416:	d0f8      	beq.n	800640a <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006418:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800641a:	f013 0304 	ands.w	r3, r3, #4
 800641e:	d003      	beq.n	8006428 <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006420:	2304      	movs	r3, #4
 8006422:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 8006424:	4618      	mov	r0, r3
 8006426:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006428:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800642c:	6382      	str	r2, [r0, #56]	; 0x38
 800642e:	e7f9      	b.n	8006424 <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006430:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000000 	.word	0x20000000

0800643c <SDMMC_Init>:
{
 800643c:	b084      	sub	sp, #16
 800643e:	b510      	push	{r4, lr}
 8006440:	ac03      	add	r4, sp, #12
 8006442:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8006446:	9904      	ldr	r1, [sp, #16]
 8006448:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800644a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800644c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 800644e:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006450:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8006454:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8006456:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006458:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 800645c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800645e:	9907      	ldr	r1, [sp, #28]
 8006460:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8006462:	9908      	ldr	r1, [sp, #32]
 8006464:	430b      	orrs	r3, r1
}
 8006466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800646a:	4313      	orrs	r3, r2
}
 800646c:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800646e:	6043      	str	r3, [r0, #4]
}
 8006470:	2000      	movs	r0, #0
 8006472:	4770      	bx	lr

08006474 <SDMMC_ReadFIFO>:
 8006474:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8006478:	4770      	bx	lr

0800647a <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800647a:	2303      	movs	r3, #3
 800647c:	6003      	str	r3, [r0, #0]
}
 800647e:	2000      	movs	r0, #0
 8006480:	4770      	bx	lr

08006482 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006482:	6800      	ldr	r0, [r0, #0]
}
 8006484:	f000 0003 	and.w	r0, r0, #3
 8006488:	4770      	bx	lr

0800648a <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800648a:	680b      	ldr	r3, [r1, #0]
{
 800648c:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800648e:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006490:	688c      	ldr	r4, [r1, #8]
 8006492:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006494:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006496:	4323      	orrs	r3, r4
                       Command->Response         |\
 8006498:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800649a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 800649e:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80064a0:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064a2:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 80064a6:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60c3      	str	r3, [r0, #12]
}
 80064ac:	2000      	movs	r0, #0
 80064ae:	bd10      	pop	{r4, pc}

080064b0 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80064b0:	3014      	adds	r0, #20
{
 80064b2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80064b4:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80064b6:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80064b8:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80064ba:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80064bc:	9b01      	ldr	r3, [sp, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
}  
 80064c0:	b002      	add	sp, #8
 80064c2:	4770      	bx	lr

080064c4 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064c4:	4b44      	ldr	r3, [pc, #272]	; (80065d8 <SDMMC_GetCmdResp1+0x114>)
{
 80064c6:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80064ce:	fbb3 f3f4 	udiv	r3, r3, r4
 80064d2:	435a      	muls	r2, r3
    if (count-- == 0)
 80064d4:	2a00      	cmp	r2, #0
 80064d6:	d049      	beq.n	800656c <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80064d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064da:	3a01      	subs	r2, #1
 80064dc:	f013 0f45 	tst.w	r3, #69	; 0x45
 80064e0:	d0f8      	beq.n	80064d4 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80064e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064e4:	075c      	lsls	r4, r3, #29
 80064e6:	d503      	bpl.n	80064f0 <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80064e8:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80064ea:	6383      	str	r3, [r0, #56]	; 0x38
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80064f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064f2:	f013 0301 	ands.w	r3, r3, #1
 80064f6:	d001      	beq.n	80064fc <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80064f8:	2301      	movs	r3, #1
 80064fa:	e7f6      	b.n	80064ea <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 80064fc:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	4291      	cmp	r1, r2
 8006502:	d136      	bne.n	8006572 <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006504:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006508:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800650a:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800650c:	f7ff ffd0 	bl	80064b0 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006510:	4b32      	ldr	r3, [pc, #200]	; (80065dc <SDMMC_GetCmdResp1+0x118>)
 8006512:	4003      	ands	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0e9      	beq.n	80064ec <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006518:	2800      	cmp	r0, #0
 800651a:	db2c      	blt.n	8006576 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800651c:	0042      	lsls	r2, r0, #1
 800651e:	d42d      	bmi.n	800657c <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006520:	0084      	lsls	r4, r0, #2
 8006522:	d42d      	bmi.n	8006580 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006524:	00c1      	lsls	r1, r0, #3
 8006526:	d42d      	bmi.n	8006584 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006528:	0102      	lsls	r2, r0, #4
 800652a:	d42e      	bmi.n	800658a <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800652c:	0144      	lsls	r4, r0, #5
 800652e:	d42f      	bmi.n	8006590 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006530:	01c1      	lsls	r1, r0, #7
 8006532:	d430      	bmi.n	8006596 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006534:	0202      	lsls	r2, r0, #8
 8006536:	d431      	bmi.n	800659c <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006538:	0244      	lsls	r4, r0, #9
 800653a:	d432      	bmi.n	80065a2 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800653c:	0281      	lsls	r1, r0, #10
 800653e:	d433      	bmi.n	80065a8 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006540:	02c2      	lsls	r2, r0, #11
 8006542:	d434      	bmi.n	80065ae <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006544:	0344      	lsls	r4, r0, #13
 8006546:	d435      	bmi.n	80065b4 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006548:	0381      	lsls	r1, r0, #14
 800654a:	d436      	bmi.n	80065ba <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800654c:	03c2      	lsls	r2, r0, #15
 800654e:	d437      	bmi.n	80065c0 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006550:	0404      	lsls	r4, r0, #16
 8006552:	d438      	bmi.n	80065c6 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006554:	0441      	lsls	r1, r0, #17
 8006556:	d439      	bmi.n	80065cc <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006558:	0482      	lsls	r2, r0, #18
 800655a:	d43a      	bmi.n	80065d2 <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800655c:	f010 0f08 	tst.w	r0, #8
 8006560:	bf14      	ite	ne
 8006562:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006566:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800656a:	e7bf      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800656c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006570:	e7bc      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006572:	2301      	movs	r3, #1
 8006574:	e7ba      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657a:	e7b7      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800657c:	2340      	movs	r3, #64	; 0x40
 800657e:	e7b5      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	e7b3      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006588:	e7b0      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800658a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658e:	e7ad      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006594:	e7aa      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800659a:	e7a7      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800659c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065a0:	e7a4      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065a6:	e7a1      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80065a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065ac:	e79e      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 80065ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b2:	e79b      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80065b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065b8:	e798      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80065ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065be:	e795      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80065c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065c4:	e792      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80065c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80065ca:	e78f      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80065cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065d0:	e78c      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 80065d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065d6:	e789      	b.n	80064ec <SDMMC_GetCmdResp1+0x28>
 80065d8:	20000000 	.word	0x20000000
 80065dc:	fdffe008 	.word	0xfdffe008

080065e0 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80065e0:	680b      	ldr	r3, [r1, #0]
{
 80065e2:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 80065e4:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80065e6:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065e8:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 80065ea:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065ec:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80065ee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065f0:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80065f2:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80065f4:	6949      	ldr	r1, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80065f6:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 80065fa:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80065fc:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80065fe:	4313      	orrs	r3, r2
 8006600:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8006602:	2000      	movs	r0, #0
 8006604:	bd10      	pop	{r4, pc}

08006606 <SDMMC_CmdBlockLength>:
{
 8006606:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006608:	2340      	movs	r3, #64	; 0x40
{
 800660a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800660c:	2410      	movs	r4, #16
{
 800660e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006610:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006612:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006614:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006616:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006618:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800661a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800661e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006620:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006622:	f7ff ff32 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006626:	f241 3288 	movw	r2, #5000	; 0x1388
 800662a:	4621      	mov	r1, r4
 800662c:	4628      	mov	r0, r5
 800662e:	f7ff ff49 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 8006632:	b007      	add	sp, #28
 8006634:	bd30      	pop	{r4, r5, pc}

08006636 <SDMMC_CmdReadSingleBlock>:
{
 8006636:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006638:	2340      	movs	r3, #64	; 0x40
{
 800663a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800663c:	2411      	movs	r4, #17
{
 800663e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006640:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006642:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006644:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006646:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006648:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800664a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800664e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006650:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006652:	f7ff ff1a 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006656:	f241 3288 	movw	r2, #5000	; 0x1388
 800665a:	4621      	mov	r1, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f7ff ff31 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 8006662:	b007      	add	sp, #28
 8006664:	bd30      	pop	{r4, r5, pc}

08006666 <SDMMC_CmdReadMultiBlock>:
{
 8006666:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006668:	2340      	movs	r3, #64	; 0x40
{
 800666a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800666c:	2412      	movs	r4, #18
{
 800666e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006670:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006672:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006674:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006676:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006678:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800667a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800667e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006680:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006682:	f7ff ff02 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006686:	f241 3288 	movw	r2, #5000	; 0x1388
 800668a:	4621      	mov	r1, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f7ff ff19 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 8006692:	b007      	add	sp, #28
 8006694:	bd30      	pop	{r4, r5, pc}

08006696 <SDMMC_CmdWriteSingleBlock>:
{
 8006696:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006698:	2340      	movs	r3, #64	; 0x40
{
 800669a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800669c:	2418      	movs	r4, #24
{
 800669e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066a0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066a2:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80066a4:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066a6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066a8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80066ae:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066b0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066b2:	f7ff feea 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80066b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ba:	4621      	mov	r1, r4
 80066bc:	4628      	mov	r0, r5
 80066be:	f7ff ff01 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 80066c2:	b007      	add	sp, #28
 80066c4:	bd30      	pop	{r4, r5, pc}

080066c6 <SDMMC_CmdWriteMultiBlock>:
{
 80066c6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066c8:	2340      	movs	r3, #64	; 0x40
{
 80066ca:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80066cc:	2419      	movs	r4, #25
{
 80066ce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066d2:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80066d4:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066d6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066d8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80066de:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066e0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066e2:	f7ff fed2 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80066e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ea:	4621      	mov	r1, r4
 80066ec:	4628      	mov	r0, r5
 80066ee:	f7ff fee9 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 80066f2:	b007      	add	sp, #28
 80066f4:	bd30      	pop	{r4, r5, pc}
	...

080066f8 <SDMMC_CmdStopTransfer>:
{
 80066f8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 80066fa:	2300      	movs	r3, #0
{
 80066fc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80066fe:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006700:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8006702:	9301      	str	r3, [sp, #4]
{
 8006704:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006706:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006708:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800670c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800670e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006710:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006712:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006714:	f7ff feb9 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8006718:	4a03      	ldr	r2, [pc, #12]	; (8006728 <SDMMC_CmdStopTransfer+0x30>)
 800671a:	4621      	mov	r1, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f7ff fed1 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 8006722:	b007      	add	sp, #28
 8006724:	bd30      	pop	{r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	05f5e100 	.word	0x05f5e100

0800672c <SDMMC_CmdSelDesel>:
{
 800672c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800672e:	2340      	movs	r3, #64	; 0x40
{
 8006730:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006732:	2407      	movs	r4, #7
{
 8006734:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006736:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006738:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800673a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800673c:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800673e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006740:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006744:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006746:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006748:	f7ff fe9f 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800674c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f7ff feb6 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 8006758:	b007      	add	sp, #28
 800675a:	bd30      	pop	{r4, r5, pc}

0800675c <SDMMC_CmdGoIdleState>:
{
 800675c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800675e:	2300      	movs	r3, #0
{
 8006760:	b086      	sub	sp, #24
 8006762:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8006764:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006766:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006768:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800676a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800676c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800676e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006772:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006774:	f7ff fe89 	bl	800648a <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <SDMMC_CmdGoIdleState+0x4c>)
 800677a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	fbb3 f2f2 	udiv	r2, r3, r2
 8006784:	f241 3388 	movw	r3, #5000	; 0x1388
 8006788:	4353      	muls	r3, r2
    if (count-- == 0)
 800678a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800678e:	d308      	bcc.n	80067a2 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006790:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006792:	0612      	lsls	r2, r2, #24
 8006794:	d5f9      	bpl.n	800678a <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006796:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 800679a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800679c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800679e:	b006      	add	sp, #24
 80067a0:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80067a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80067a6:	e7fa      	b.n	800679e <SDMMC_CmdGoIdleState+0x42>
 80067a8:	20000000 	.word	0x20000000

080067ac <SDMMC_CmdOperCond>:
{
 80067ac:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80067ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 80067b2:	b086      	sub	sp, #24
 80067b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80067b6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80067b8:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80067bc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067c2:	2300      	movs	r3, #0
 80067c4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ca:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067cc:	f7ff fe5d 	bl	800648a <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80067d0:	4b11      	ldr	r3, [pc, #68]	; (8006818 <SDMMC_CmdOperCond+0x6c>)
 80067d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80067dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80067e0:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80067e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80067e6:	d314      	bcc.n	8006812 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80067e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80067ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80067ee:	d0f8      	beq.n	80067e2 <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80067f2:	f012 0204 	ands.w	r2, r2, #4
 80067f6:	d004      	beq.n	8006802 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80067f8:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067fa:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80067fc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80067fe:	b006      	add	sp, #24
 8006800:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006802:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006804:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8006808:	d0f9      	beq.n	80067fe <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800680a:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 800680c:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800680e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006810:	e7f5      	b.n	80067fe <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8006812:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006816:	e7f2      	b.n	80067fe <SDMMC_CmdOperCond+0x52>
 8006818:	20000000 	.word	0x20000000

0800681c <SDMMC_CmdAppCommand>:
{
 800681c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800681e:	2340      	movs	r3, #64	; 0x40
{
 8006820:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006822:	2437      	movs	r4, #55	; 0x37
{
 8006824:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006826:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006828:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800682a:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800682c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800682e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006830:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006834:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006836:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006838:	f7ff fe27 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800683c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006840:	4621      	mov	r1, r4
 8006842:	4628      	mov	r0, r5
 8006844:	f7ff fe3e 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 8006848:	b007      	add	sp, #28
 800684a:	bd30      	pop	{r4, r5, pc}

0800684c <SDMMC_CmdAppOperCommand>:
{
 800684c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800684e:	2329      	movs	r3, #41	; 0x29
{
 8006850:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006852:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8006856:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006858:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800685a:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800685c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006860:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006862:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006864:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006866:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006868:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800686a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800686e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006870:	f7ff fe0b 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006874:	4620      	mov	r0, r4
 8006876:	f7ff fdbf 	bl	80063f8 <SDMMC_GetCmdResp3>
}
 800687a:	b006      	add	sp, #24
 800687c:	bd10      	pop	{r4, pc}

0800687e <SDMMC_CmdSendSCR>:
{
 800687e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8006880:	2300      	movs	r3, #0
{
 8006882:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006884:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006886:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8006888:	9301      	str	r3, [sp, #4]
{
 800688a:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800688c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800688e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006892:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006894:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006896:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006898:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800689a:	f7ff fdf6 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800689e:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7ff fe0d 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 80068aa:	b007      	add	sp, #28
 80068ac:	bd30      	pop	{r4, r5, pc}

080068ae <SDMMC_CmdSendCID>:
{
 80068ae:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 80068b0:	2300      	movs	r3, #0
{
 80068b2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80068b4:	2202      	movs	r2, #2
{
 80068b6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 80068b8:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80068bc:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80068be:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068c0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80068c6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068c8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068ca:	f7ff fdde 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7ff fd6c 	bl	80063ac <SDMMC_GetCmdResp2>
}
 80068d4:	b006      	add	sp, #24
 80068d6:	bd10      	pop	{r4, pc}

080068d8 <SDMMC_CmdSendCSD>:
{
 80068d8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80068da:	2309      	movs	r3, #9
{
 80068dc:	b086      	sub	sp, #24
 80068de:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80068e0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80068e2:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80068e4:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80068e8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068ea:	2300      	movs	r3, #0
 80068ec:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068f4:	f7ff fdc9 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7ff fd57 	bl	80063ac <SDMMC_GetCmdResp2>
}
 80068fe:	b006      	add	sp, #24
 8006900:	bd10      	pop	{r4, pc}
	...

08006904 <SDMMC_CmdSetRelAdd>:
{
 8006904:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8006906:	2300      	movs	r3, #0
{
 8006908:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800690a:	2203      	movs	r2, #3
{
 800690c:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800690e:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006910:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006912:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006914:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006916:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006918:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800691c:	9203      	str	r2, [sp, #12]
{
 800691e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006920:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006922:	f7ff fdb2 	bl	800648a <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006926:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <SDMMC_CmdSetRelAdd+0xa4>)
 8006928:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006932:	f241 3388 	movw	r3, #5000	; 0x1388
 8006936:	4353      	muls	r3, r2
    if (count-- == 0)
 8006938:	f113 33ff 	adds.w	r3, r3, #4294967295
 800693c:	d32b      	bcc.n	8006996 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800693e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006940:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006944:	d0f8      	beq.n	8006938 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006948:	075a      	lsls	r2, r3, #29
 800694a:	d503      	bpl.n	8006954 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800694c:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800694e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006950:	b007      	add	sp, #28
 8006952:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006956:	f011 0101 	ands.w	r1, r1, #1
 800695a:	d001      	beq.n	8006960 <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800695c:	2001      	movs	r0, #1
 800695e:	e7f6      	b.n	800694e <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8006960:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d119      	bne.n	800699c <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006968:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800696c:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800696e:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006970:	f7ff fd9e 	bl	80064b0 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006974:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8006978:	d103      	bne.n	8006982 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800697a:	0c00      	lsrs	r0, r0, #16
 800697c:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800697e:	4618      	mov	r0, r3
 8006980:	e7e6      	b.n	8006950 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006982:	0443      	lsls	r3, r0, #17
 8006984:	d40c      	bmi.n	80069a0 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006986:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800698a:	bf14      	ite	ne
 800698c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8006990:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8006994:	e7dc      	b.n	8006950 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8006996:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800699a:	e7d9      	b.n	8006950 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800699c:	2001      	movs	r0, #1
 800699e:	e7d7      	b.n	8006950 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80069a4:	e7d4      	b.n	8006950 <SDMMC_CmdSetRelAdd+0x4c>
 80069a6:	bf00      	nop
 80069a8:	20000000 	.word	0x20000000

080069ac <SDMMC_CmdSendStatus>:
{
 80069ac:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069ae:	2340      	movs	r3, #64	; 0x40
{
 80069b0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80069b2:	240d      	movs	r4, #13
{
 80069b4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069b8:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80069ba:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069bc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80069c4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069c6:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069c8:	f7ff fd5f 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80069cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d0:	4621      	mov	r1, r4
 80069d2:	4628      	mov	r0, r5
 80069d4:	f7ff fd76 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 80069d8:	b007      	add	sp, #28
 80069da:	bd30      	pop	{r4, r5, pc}

080069dc <SDMMC_CmdSwitch>:
{
 80069dc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069de:	2340      	movs	r3, #64	; 0x40
{
 80069e0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80069e2:	2406      	movs	r4, #6
{
 80069e4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069e8:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 80069ea:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069ec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069ee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80069f4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069f6:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069f8:	f7ff fd47 	bl	800648a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80069fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a00:	4621      	mov	r1, r4
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7ff fd5e 	bl	80064c4 <SDMMC_GetCmdResp1>
}
 8006a08:	b007      	add	sp, #28
 8006a0a:	bd30      	pop	{r4, r5, pc}

08006a0c <SDMMC_CmdBusWidth>:
 8006a0c:	f7ff bfe6 	b.w	80069dc <SDMMC_CmdSwitch>

08006a10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a12:	3b01      	subs	r3, #1
 8006a14:	d101      	bne.n	8006a1a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8006a16:	2003      	movs	r0, #3
 8006a18:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1a:	6902      	ldr	r2, [r0, #16]
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	daf8      	bge.n	8006a12 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a20:	6903      	ldr	r3, [r0, #16]
 8006a22:	4a06      	ldr	r2, [pc, #24]	; (8006a3c <USB_CoreReset+0x2c>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8006a2a:	3a01      	subs	r2, #1
 8006a2c:	d0f3      	beq.n	8006a16 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a2e:	6903      	ldr	r3, [r0, #16]
 8006a30:	f013 0301 	ands.w	r3, r3, #1
 8006a34:	d1f9      	bne.n	8006a2a <USB_CoreReset+0x1a>

  return HAL_OK;
 8006a36:	4618      	mov	r0, r3
}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	00030d41 	.word	0x00030d41

08006a40 <USB_CoreInit>:
{
 8006a40:	b084      	sub	sp, #16
 8006a42:	b538      	push	{r3, r4, r5, lr}
 8006a44:	ad05      	add	r5, sp, #20
 8006a46:	4604      	mov	r4, r0
 8006a48:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d126      	bne.n	8006aa0 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a58:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a5a:	68c3      	ldr	r3, [r0, #12]
 8006a5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a64:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a66:	68c3      	ldr	r3, [r0, #12]
 8006a68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a6c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8006a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d103      	bne.n	8006a7c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a74:	68c3      	ldr	r3, [r0, #12]
 8006a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7ff ffc7 	bl	8006a10 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8006a82:	9b08      	ldr	r3, [sp, #32]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a88:	68a3      	ldr	r3, [r4, #8]
 8006a8a:	f043 0306 	orr.w	r3, r3, #6
 8006a8e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	f043 0320 	orr.w	r3, r3, #32
 8006a96:	60a3      	str	r3, [r4, #8]
}
 8006a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a9c:	b004      	add	sp, #16
 8006a9e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aa0:	68c3      	ldr	r3, [r0, #12]
 8006aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8006aa8:	f7ff ffb2 	bl	8006a10 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab2:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ab4:	e7e5      	b.n	8006a82 <USB_CoreInit+0x42>

08006ab6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ab6:	6883      	ldr	r3, [r0, #8]
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	6083      	str	r3, [r0, #8]
}
 8006abe:	2000      	movs	r0, #0
 8006ac0:	4770      	bx	lr

08006ac2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ac2:	6883      	ldr	r3, [r0, #8]
 8006ac4:	f023 0301 	bic.w	r3, r3, #1
 8006ac8:	6083      	str	r3, [r0, #8]
}
 8006aca:	2000      	movs	r0, #0
 8006acc:	4770      	bx	lr

08006ace <USB_SetCurrentMode>:
{
 8006ace:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ad0:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006ad2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ad4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ad8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006ada:	d108      	bne.n	8006aee <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006adc:	68c3      	ldr	r3, [r0, #12]
 8006ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ae2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8006ae4:	2032      	movs	r0, #50	; 0x32
 8006ae6:	f7fb fa89 	bl	8001ffc <HAL_Delay>
  return HAL_OK;
 8006aea:	2000      	movs	r0, #0
 8006aec:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8006aee:	b919      	cbnz	r1, 8006af8 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006af0:	68c3      	ldr	r3, [r0, #12]
 8006af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af6:	e7f4      	b.n	8006ae2 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8006af8:	2001      	movs	r0, #1
}
 8006afa:	bd08      	pop	{r3, pc}

08006afc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006afc:	0189      	lsls	r1, r1, #6
 8006afe:	4a07      	ldr	r2, [pc, #28]	; (8006b1c <USB_FlushTxFifo+0x20>)
 8006b00:	f041 0120 	orr.w	r1, r1, #32
 8006b04:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8006b06:	3a01      	subs	r2, #1
 8006b08:	d005      	beq.n	8006b16 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b0a:	6903      	ldr	r3, [r0, #16]
 8006b0c:	f013 0320 	ands.w	r3, r3, #32
 8006b10:	d1f9      	bne.n	8006b06 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8006b12:	4618      	mov	r0, r3
 8006b14:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006b16:	2003      	movs	r0, #3
}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	00030d41 	.word	0x00030d41

08006b20 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b20:	2310      	movs	r3, #16
 8006b22:	4a06      	ldr	r2, [pc, #24]	; (8006b3c <USB_FlushRxFifo+0x1c>)
 8006b24:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8006b26:	3a01      	subs	r2, #1
 8006b28:	d005      	beq.n	8006b36 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b2a:	6903      	ldr	r3, [r0, #16]
 8006b2c:	f013 0310 	ands.w	r3, r3, #16
 8006b30:	d1f9      	bne.n	8006b26 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8006b32:	4618      	mov	r0, r3
 8006b34:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006b36:	2003      	movs	r0, #3
}
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	00030d41 	.word	0x00030d41

08006b40 <USB_WritePacket>:
{
 8006b40:	b510      	push	{r4, lr}
 8006b42:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8006b46:	b94c      	cbnz	r4, 8006b5c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b48:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006b4a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8006b56:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8006b58:	4299      	cmp	r1, r3
 8006b5a:	d101      	bne.n	8006b60 <USB_WritePacket+0x20>
}
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006b60:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b64:	6002      	str	r2, [r0, #0]
 8006b66:	e7f7      	b.n	8006b58 <USB_WritePacket+0x18>

08006b68 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b68:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006b6a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8006b6e:	f022 0203 	bic.w	r2, r2, #3
 8006b72:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 8006b74:	4291      	cmp	r1, r2
 8006b76:	d101      	bne.n	8006b7c <USB_ReadPacket+0x14>
}
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006b7c:	6803      	ldr	r3, [r0, #0]
 8006b7e:	f841 3b04 	str.w	r3, [r1], #4
 8006b82:	e7f7      	b.n	8006b74 <USB_ReadPacket+0xc>

08006b84 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006b84:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006b86:	6980      	ldr	r0, [r0, #24]
}
 8006b88:	4010      	ands	r0, r2
 8006b8a:	4770      	bx	lr

08006b8c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8006b8c:	6940      	ldr	r0, [r0, #20]
}
 8006b8e:	f000 0001 	and.w	r0, r0, #1
 8006b92:	4770      	bx	lr

08006b94 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b94:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 8006b98:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b9a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
{
 8006ba2:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ba4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006ba8:	f001 0303 	and.w	r3, r1, #3
 8006bac:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8006bb0:	ea43 0304 	orr.w	r3, r3, r4
 8006bb4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8006bb8:	d104      	bne.n	8006bc4 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 8006bba:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8006bbe:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8006bc4:	2902      	cmp	r1, #2
 8006bc6:	d1fb      	bne.n	8006bc0 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 8006bc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006bcc:	e7f7      	b.n	8006bbe <USB_InitFSLSPClkSel+0x2a>

08006bce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006bce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8006bd0:	2500      	movs	r5, #0
{
 8006bd2:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 8006bd4:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8006bd6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006bda:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006be2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bea:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8006bee:	2064      	movs	r0, #100	; 0x64
 8006bf0:	f7fb fa04 	bl	8001ffc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006bf4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 8006bf6:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bfc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8006c00:	f7fb f9fc 	bl	8001ffc <HAL_Delay>

  return HAL_OK;
}
 8006c04:	4628      	mov	r0, r5
 8006c06:	b003      	add	sp, #12
 8006c08:	bd30      	pop	{r4, r5, pc}

08006c0a <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c0a:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8006c10:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006c14:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c1c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	04da      	lsls	r2, r3, #19
 8006c22:	d406      	bmi.n	8006c32 <USB_DriveVbus+0x28>
 8006c24:	2901      	cmp	r1, #1
 8006c26:	d104      	bne.n	8006c32 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c28:	9b01      	ldr	r3, [sp, #4]
 8006c2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c2e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	04db      	lsls	r3, r3, #19
 8006c36:	d505      	bpl.n	8006c44 <USB_DriveVbus+0x3a>
 8006c38:	b921      	cbnz	r1, 8006c44 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c3a:	9b01      	ldr	r3, [sp, #4]
 8006c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c40:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8006c44:	2000      	movs	r0, #0
 8006c46:	b002      	add	sp, #8
 8006c48:	4770      	bx	lr
	...

08006c4c <USB_HostInit>:
{
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	b538      	push	{r3, r4, r5, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	a805      	add	r0, sp, #20
 8006c54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c64:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c68:	05da      	lsls	r2, r3, #23
 8006c6a:	d53f      	bpl.n	8006cec <USB_HostInit+0xa0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8006c6c:	9b07      	ldr	r3, [sp, #28]
 8006c6e:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c70:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8006c74:	d13c      	bne.n	8006cf0 <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c76:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c7a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006c7e:	2110      	movs	r1, #16
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff ff3b 	bl	8006afc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c86:	4620      	mov	r0, r4
 8006c88:	f7ff ff4a 	bl	8006b20 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9906      	ldr	r1, [sp, #24]
 8006c90:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8006c98:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c9a:	428b      	cmp	r3, r1
 8006c9c:	d12b      	bne.n	8006cf6 <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7ff ffb2 	bl	8006c0a <USB_DriveVbus>
  HAL_Delay(200U);
 8006ca6:	20c8      	movs	r0, #200	; 0xc8
 8006ca8:	f7fb f9a8 	bl	8001ffc <HAL_Delay>
  USBx->GINTMSK = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb4:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cb8:	05db      	lsls	r3, r3, #23
 8006cba:	d521      	bpl.n	8006d00 <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
 8006cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc0:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006cc2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006cc8:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006cca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8006cce:	9b08      	ldr	r3, [sp, #32]
 8006cd0:	b91b      	cbnz	r3, 8006cda <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cd2:	69a3      	ldr	r3, [r4, #24]
 8006cd4:	f043 0310 	orr.w	r3, r3, #16
 8006cd8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006cda:	69a2      	ldr	r2, [r4, #24]
}
 8006cdc:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <USB_HostInit+0xc8>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61a3      	str	r3, [r4, #24]
}
 8006ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ce8:	b004      	add	sp, #16
 8006cea:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006cec:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8006cf0:	f023 0304 	bic.w	r3, r3, #4
 8006cf4:	e7c1      	b.n	8006c7a <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006cf6:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cf8:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8006cfa:	60d5      	str	r5, [r2, #12]
 8006cfc:	3220      	adds	r2, #32
 8006cfe:	e7cc      	b.n	8006c9a <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
 8006d00:	2380      	movs	r3, #128	; 0x80
 8006d02:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d04:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8006d08:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USB_HostInit+0xcc>)
 8006d0c:	e7dd      	b.n	8006cca <USB_HostInit+0x7e>
 8006d0e:	bf00      	nop
 8006d10:	00e00300 	.word	0x00e00300
 8006d14:	a3200008 	.word	0xa3200008
 8006d18:	004000e0 	.word	0x004000e0

08006d1c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8006d22:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006d26:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d28:	9801      	ldr	r0, [sp, #4]
}
 8006d2a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8006d2e:	b002      	add	sp, #8
 8006d30:	4770      	bx	lr

08006d32 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d32:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006d36:	6880      	ldr	r0, [r0, #8]
}
 8006d38:	b280      	uxth	r0, r0
 8006d3a:	4770      	bx	lr

08006d3c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d40:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 8006d44:	4605      	mov	r5, r0
 8006d46:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8006d52:	fa4f f882 	sxtb.w	r8, r2
 8006d56:	60a0      	str	r0, [r4, #8]
 8006d58:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8006d5c:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d60:	2e03      	cmp	r6, #3
 8006d62:	d870      	bhi.n	8006e46 <USB_HC_Init+0x10a>
 8006d64:	e8df f006 	tbb	[pc, r6]
 8006d68:	50026502 	.word	0x50026502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d6c:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d70:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d74:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8006d76:	da03      	bge.n	8006d80 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d78:	68e1      	ldr	r1, [r4, #12]
 8006d7a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006d7e:	e005      	b.n	8006d8c <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d80:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006d82:	05c9      	lsls	r1, r1, #23
 8006d84:	d546      	bpl.n	8006e14 <USB_HC_Init+0xd8>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006d86:	68e1      	ldr	r1, [r4, #12]
 8006d88:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  HAL_StatusTypeDef ret = HAL_OK;
 8006d8c:	2000      	movs	r0, #0
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006d8e:	60e1      	str	r1, [r4, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d90:	2101      	movs	r1, #1
 8006d92:	f8dc 4018 	ldr.w	r4, [ip, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8006d96:	f1b8 0f00 	cmp.w	r8, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d9a:	fa01 f10e 	lsl.w	r1, r1, lr
 8006d9e:	ea41 0104 	orr.w	r1, r1, r4
    HCcharEpDir = 0U;
 8006da2:	bfb4      	ite	lt
 8006da4:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8006da8:	2400      	movge	r4, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006daa:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006dae:	69a9      	ldr	r1, [r5, #24]
 8006db0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8006db4:	61a9      	str	r1, [r5, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006db6:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006db8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dbc:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = 0U;
 8006dbe:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006dc2:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dc6:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dca:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = 0U;
 8006dce:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006dd0:	ea43 0305 	orr.w	r3, r3, r5
    HCcharLowSpeed = 0U;
 8006dd4:	bf0c      	ite	eq
 8006dd6:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8006dda:	2100      	movne	r1, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	04b2      	lsls	r2, r6, #18

  if (ep_type == EP_TYPE_INTR)
 8006de0:	2e03      	cmp	r6, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006de2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8006de6:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dea:	ea43 0304 	orr.w	r3, r3, r4
 8006dee:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006df2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8006df6:	d128      	bne.n	8006e4a <USB_HC_Init+0x10e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006df8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8006dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e00:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8006e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e08:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8006e0c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e10:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8006e12:	dbb1      	blt.n	8006d78 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e14:	2101      	movs	r1, #1
 8006e16:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8006e1a:	fa01 f10e 	lsl.w	r1, r1, lr
 8006e1e:	4301      	orrs	r1, r0
  HAL_StatusTypeDef ret = HAL_OK;
 8006e20:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e22:	f8cc 1018 	str.w	r1, [ip, #24]
    HCcharEpDir = 0U;
 8006e26:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006e28:	69a9      	ldr	r1, [r5, #24]
 8006e2a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8006e2e:	61a9      	str	r1, [r5, #24]
 8006e30:	e7c1      	b.n	8006db6 <USB_HC_Init+0x7a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e32:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8006e36:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e3a:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8006e3c:	daea      	bge.n	8006e14 <USB_HC_Init+0xd8>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e3e:	68e1      	ldr	r1, [r4, #12]
 8006e40:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006e44:	e7a2      	b.n	8006d8c <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8006e46:	2001      	movs	r0, #1
 8006e48:	e7a2      	b.n	8006d90 <USB_HC_Init+0x54>
}
 8006e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e4e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e4e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006e52:	6940      	ldr	r0, [r0, #20]
}
 8006e54:	b280      	uxth	r0, r0
 8006e56:	4770      	bx	lr

08006e58 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e58:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8006e5c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006e60:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e64:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e68:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e70:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e74:	d11e      	bne.n	8006eb4 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006e78:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e7c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e80:	d137      	bne.n	8006ef2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e8a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e92:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e96:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e9e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8006ea2:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	d002      	beq.n	8006eb0 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eaa:	6811      	ldr	r1, [r2, #0]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	dbfa      	blt.n	8006ea6 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006eb4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8006eb8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ebc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ec0:	d117      	bne.n	8006ef2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ed6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006eda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ede:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8006ee2:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	d0e2      	beq.n	8006eb0 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eea:	6811      	ldr	r1, [r2, #0]
 8006eec:	2900      	cmp	r1, #0
 8006eee:	dbfa      	blt.n	8006ee6 <USB_HC_Halt+0x8e>
 8006ef0:	e7de      	b.n	8006eb0 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ef6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8006efa:	e7d9      	b.n	8006eb0 <USB_HC_Halt+0x58>

08006efc <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006efc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8006f00:	4a06      	ldr	r2, [pc, #24]	; (8006f1c <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 8006f02:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f04:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f08:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f14:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	80080000 	.word	0x80080000

08006f20 <USB_HC_StartXfer>:
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8006f20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006f22:	05db      	lsls	r3, r3, #23
{
 8006f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f28:	4616      	mov	r6, r2
 8006f2a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f2c:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8006f2e:	d517      	bpl.n	8006f60 <USB_HC_StartXfer+0x40>
 8006f30:	790d      	ldrb	r5, [r1, #4]
 8006f32:	b9ad      	cbnz	r5, 8006f60 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006f34:	b94e      	cbnz	r6, 8006f4a <USB_HC_StartXfer+0x2a>
 8006f36:	794b      	ldrb	r3, [r1, #5]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d111      	bne.n	8006f60 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	f7ff ffdd 	bl	8006efc <USB_DoPing>
}
 8006f42:	2000      	movs	r0, #0
 8006f44:	b002      	add	sp, #8
 8006f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8006f4a:	2e01      	cmp	r6, #1
 8006f4c:	d108      	bne.n	8006f60 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006f4e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8006f52:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8006f56:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8006f5a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8006f5e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8006f60:	6908      	ldr	r0, [r1, #16]
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d066      	beq.n	8007034 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f66:	890b      	ldrh	r3, [r1, #8]
 8006f68:	3801      	subs	r0, #1
 8006f6a:	4418      	add	r0, r3
 8006f6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f70:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8006f72:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006f76:	d903      	bls.n	8006f80 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006f78:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 8006f7a:	f44f 7080 	mov.w	r0, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006f7e:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 8006f80:	78cf      	ldrb	r7, [r1, #3]
 8006f82:	b117      	cbz	r7, 8006f8a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006f84:	890b      	ldrh	r3, [r1, #8]
 8006f86:	4343      	muls	r3, r0
 8006f88:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f8a:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f8e:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 8006f92:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f94:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f98:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f9c:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fa0:	ea4e 0e08 	orr.w	lr, lr, r8
 8006fa4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8007080 <USB_HC_StartXfer+0x160>
 8006fa8:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8006fac:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fb0:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8006fb4:	b116      	cbz	r6, 8006fbc <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fb6:	68c8      	ldr	r0, [r1, #12]
 8006fb8:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006fbc:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8006fc0:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fc4:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006fc8:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fca:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006fce:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fd0:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006fd4:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8006fd8:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8006fdc:	ea40 000c 	orr.w	r0, r0, ip
 8006fe0:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fe4:	4825      	ldr	r0, [pc, #148]	; (800707c <USB_HC_StartXfer+0x15c>)
 8006fe6:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8006fea:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fee:	f8d0 c000 	ldr.w	ip, [r0]
 8006ff2:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8006ff6:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006ffa:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8006ffe:	b1df      	cbz	r7, 8007038 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007000:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007004:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007008:	f8d0 c000 	ldr.w	ip, [r0]
 800700c:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8007010:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007014:	6800      	ldr	r0, [r0, #0]
 8007016:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800701a:	2e00      	cmp	r6, #0
 800701c:	d191      	bne.n	8006f42 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800701e:	2f00      	cmp	r7, #0
 8007020:	d18f      	bne.n	8006f42 <USB_HC_StartXfer+0x22>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d08d      	beq.n	8006f42 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8007026:	79c8      	ldrb	r0, [r1, #7]
 8007028:	2803      	cmp	r0, #3
 800702a:	d813      	bhi.n	8007054 <USB_HC_StartXfer+0x134>
 800702c:	e8df f000 	tbb	[pc, r0]
 8007030:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8007034:	2001      	movs	r0, #1
 8007036:	e7a3      	b.n	8006f80 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007038:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800703c:	e7e2      	b.n	8007004 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800703e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007040:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007042:	b280      	uxth	r0, r0
 8007044:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8007048:	4285      	cmp	r5, r0
 800704a:	d903      	bls.n	8007054 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800704c:	69a0      	ldr	r0, [r4, #24]
 800704e:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007052:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007054:	2000      	movs	r0, #0
 8007056:	b29b      	uxth	r3, r3
 8007058:	9000      	str	r0, [sp, #0]
 800705a:	4620      	mov	r0, r4
 800705c:	68c9      	ldr	r1, [r1, #12]
 800705e:	f7ff fd6f 	bl	8006b40 <USB_WritePacket>
 8007062:	e76e      	b.n	8006f42 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007064:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007068:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800706a:	b280      	uxth	r0, r0
 800706c:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8007070:	4285      	cmp	r5, r0
 8007072:	d9ef      	bls.n	8007054 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007074:	69a0      	ldr	r0, [r4, #24]
 8007076:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 800707a:	e7ea      	b.n	8007052 <USB_HC_StartXfer+0x132>
 800707c:	200000b8 	.word	0x200000b8
 8007080:	1ff80000 	.word	0x1ff80000

08007084 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007084:	6883      	ldr	r3, [r0, #8]


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007086:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007088:	f023 0301 	bic.w	r3, r3, #1
{
 800708c:	b510      	push	{r4, lr}
 800708e:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007090:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007092:	f7ff fd33 	bl	8006afc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007096:	4620      	mov	r0, r4
 8007098:	f7ff fd42 	bl	8006b20 <USB_FlushRxFifo>
 800709c:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80070a0:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 80070a4:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80070a6:	6811      	ldr	r1, [r2, #0]
 80070a8:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070ac:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80070b0:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 80070b4:	4290      	cmp	r0, r2
 80070b6:	d1f6      	bne.n	80070a6 <USB_StopHost+0x22>
 80070b8:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80070ba:	6819      	ldr	r1, [r3, #0]
 80070bc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070c0:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80070c4:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 80070c6:	3001      	adds	r0, #1
 80070c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80070cc:	d802      	bhi.n	80070d4 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	2900      	cmp	r1, #0
 80070d2:	dbf8      	blt.n	80070c6 <USB_StopHost+0x42>
 80070d4:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d1ef      	bne.n	80070ba <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80070de:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070e0:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070e4:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070e6:	68a3      	ldr	r3, [r4, #8]
 80070e8:	f043 0301 	orr.w	r3, r3, #1
 80070ec:	60a3      	str	r3, [r4, #8]
}
 80070ee:	bd10      	pop	{r4, pc}

080070f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80070f0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80070f2:	4903      	ldr	r1, [pc, #12]	; (8007100 <MX_FATFS_Init+0x10>)
 80070f4:	4803      	ldr	r0, [pc, #12]	; (8007104 <MX_FATFS_Init+0x14>)
 80070f6:	f001 f8c1 	bl	800827c <FATFS_LinkDriver>
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <MX_FATFS_Init+0x18>)
 80070fc:	7018      	strb	r0, [r3, #0]
 80070fe:	bd08      	pop	{r3, pc}
 8007100:	20008c4d 	.word	0x20008c4d
 8007104:	08009e0c 	.word	0x08009e0c
 8007108:	20008c4c 	.word	0x20008c4c

0800710c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800710c:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800710e:	4613      	mov	r3, r2
 8007110:	460a      	mov	r2, r1
 8007112:	4601      	mov	r1, r0
 8007114:	4803      	ldr	r0, [pc, #12]	; (8007124 <BSP_SD_ReadBlocks_DMA+0x18>)
 8007116:	f7fd fe07 	bl	8004d28 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 800711a:	3000      	adds	r0, #0
 800711c:	bf18      	it	ne
 800711e:	2001      	movne	r0, #1
 8007120:	bd08      	pop	{r3, pc}
 8007122:	bf00      	nop
 8007124:	20008854 	.word	0x20008854

08007128 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007128:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800712a:	4613      	mov	r3, r2
 800712c:	460a      	mov	r2, r1
 800712e:	4601      	mov	r1, r0
 8007130:	4803      	ldr	r0, [pc, #12]	; (8007140 <BSP_SD_WriteBlocks_DMA+0x18>)
 8007132:	f7fd fe7b 	bl	8004e2c <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 8007136:	3000      	adds	r0, #0
 8007138:	bf18      	it	ne
 800713a:	2001      	movne	r0, #1
 800713c:	bd08      	pop	{r3, pc}
 800713e:	bf00      	nop
 8007140:	20008854 	.word	0x20008854

08007144 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8007144:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007146:	4803      	ldr	r0, [pc, #12]	; (8007154 <BSP_SD_GetCardState+0x10>)
 8007148:	f7fe f98d 	bl	8005466 <HAL_SD_GetCardState>
}
 800714c:	3804      	subs	r0, #4
 800714e:	bf18      	it	ne
 8007150:	2001      	movne	r0, #1
 8007152:	bd08      	pop	{r3, pc}
 8007154:	20008854 	.word	0x20008854

08007158 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007158:	4601      	mov	r1, r0
 800715a:	4801      	ldr	r0, [pc, #4]	; (8007160 <BSP_SD_GetCardInfo+0x8>)
 800715c:	f7fe b8ed 	b.w	800533a <HAL_SD_GetCardInfo>
 8007160:	20008854 	.word	0x20008854

08007164 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007164:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8007166:	f000 f957 	bl	8007418 <BSP_SD_ReadCpltCallback>
 800716a:	bd08      	pop	{r3, pc}

0800716c <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800716c:	2301      	movs	r3, #1
{
 800716e:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8007170:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007174:	f000 f81e 	bl	80071b4 <BSP_PlatformIsDetected>
 8007178:	b908      	cbnz	r0, 800717e <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 800717a:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800717e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007182:	b003      	add	sp, #12
 8007184:	f85d fb04 	ldr.w	pc, [sp], #4

08007188 <BSP_SD_Init>:
{
 8007188:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800718a:	f7ff ffef 	bl	800716c <BSP_SD_IsDetected>
 800718e:	2801      	cmp	r0, #1
 8007190:	d10c      	bne.n	80071ac <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 8007192:	4807      	ldr	r0, [pc, #28]	; (80071b0 <BSP_SD_Init+0x28>)
 8007194:	f7fe f8b7 	bl	8005306 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8007198:	b948      	cbnz	r0, 80071ae <BSP_SD_Init+0x26>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800719a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800719e:	4804      	ldr	r0, [pc, #16]	; (80071b0 <BSP_SD_Init+0x28>)
 80071a0:	f7fe f8dd 	bl	800535e <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80071a4:	3000      	adds	r0, #0
 80071a6:	bf18      	it	ne
 80071a8:	2001      	movne	r0, #1
 80071aa:	bd08      	pop	{r3, pc}
 80071ac:	2002      	movs	r0, #2
}
 80071ae:	bd08      	pop	{r3, pc}
 80071b0:	20008854 	.word	0x20008854

080071b4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80071b4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80071b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071ba:	4803      	ldr	r0, [pc, #12]	; (80071c8 <BSP_PlatformIsDetected+0x14>)
 80071bc:	f7fb fd84 	bl	8002cc8 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 80071c0:	fab0 f080 	clz	r0, r0
 80071c4:	0940      	lsrs	r0, r0, #5
 80071c6:	bd08      	pop	{r3, pc}
 80071c8:	40020800 	.word	0x40020800

080071cc <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 80071cc:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 80071ce:	2301      	movs	r3, #1
 80071d0:	4c05      	ldr	r4, [pc, #20]	; (80071e8 <SD_CheckStatus.isra.0+0x1c>)
 80071d2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80071d4:	f7ff ffb6 	bl	8007144 <BSP_SD_GetCardState>
 80071d8:	4623      	mov	r3, r4
 80071da:	b918      	cbnz	r0, 80071e4 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 80071dc:	7822      	ldrb	r2, [r4, #0]
 80071de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071e2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80071e4:	7818      	ldrb	r0, [r3, #0]
}
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	20000005 	.word	0x20000005

080071ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80071ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
Stat = STA_NOINIT; 
 80071ee:	2301      	movs	r3, #1
 80071f0:	4c0e      	ldr	r4, [pc, #56]	; (800722c <SD_initialize+0x40>)
 80071f2:	7023      	strb	r3, [r4, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80071f4:	f001 f84a 	bl	800828c <osKernelRunning>
 80071f8:	b1a0      	cbz	r0, 8007224 <SD_initialize+0x38>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80071fa:	f7ff ffc5 	bl	8007188 <BSP_SD_Init>
 80071fe:	b910      	cbnz	r0, 8007206 <SD_initialize+0x1a>
    {
      Stat = SD_CheckStatus(lun);
 8007200:	f7ff ffe4 	bl	80071cc <SD_CheckStatus.isra.0>
 8007204:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8007206:	7823      	ldrb	r3, [r4, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d00b      	beq.n	8007224 <SD_initialize+0x38>
 800720c:	4d08      	ldr	r5, [pc, #32]	; (8007230 <SD_initialize+0x44>)
 800720e:	682a      	ldr	r2, [r5, #0]
 8007210:	b942      	cbnz	r2, 8007224 <SD_initialize+0x38>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007212:	4908      	ldr	r1, [pc, #32]	; (8007234 <SD_initialize+0x48>)
 8007214:	c903      	ldmia	r1, {r0, r1}
 8007216:	e88d 0003 	stmia.w	sp, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800721a:	4611      	mov	r1, r2
 800721c:	4668      	mov	r0, sp
 800721e:	f001 f864 	bl	80082ea <osMessageCreate>
 8007222:	6028      	str	r0, [r5, #0]
    }
  }
  return Stat;
 8007224:	7820      	ldrb	r0, [r4, #0]
}
 8007226:	b003      	add	sp, #12
 8007228:	bd30      	pop	{r4, r5, pc}
 800722a:	bf00      	nop
 800722c:	20000005 	.word	0x20000005
 8007230:	200000bc 	.word	0x200000bc
 8007234:	08009db0 	.word	0x08009db0

08007238 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8007238:	f7ff bfc8 	b.w	80071cc <SD_CheckStatus.isra.0>

0800723c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <SD_ioctl+0x4c>)
{
 800723e:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007240:	781b      	ldrb	r3, [r3, #0]
{
 8007242:	b088      	sub	sp, #32
 8007244:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007246:	07db      	lsls	r3, r3, #31
 8007248:	d41b      	bmi.n	8007282 <SD_ioctl+0x46>

  switch (cmd)
 800724a:	2903      	cmp	r1, #3
 800724c:	d803      	bhi.n	8007256 <SD_ioctl+0x1a>
 800724e:	e8df f001 	tbb	[pc, r1]
 8007252:	0510      	.short	0x0510
 8007254:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8007256:	2004      	movs	r0, #4
  }

  return res;
}
 8007258:	b008      	add	sp, #32
 800725a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800725c:	4668      	mov	r0, sp
 800725e:	f7ff ff7b 	bl	8007158 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007262:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	e004      	b.n	8007272 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8007268:	4668      	mov	r0, sp
 800726a:	f7ff ff75 	bl	8007158 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800726e:	9b07      	ldr	r3, [sp, #28]
 8007270:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8007272:	2000      	movs	r0, #0
 8007274:	e7f0      	b.n	8007258 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8007276:	4668      	mov	r0, sp
 8007278:	f7ff ff6e 	bl	8007158 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800727c:	9b07      	ldr	r3, [sp, #28]
 800727e:	0a5b      	lsrs	r3, r3, #9
 8007280:	e7f0      	b.n	8007264 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007282:	2003      	movs	r0, #3
 8007284:	e7e8      	b.n	8007258 <SD_ioctl+0x1c>
 8007286:	bf00      	nop
 8007288:	20000005 	.word	0x20000005

0800728c <SD_CheckStatusWithTimeout.constprop.2>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 800728c:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = osKernelSysTick();
 800728e:	f001 f805 	bl	800829c <osKernelSysTick>
  while( osKernelSysTick() - timer < timeout)
 8007292:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = osKernelSysTick();
 8007296:	4605      	mov	r5, r0
  while( osKernelSysTick() - timer < timeout)
 8007298:	f001 f800 	bl	800829c <osKernelSysTick>
 800729c:	1b40      	subs	r0, r0, r5
 800729e:	42a0      	cmp	r0, r4
 80072a0:	d902      	bls.n	80072a8 <SD_CheckStatusWithTimeout.constprop.2+0x1c>
  return -1;
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	e003      	b.n	80072b0 <SD_CheckStatusWithTimeout.constprop.2+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80072a8:	f7ff ff4c 	bl	8007144 <BSP_SD_GetCardState>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1f3      	bne.n	8007298 <SD_CheckStatusWithTimeout.constprop.2+0xc>
}
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080072b4 <SD_write>:
{
 80072b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072b8:	b085      	sub	sp, #20
 80072ba:	460c      	mov	r4, r1
 80072bc:	4617      	mov	r7, r2
 80072be:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80072c0:	f7ff ffe4 	bl	800728c <SD_CheckStatusWithTimeout.constprop.2>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	da03      	bge.n	80072d0 <SD_write+0x1c>
    return res;
 80072c8:	2001      	movs	r0, #1
} 
 80072ca:	b005      	add	sp, #20
 80072cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 80072d0:	07a3      	lsls	r3, r4, #30
 80072d2:	d00a      	beq.n	80072ea <SD_write+0x36>
 80072d4:	2500      	movs	r5, #0
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80072d6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800736c <SD_write+0xb8>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80072da:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007368 <SD_write+0xb4>
    for (i = 0; i < count; i++) {
 80072de:	42b5      	cmp	r5, r6
 80072e0:	eb05 0107 	add.w	r1, r5, r7
 80072e4:	d123      	bne.n	800732e <SD_write+0x7a>
    if ((i == count) && (ret == MSD_OK))
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7ef      	b.n	80072ca <SD_write+0x16>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80072ea:	4632      	mov	r2, r6
 80072ec:	4639      	mov	r1, r7
 80072ee:	4620      	mov	r0, r4
 80072f0:	f7ff ff1a 	bl	8007128 <BSP_SD_WriteBlocks_DMA>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d1e7      	bne.n	80072c8 <SD_write+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80072f8:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <SD_write+0xb4>)
 80072fa:	f247 5230 	movw	r2, #30000	; 0x7530
 80072fe:	a801      	add	r0, sp, #4
 8007300:	6819      	ldr	r1, [r3, #0]
 8007302:	f001 f81f 	bl	8008344 <osMessageGet>
      if (event.status == osEventMessage)
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	2b10      	cmp	r3, #16
 800730a:	d1dd      	bne.n	80072c8 <SD_write+0x14>
        if (event.value.v == WRITE_CPLT_MSG)
 800730c:	9b02      	ldr	r3, [sp, #8]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d1da      	bne.n	80072c8 <SD_write+0x14>
          timer = osKernelSysTick() + SD_TIMEOUT;
 8007312:	f000 ffc3 	bl	800829c <osKernelSysTick>
 8007316:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 800731a:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 800731c:	f000 ffbe 	bl	800829c <osKernelSysTick>
 8007320:	4284      	cmp	r4, r0
 8007322:	d9d1      	bls.n	80072c8 <SD_write+0x14>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007324:	f7ff ff0e 	bl	8007144 <BSP_SD_GetCardState>
 8007328:	2800      	cmp	r0, #0
 800732a:	d1f7      	bne.n	800731c <SD_write+0x68>
 800732c:	e7cd      	b.n	80072ca <SD_write+0x16>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800732e:	2201      	movs	r2, #1
 8007330:	480e      	ldr	r0, [pc, #56]	; (800736c <SD_write+0xb8>)
 8007332:	f7ff fef9 	bl	8007128 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 8007336:	2800      	cmp	r0, #0
 8007338:	d1c6      	bne.n	80072c8 <SD_write+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800733a:	f247 5230 	movw	r2, #30000	; 0x7530
 800733e:	f8d9 1000 	ldr.w	r1, [r9]
 8007342:	a801      	add	r0, sp, #4
 8007344:	f000 fffe 	bl	8008344 <osMessageGet>
        if (event.status == osEventMessage) {
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	2b10      	cmp	r3, #16
 800734c:	d10a      	bne.n	8007364 <SD_write+0xb0>
          if (event.value.v == WRITE_CPLT_MSG) {
 800734e:	9b02      	ldr	r3, [sp, #8]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d107      	bne.n	8007364 <SD_write+0xb0>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8007354:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 8007356:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800735a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735e:	4641      	mov	r1, r8
 8007360:	f002 fc3e 	bl	8009be0 <memcpy>
    for (i = 0; i < count; i++) {
 8007364:	3501      	adds	r5, #1
 8007366:	e7ba      	b.n	80072de <SD_write+0x2a>
 8007368:	200000bc 	.word	0x200000bc
 800736c:	200000c0 	.word	0x200000c0

08007370 <SD_read>:
{
 8007370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007374:	b085      	sub	sp, #20
 8007376:	460c      	mov	r4, r1
 8007378:	4617      	mov	r7, r2
 800737a:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800737c:	f7ff ff86 	bl	800728c <SD_CheckStatusWithTimeout.constprop.2>
 8007380:	2800      	cmp	r0, #0
 8007382:	da03      	bge.n	800738c <SD_read+0x1c>
    return res;
 8007384:	2001      	movs	r0, #1
} 
 8007386:	b005      	add	sp, #20
 8007388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 800738c:	07a3      	lsls	r3, r4, #30
 800738e:	d00a      	beq.n	80073a6 <SD_read+0x36>
 8007390:	2500      	movs	r5, #0
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8007392:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8007414 <SD_read+0xa4>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007396:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007410 <SD_read+0xa0>
    for (i = 0; i < count; i++) {
 800739a:	42b5      	cmp	r5, r6
 800739c:	eb05 0107 	add.w	r1, r5, r7
 80073a0:	d118      	bne.n	80073d4 <SD_read+0x64>
    if ((i == count) && (ret == MSD_OK))
 80073a2:	2000      	movs	r0, #0
 80073a4:	e7ef      	b.n	8007386 <SD_read+0x16>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80073a6:	4632      	mov	r2, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	4620      	mov	r0, r4
 80073ac:	f7ff feae 	bl	800710c <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1e7      	bne.n	8007384 <SD_read+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80073b4:	4b16      	ldr	r3, [pc, #88]	; (8007410 <SD_read+0xa0>)
 80073b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80073ba:	a801      	add	r0, sp, #4
 80073bc:	6819      	ldr	r1, [r3, #0]
 80073be:	f000 ffc1 	bl	8008344 <osMessageGet>
      if (event.status == osEventMessage) {
 80073c2:	9b01      	ldr	r3, [sp, #4]
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d1dd      	bne.n	8007384 <SD_read+0x14>
    return res;
 80073c8:	9802      	ldr	r0, [sp, #8]
 80073ca:	f110 30ff 	adds.w	r0, r0, #4294967295
 80073ce:	bf18      	it	ne
 80073d0:	2001      	movne	r0, #1
 80073d2:	e7d8      	b.n	8007386 <SD_read+0x16>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80073d4:	2201      	movs	r2, #1
 80073d6:	480f      	ldr	r0, [pc, #60]	; (8007414 <SD_read+0xa4>)
 80073d8:	f7ff fe98 	bl	800710c <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 80073dc:	2800      	cmp	r0, #0
 80073de:	d1d1      	bne.n	8007384 <SD_read+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80073e0:	f247 5230 	movw	r2, #30000	; 0x7530
 80073e4:	f8d9 1000 	ldr.w	r1, [r9]
 80073e8:	a801      	add	r0, sp, #4
 80073ea:	f000 ffab 	bl	8008344 <osMessageGet>
        if (event.status == osEventMessage) {
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d10a      	bne.n	800740a <SD_read+0x9a>
          if (event.value.v == READ_CPLT_MSG) {
 80073f4:	9b02      	ldr	r3, [sp, #8]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d107      	bne.n	800740a <SD_read+0x9a>
            memcpy(buff, scratch, BLOCKSIZE);
 80073fa:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 80073fc:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy(buff, scratch, BLOCKSIZE);
 8007400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007404:	4641      	mov	r1, r8
 8007406:	f002 fbeb 	bl	8009be0 <memcpy>
    for (i = 0; i < count; i++) {
 800740a:	3501      	adds	r5, #1
 800740c:	e7c5      	b.n	800739a <SD_read+0x2a>
 800740e:	bf00      	nop
 8007410:	200000bc 	.word	0x200000bc
 8007414:	200000c0 	.word	0x200000c0

08007418 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8007418:	4b03      	ldr	r3, [pc, #12]	; (8007428 <BSP_SD_ReadCpltCallback+0x10>)
 800741a:	f04f 32ff 	mov.w	r2, #4294967295
 800741e:	2101      	movs	r1, #1
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	f000 bf67 	b.w	80082f4 <osMessagePut>
 8007426:	bf00      	nop
 8007428:	200000bc 	.word	0x200000bc

0800742c <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 800742c:	2000      	movs	r0, #0
 800742e:	4770      	bx	lr

08007430 <USBH_CDC_InterfaceDeInit>:
{
 8007430:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007432:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8007436:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007438:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 800743a:	7821      	ldrb	r1, [r4, #0]
 800743c:	b139      	cbz	r1, 800744e <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800743e:	f000 fed3 	bl	80081e8 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8007442:	7821      	ldrb	r1, [r4, #0]
 8007444:	4628      	mov	r0, r5
 8007446:	f000 feeb 	bl	8008220 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800744a:	2300      	movs	r3, #0
 800744c:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800744e:	7b21      	ldrb	r1, [r4, #12]
 8007450:	b141      	cbz	r1, 8007464 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fec8 	bl	80081e8 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8007458:	7b21      	ldrb	r1, [r4, #12]
 800745a:	4628      	mov	r0, r5
 800745c:	f000 fee0 	bl	8008220 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007460:	2300      	movs	r3, #0
 8007462:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8007464:	7b61      	ldrb	r1, [r4, #13]
 8007466:	b141      	cbz	r1, 800747a <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007468:	4628      	mov	r0, r5
 800746a:	f000 febd 	bl	80081e8 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800746e:	7b61      	ldrb	r1, [r4, #13]
 8007470:	4628      	mov	r0, r5
 8007472:	f000 fed5 	bl	8008220 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007476:	2300      	movs	r3, #0
 8007478:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800747a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800747e:	69d8      	ldr	r0, [r3, #28]
 8007480:	b128      	cbz	r0, 800748e <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8007482:	f002 fba5 	bl	8009bd0 <free>
    phost->pActiveClass->pData = 0U;
 8007486:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800748a:	2200      	movs	r2, #0
 800748c:	61da      	str	r2, [r3, #28]
}
 800748e:	2000      	movs	r0, #0
 8007490:	bd38      	pop	{r3, r4, r5, pc}

08007492 <USBH_CDC_InterfaceInit>:
  interface = USBH_FindInterface(phost,
 8007492:	2202      	movs	r2, #2
 8007494:	2301      	movs	r3, #1
{
 8007496:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8007498:	4611      	mov	r1, r2
{
 800749a:	b085      	sub	sp, #20
 800749c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800749e:	f000 f9e5 	bl	800786c <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 80074a2:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 80074a4:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 80074a6:	d102      	bne.n	80074ae <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 80074a8:	2002      	movs	r0, #2
}
 80074aa:	b005      	add	sp, #20
 80074ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 80074ae:	4601      	mov	r1, r0
 80074b0:	4628      	mov	r0, r5
 80074b2:	f000 f9d2 	bl	800785a <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80074b6:	2050      	movs	r0, #80	; 0x50
 80074b8:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 80074bc:	f002 fb80 	bl	8009bc0 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074c0:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80074c2:	4604      	mov	r4, r0
 80074c4:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074c6:	fb03 5606 	mla	r6, r3, r6, r5
 80074ca:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 80074ce:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074d0:	bf44      	itt	mi
 80074d2:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074d4:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80074d8:	7841      	ldrb	r1, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074da:	bf48      	it	mi
 80074dc:	8143      	strhmi	r3, [r0, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fe87 	bl	80081f2 <USBH_AllocPipe>
 80074e4:	4601      	mov	r1, r0
 80074e6:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 80074e8:	8960      	ldrh	r0, [r4, #10]
 80074ea:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80074ee:	9002      	str	r0, [sp, #8]
 80074f0:	2003      	movs	r0, #3
 80074f2:	7862      	ldrb	r2, [r4, #1]
 80074f4:	9001      	str	r0, [sp, #4]
 80074f6:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80074fa:	9000      	str	r0, [sp, #0]
 80074fc:	4628      	mov	r0, r5
 80074fe:	f000 fe64 	bl	80081ca <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007502:	2200      	movs	r2, #0
 8007504:	7821      	ldrb	r1, [r4, #0]
 8007506:	4628      	mov	r0, r5
 8007508:	f002 faeb 	bl	8009ae2 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 800750c:	2300      	movs	r3, #0
 800750e:	210a      	movs	r1, #10
 8007510:	4628      	mov	r0, r5
 8007512:	461a      	mov	r2, r3
 8007514:	f000 f9aa 	bl	800786c <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8007518:	28ff      	cmp	r0, #255	; 0xff
 800751a:	d0c5      	beq.n	80074a8 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800751c:	231a      	movs	r3, #26
      USBH_OpenPipe  (phost,
 800751e:	2602      	movs	r6, #2
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007520:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007524:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007528:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800752c:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007530:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007534:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007538:	bf0d      	iteet	eq
 800753a:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800753c:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800753e:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007540:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007542:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007546:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800754a:	4628      	mov	r0, r5
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800754c:	bf08      	it	eq
 800754e:	73a3      	strbeq	r3, [r4, #14]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007550:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007552:	bf1a      	itte	ne
 8007554:	73e3      	strbne	r3, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007556:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007558:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800755a:	f000 fe4a 	bl	80081f2 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800755e:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007560:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007562:	4628      	mov	r0, r5
 8007564:	f000 fe45 	bl	80081f2 <USBH_AllocPipe>
 8007568:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 800756a:	8b20      	ldrh	r0, [r4, #24]
 800756c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8007570:	9002      	str	r0, [sp, #8]
 8007572:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8007576:	7ba2      	ldrb	r2, [r4, #14]
 8007578:	7b61      	ldrb	r1, [r4, #13]
 800757a:	9601      	str	r6, [sp, #4]
 800757c:	9000      	str	r0, [sp, #0]
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fe23 	bl	80081ca <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8007584:	8b60      	ldrh	r0, [r4, #26]
 8007586:	9601      	str	r6, [sp, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 8007588:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800758a:	9002      	str	r0, [sp, #8]
 800758c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8007590:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8007594:	7be2      	ldrb	r2, [r4, #15]
 8007596:	7b21      	ldrb	r1, [r4, #12]
 8007598:	9000      	str	r0, [sp, #0]
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fe15 	bl	80081ca <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075a0:	4632      	mov	r2, r6
 80075a2:	7b61      	ldrb	r1, [r4, #13]
 80075a4:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 80075a6:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075aa:	f002 fa9a 	bl	8009ae2 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80075ae:	4632      	mov	r2, r6
 80075b0:	7b21      	ldrb	r1, [r4, #12]
 80075b2:	4628      	mov	r0, r5
 80075b4:	f002 fa95 	bl	8009ae2 <USBH_LL_SetToggle>
      status = USBH_OK;
 80075b8:	4630      	mov	r0, r6
 80075ba:	e776      	b.n	80074aa <USBH_CDC_InterfaceInit+0x18>

080075bc <USBH_CDC_ClassRequest>:
{
 80075bc:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80075be:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075c2:	2207      	movs	r2, #7
{
 80075c4:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80075c6:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075c8:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075ca:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075cc:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075ce:	2321      	movs	r3, #33	; 0x21

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075d0:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075d2:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075d8:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075da:	f000 fb6a 	bl	8007cb2 <USBH_CtlReq>
  if(status == USBH_OK)
 80075de:	4605      	mov	r5, r0
 80075e0:	b920      	cbnz	r0, 80075ec <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075e2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80075e6:	2102      	movs	r1, #2
 80075e8:	4620      	mov	r0, r4
 80075ea:	4798      	blx	r3
}
 80075ec:	4628      	mov	r0, r5
 80075ee:	bd38      	pop	{r3, r4, r5, pc}

080075f0 <USBH_CDC_TransmitCallback>:
 80075f0:	4770      	bx	lr

080075f2 <USBH_CDC_ReceiveCallback>:
 80075f2:	4770      	bx	lr

080075f4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80075f4:	4770      	bx	lr

080075f6 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80075f6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80075fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80075fc:	69dc      	ldr	r4, [r3, #28]
{
 80075fe:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8007600:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8007604:	2b04      	cmp	r3, #4
 8007606:	d817      	bhi.n	8007638 <USBH_CDC_Process+0x42>
 8007608:	e8df f003 	tbb	[pc, r3]
 800760c:	42180603 	.word	0x42180603
 8007610:	ba          	.byte	0xba
 8007611:	00          	.byte	0x00
    status = USBH_OK;
 8007612:	2000      	movs	r0, #0
}
 8007614:	b003      	add	sp, #12
 8007616:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007618:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800761a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800761c:	2207      	movs	r2, #7
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800761e:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007620:	2320      	movs	r3, #32
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007622:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007624:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800762a:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800762c:	f000 fb41 	bl	8007cb2 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8007630:	bb50      	cbnz	r0, 8007688 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007632:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8007634:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8007638:	2001      	movs	r0, #1
 800763a:	e7eb      	b.n	8007614 <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800763c:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800763e:	2207      	movs	r2, #7
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007640:	f104 0140 	add.w	r1, r4, #64	; 0x40
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007644:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007646:	2321      	movs	r3, #33	; 0x21
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007648:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800764a:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007650:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007652:	f000 fb2e 	bl	8007cb2 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8007656:	b9b8      	cbnz	r0, 8007688 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007658:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800765a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800765c:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
      CDC_Handle->state = CDC_IDLE_STATE;
 8007660:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800766a:	4291      	cmp	r1, r2
 800766c:	d1e4      	bne.n	8007638 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800766e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007672:	795a      	ldrb	r2, [r3, #5]
 8007674:	4291      	cmp	r1, r2
 8007676:	d1df      	bne.n	8007638 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007678:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d1db      	bne.n	8007638 <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 8007680:	4628      	mov	r0, r5
 8007682:	f7ff ffb7 	bl	80075f4 <USBH_CDC_LineCodingChanged>
 8007686:	e7d7      	b.n	8007638 <USBH_CDC_Process+0x42>
      if(req_status != USBH_BUSY)
 8007688:	2801      	cmp	r0, #1
 800768a:	d0d5      	beq.n	8007638 <USBH_CDC_Process+0x42>
        CDC_Handle->state = CDC_ERROR_STATE;
 800768c:	2304      	movs	r3, #4
 800768e:	e7d1      	b.n	8007634 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8007690:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8007694:	2901      	cmp	r1, #1
 8007696:	d02b      	beq.n	80076f0 <USBH_CDC_Process+0xfa>
 8007698:	2902      	cmp	r1, #2
 800769a:	d038      	beq.n	800770e <USBH_CDC_Process+0x118>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800769c:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80076a0:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 80076a2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d059      	beq.n	800775e <USBH_CDC_Process+0x168>
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d1c4      	bne.n	8007638 <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076ae:	7b21      	ldrb	r1, [r4, #12]
 80076b0:	4628      	mov	r0, r5
 80076b2:	f002 fa05 	bl	8009ac0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80076b6:	2801      	cmp	r0, #1
 80076b8:	d1be      	bne.n	8007638 <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076ba:	7b21      	ldrb	r1, [r4, #12]
 80076bc:	4628      	mov	r0, r5
 80076be:	f002 f9bb 	bl	8009a38 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076c4:	4298      	cmp	r0, r3
 80076c6:	d054      	beq.n	8007772 <USBH_CDC_Process+0x17c>
 80076c8:	8b62      	ldrh	r2, [r4, #26]
 80076ca:	4290      	cmp	r0, r2
 80076cc:	d951      	bls.n	8007772 <USBH_CDC_Process+0x17c>
        CDC_Handle->RxDataLength -= length ;
 80076ce:	1a1b      	subs	r3, r3, r0
 80076d0:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80076d2:	6a23      	ldr	r3, [r4, #32]
 80076d4:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80076d6:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 80076d8:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80076da:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80076de:	2104      	movs	r1, #4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80076e6:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076ea:	f000 fe03 	bl	80082f4 <osMessagePut>
 80076ee:	e7a3      	b.n	8007638 <USBH_CDC_Process+0x42>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076f2:	8b22      	ldrh	r2, [r4, #24]
 80076f4:	7b63      	ldrb	r3, [r4, #13]
 80076f6:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80076f8:	9100      	str	r1, [sp, #0]
      USBH_BulkSendData (phost,
 80076fa:	69e1      	ldr	r1, [r4, #28]
 80076fc:	bf98      	it	ls
 80076fe:	b282      	uxthls	r2, r0
 8007700:	4628      	mov	r0, r5
 8007702:	f000 fd3a 	bl	800817a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007706:	2302      	movs	r3, #2
 8007708:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800770c:	e7c6      	b.n	800769c <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800770e:	7b61      	ldrb	r1, [r4, #13]
 8007710:	f002 f9d6 	bl	8009ac0 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8007714:	2801      	cmp	r0, #1
 8007716:	d11f      	bne.n	8007758 <USBH_CDC_Process+0x162>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800771a:	8b22      	ldrh	r2, [r4, #24]
 800771c:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800771e:	bf89      	itett	hi
 8007720:	1a9b      	subhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8007722:	2300      	movls	r3, #0
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007724:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007726:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8007728:	bf92      	itee	ls
 800772a:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800772c:	189b      	addhi	r3, r3, r2
 800772e:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8007730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007732:	b11b      	cbz	r3, 800773c <USBH_CDC_Process+0x146>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007734:	2301      	movs	r3, #1
 8007736:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800773a:	e004      	b.n	8007746 <USBH_CDC_Process+0x150>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800773c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8007740:	4628      	mov	r0, r5
 8007742:	f7ff ff55 	bl	80075f0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007746:	2104      	movs	r1, #4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007748:	2200      	movs	r2, #0
 800774a:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800774e:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007752:	f000 fdcf 	bl	80082f4 <osMessagePut>
 8007756:	e7a1      	b.n	800769c <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8007758:	2802      	cmp	r0, #2
 800775a:	d19f      	bne.n	800769c <USBH_CDC_Process+0xa6>
 800775c:	e7ea      	b.n	8007734 <USBH_CDC_Process+0x13e>
    USBH_BulkReceiveData (phost,
 800775e:	7b23      	ldrb	r3, [r4, #12]
 8007760:	4628      	mov	r0, r5
 8007762:	8b62      	ldrh	r2, [r4, #26]
 8007764:	6a21      	ldr	r1, [r4, #32]
 8007766:	f000 fd20 	bl	80081aa <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800776a:	2304      	movs	r3, #4
 800776c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 8007770:	e762      	b.n	8007638 <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007772:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 8007774:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007776:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800777a:	f7ff ff3a 	bl	80075f2 <USBH_CDC_ReceiveCallback>
 800777e:	e7ae      	b.n	80076de <USBH_CDC_Process+0xe8>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8007780:	2100      	movs	r1, #0
 8007782:	f000 fcb4 	bl	80080ee <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8007786:	2800      	cmp	r0, #0
 8007788:	f47f af56 	bne.w	8007638 <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800778c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8007790:	e752      	b.n	8007638 <USBH_CDC_Process+0x42>

08007792 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007792:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8007796:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800779a:	2100      	movs	r1, #0
 800779c:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d1fb      	bne.n	800779c <DeInitStateMachine+0xa>
 80077a4:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80077a8:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80077b2:	4291      	cmp	r1, r2
 80077b4:	d1fb      	bne.n	80077ae <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80077b6:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80077b8:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 80077ba:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80077bc:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80077be:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 80077c0:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 80077c4:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80077c6:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 80077c8:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077ca:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80077ce:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 80077d2:	2000      	movs	r0, #0
 80077d4:	4770      	bx	lr
	...

080077d8 <USBH_Init>:
{
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	460c      	mov	r4, r1
 80077dc:	b088      	sub	sp, #32
  if(phost == NULL)
 80077de:	4605      	mov	r5, r0
 80077e0:	b348      	cbz	r0, 8007836 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 80077e2:	2300      	movs	r3, #0
  phost->id = id;
 80077e4:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 80077e8:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 80077ec:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 80077f0:	f7ff ffcf 	bl	8007792 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 80077f4:	b10c      	cbz	r4, 80077fa <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 80077f6:	f8c5 43c8 	str.w	r4, [r5, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80077fa:	4c10      	ldr	r4, [pc, #64]	; (800783c <USBH_Init+0x64>)
 80077fc:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80077fe:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007800:	e894 0003 	ldmia.w	r4, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007804:	3408      	adds	r4, #8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007806:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fd6c 	bl	80082ea <osMessageCreate>
 8007812:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007818:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800781a:	6823      	ldr	r3, [r4, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800781c:	4629      	mov	r1, r5
 800781e:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007820:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8007822:	f000 fd42 	bl	80082aa <osThreadCreate>
 8007826:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
  USBH_LL_Init(phost);
 800782a:	4628      	mov	r0, r5
 800782c:	f002 f8a4 	bl	8009978 <USBH_LL_Init>
  return USBH_OK;
 8007830:	2000      	movs	r0, #0
}
 8007832:	b008      	add	sp, #32
 8007834:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8007836:	2002      	movs	r0, #2
 8007838:	e7fb      	b.n	8007832 <USBH_Init+0x5a>
 800783a:	bf00      	nop
 800783c:	08009db8 	.word	0x08009db8

08007840 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8007840:	b149      	cbz	r1, 8007856 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007842:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007846:	b933      	cbnz	r3, 8007856 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007848:	2201      	movs	r2, #1
 800784a:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 800784e:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
      status = USBH_OK;
 8007852:	4618      	mov	r0, r3
 8007854:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007856:	2002      	movs	r0, #2
  }

  return status;
}
 8007858:	4770      	bx	lr

0800785a <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800785a:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 800785e:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8007860:	bf86      	itte	hi
 8007862:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8007866:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007868:	2002      	movls	r0, #2
  }
  return status;
}
 800786a:	4770      	bx	lr

0800786c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007870:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8007874:	b2e5      	uxtb	r5, r4
 8007876:	428e      	cmp	r6, r1
 8007878:	d001      	beq.n	800787e <USBH_FindInterface+0x12>
 800787a:	29ff      	cmp	r1, #255	; 0xff
 800787c:	d10b      	bne.n	8007896 <USBH_FindInterface+0x2a>
 800787e:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8007882:	4296      	cmp	r6, r2
 8007884:	d001      	beq.n	800788a <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007886:	2aff      	cmp	r2, #255	; 0xff
 8007888:	d105      	bne.n	8007896 <USBH_FindInterface+0x2a>
 800788a:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800788e:	429e      	cmp	r6, r3
 8007890:	d006      	beq.n	80078a0 <USBH_FindInterface+0x34>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007892:	2bff      	cmp	r3, #255	; 0xff
 8007894:	d004      	beq.n	80078a0 <USBH_FindInterface+0x34>
 8007896:	3401      	adds	r4, #1
 8007898:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800789a:	2c02      	cmp	r4, #2
 800789c:	d1e8      	bne.n	8007870 <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800789e:	25ff      	movs	r5, #255	; 0xff
}
 80078a0:	4628      	mov	r0, r5
 80078a2:	bd70      	pop	{r4, r5, r6, pc}

080078a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80078a8:	f002 f88e 	bl	80099c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80078ac:	2101      	movs	r1, #1
 80078ae:	4620      	mov	r0, r4
 80078b0:	f002 f90a 	bl	8009ac8 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80078b4:	2000      	movs	r0, #0
 80078b6:	bd10      	pop	{r4, pc}

080078b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80078b8:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80078ba:	2302      	movs	r3, #2
{
 80078bc:	b087      	sub	sp, #28
 80078be:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80078c0:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80078c4:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80078c8:	b933      	cbnz	r3, 80078d8 <USBH_Process+0x20>
 80078ca:	7802      	ldrb	r2, [r0, #0]
 80078cc:	b122      	cbz	r2, 80078d8 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80078ce:	7802      	ldrb	r2, [r0, #0]
 80078d0:	2a03      	cmp	r2, #3
 80078d2:	d001      	beq.n	80078d8 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 80078d4:	2203      	movs	r2, #3
 80078d6:	7002      	strb	r2, [r0, #0]
  switch (phost->gState)
 80078d8:	7822      	ldrb	r2, [r4, #0]
 80078da:	2a0b      	cmp	r2, #11
 80078dc:	d820      	bhi.n	8007920 <USBH_Process+0x68>
 80078de:	e8df f012 	tbh	[pc, r2, lsl #1]
 80078e2:	000c      	.short	0x000c
 80078e4:	00270022 	.word	0x00270022
 80078e8:	001f0164 	.word	0x001f0164
 80078ec:	0149005b 	.word	0x0149005b
 80078f0:	010f0104 	.word	0x010f0104
 80078f4:	0128011c 	.word	0x0128011c
 80078f8:	015b      	.short	0x015b
    if (phost->device.is_connected)
 80078fa:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80078fe:	b17b      	cbz	r3, 8007920 <USBH_Process+0x68>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007900:	2501      	movs	r5, #1
      USBH_Delay(200U);
 8007902:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007904:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 8007906:	f002 f8fb 	bl	8009b00 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800790a:	4620      	mov	r0, r4
 800790c:	f002 f886 	bl	8009a1c <USBH_LL_ResetPort>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007910:	2200      	movs	r2, #0
 8007912:	4629      	mov	r1, r5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007914:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007918:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800791c:	f000 fcea 	bl	80082f4 <osMessagePut>
}
 8007920:	2000      	movs	r0, #0
 8007922:	b007      	add	sp, #28
 8007924:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8007926:	2b01      	cmp	r3, #1
 8007928:	d1fa      	bne.n	8007920 <USBH_Process+0x68>
      phost->gState = HOST_DEV_ATTACHED;
 800792a:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 800792c:	7023      	strb	r3, [r4, #0]
 800792e:	e7f7      	b.n	8007920 <USBH_Process+0x68>
    USBH_Delay(100U);
 8007930:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 8007932:	2500      	movs	r5, #0
    USBH_Delay(100U);
 8007934:	f002 f8e4 	bl	8009b00 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007938:	4620      	mov	r0, r4
 800793a:	f002 f861 	bl	8009a00 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800793e:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007940:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007944:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 8007946:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fc52 	bl	80081f2 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800794e:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007950:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fc4d 	bl	80081f2 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8007958:	79a2      	ldrb	r2, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800795a:	4601      	mov	r1, r0
 800795c:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 800795e:	9202      	str	r2, [sp, #8]
 8007960:	4620      	mov	r0, r4
 8007962:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8007966:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800796a:	9200      	str	r2, [sp, #0]
 800796c:	2280      	movs	r2, #128	; 0x80
 800796e:	9501      	str	r5, [sp, #4]
 8007970:	f000 fc2b 	bl	80081ca <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 8007974:	79a2      	ldrb	r2, [r4, #6]
 8007976:	7961      	ldrb	r1, [r4, #5]
 8007978:	4620      	mov	r0, r4
 800797a:	9202      	str	r2, [sp, #8]
 800797c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8007980:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007984:	9200      	str	r2, [sp, #0]
 8007986:	462a      	mov	r2, r5
 8007988:	9501      	str	r5, [sp, #4]
 800798a:	f000 fc1e 	bl	80081ca <USBH_OpenPipe>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800798e:	2101      	movs	r1, #1
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007990:	462a      	mov	r2, r5
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007992:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 8007996:	e7bf      	b.n	8007918 <USBH_Process+0x60>
  switch (phost->EnumState)
 8007998:	7863      	ldrb	r3, [r4, #1]
 800799a:	2b07      	cmp	r3, #7
 800799c:	d8c0      	bhi.n	8007920 <USBH_Process+0x68>
 800799e:	e8df f003 	tbb	[pc, r3]
 80079a2:	2a04      	.short	0x2a04
 80079a4:	584e4533 	.word	0x584e4533
 80079a8:	8373      	.short	0x8373
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80079aa:	2108      	movs	r1, #8
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 fa77 	bl	8007ea0 <USBH_Get_DevDesc>
 80079b2:	4605      	mov	r5, r0
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d1b3      	bne.n	8007920 <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079b8:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079ba:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      USBH_OpenPipe (phost,
 80079be:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079c0:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 80079c2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079c6:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 80079c8:	9202      	str	r2, [sp, #8]
 80079ca:	4620      	mov	r0, r4
 80079cc:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80079d0:	9501      	str	r5, [sp, #4]
 80079d2:	9200      	str	r2, [sp, #0]
 80079d4:	2280      	movs	r2, #128	; 0x80
 80079d6:	f000 fbf8 	bl	80081ca <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80079da:	79a2      	ldrb	r2, [r4, #6]
 80079dc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80079e0:	4620      	mov	r0, r4
 80079e2:	9202      	str	r2, [sp, #8]
 80079e4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80079e8:	7961      	ldrb	r1, [r4, #5]
 80079ea:	9200      	str	r2, [sp, #0]
 80079ec:	462a      	mov	r2, r5
 80079ee:	9501      	str	r5, [sp, #4]
 80079f0:	f000 fbeb 	bl	80081ca <USBH_OpenPipe>
 80079f4:	e794      	b.n	8007920 <USBH_Process+0x68>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80079f6:	2112      	movs	r1, #18
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fa51 	bl	8007ea0 <USBH_Get_DevDesc>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d18e      	bne.n	8007920 <USBH_Process+0x68>
      phost->EnumState = ENUM_SET_ADDR;
 8007a02:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a04:	7063      	strb	r3, [r4, #1]
 8007a06:	e78b      	b.n	8007920 <USBH_Process+0x68>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007a08:	2101      	movs	r1, #1
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fb45 	bl	800809a <USBH_SetAddress>
 8007a10:	4605      	mov	r5, r0
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d184      	bne.n	8007920 <USBH_Process+0x68>
      USBH_Delay(2U);
 8007a16:	2002      	movs	r0, #2
 8007a18:	f002 f872 	bl	8009b00 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007a1c:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007a1e:	2301      	movs	r3, #1
      USBH_OpenPipe (phost,
 8007a20:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007a22:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007a24:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8007a28:	79a2      	ldrb	r2, [r4, #6]
 8007a2a:	e7cd      	b.n	80079c8 <USBH_Process+0x110>
    if ( USBH_Get_CfgDesc(phost,
 8007a2c:	2109      	movs	r1, #9
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fa7e 	bl	8007f30 <USBH_Get_CfgDesc>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f47f af73 	bne.w	8007920 <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	e7e2      	b.n	8007a04 <USBH_Process+0x14c>
    if (USBH_Get_CfgDesc(phost,
 8007a3e:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 fa74 	bl	8007f30 <USBH_Get_CfgDesc>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f47f af69 	bne.w	8007920 <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a4e:	2305      	movs	r3, #5
 8007a50:	e7d8      	b.n	8007a04 <USBH_Process+0x14c>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007a52:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8007a56:	b179      	cbz	r1, 8007a78 <USBH_Process+0x1c0>
      if ( USBH_Get_StringDesc(phost,
 8007a58:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8007a5c:	23ff      	movs	r3, #255	; 0xff
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f000 faf4 	bl	800804c <USBH_Get_StringDesc>
 8007a64:	4602      	mov	r2, r0
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f47f af5a 	bne.w	8007920 <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a6c:	2306      	movs	r3, #6
 8007a6e:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a70:	2105      	movs	r1, #5
 8007a72:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 8007a76:	e74f      	b.n	8007918 <USBH_Process+0x60>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a78:	2306      	movs	r3, #6
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a7a:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a7c:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a7e:	460a      	mov	r2, r1
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a80:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a84:	4619      	mov	r1, r3
 8007a86:	e747      	b.n	8007918 <USBH_Process+0x60>
    if (phost->device.DevDesc.iProduct != 0U)
 8007a88:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8007a8c:	b151      	cbz	r1, 8007aa4 <USBH_Process+0x1ec>
      if ( USBH_Get_StringDesc(phost,
 8007a8e:	23ff      	movs	r3, #255	; 0xff
 8007a90:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 fad9 	bl	800804c <USBH_Get_StringDesc>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f47f af40 	bne.w	8007920 <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007aa0:	2307      	movs	r3, #7
 8007aa2:	e7af      	b.n	8007a04 <USBH_Process+0x14c>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007aa4:	2307      	movs	r3, #7
 8007aa6:	e7e8      	b.n	8007a7a <USBH_Process+0x1c2>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007aa8:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 8007aac:	b189      	cbz	r1, 8007ad2 <USBH_Process+0x21a>
      if ( USBH_Get_StringDesc(phost,
 8007aae:	23ff      	movs	r3, #255	; 0xff
 8007ab0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f000 fac9 	bl	800804c <USBH_Get_StringDesc>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f47f af30 	bne.w	8007920 <USBH_Process+0x68>
      phost->device.current_interface = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007ac6:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d10b      	bne.n	8007ae6 <USBH_Process+0x22e>
        phost->gState  = HOST_SET_CONFIGURATION;
 8007ace:	2308      	movs	r3, #8
 8007ad0:	e72c      	b.n	800792c <USBH_Process+0x74>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ad2:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ad4:	460a      	mov	r2, r1
 8007ad6:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ada:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ade:	4619      	mov	r1, r3
 8007ae0:	f000 fc08 	bl	80082f4 <osMessagePut>
 8007ae4:	e7ec      	b.n	8007ac0 <USBH_Process+0x208>
        phost->gState  = HOST_INPUT;
 8007ae6:	2307      	movs	r3, #7
 8007ae8:	e720      	b.n	800792c <USBH_Process+0x74>
      if(phost->pUser != NULL)
 8007aea:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f43f af16 	beq.w	8007920 <USBH_Process+0x68>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007af4:	2101      	movs	r1, #1
 8007af6:	4620      	mov	r0, r4
 8007af8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007afa:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 8007afc:	7023      	strb	r3, [r4, #0]
 8007afe:	e035      	b.n	8007b6c <USBH_Process+0x2b4>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b00:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fad6 	bl	80080b6 <USBH_SetCfg>
 8007b0a:	b908      	cbnz	r0, 8007b10 <USBH_Process+0x258>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007b0c:	2309      	movs	r3, #9
      phost->gState  = HOST_CHECK_CLASS;
 8007b0e:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b10:	2101      	movs	r1, #1
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b12:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b16:	2200      	movs	r2, #0
 8007b18:	e6fe      	b.n	8007918 <USBH_Process+0x60>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007b1a:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 8007b1e:	069b      	lsls	r3, r3, #26
 8007b20:	d505      	bpl.n	8007b2e <USBH_Process+0x276>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007b22:	2101      	movs	r1, #1
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 fad4 	bl	80080d2 <USBH_SetFeature>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d1f0      	bne.n	8007b10 <USBH_Process+0x258>
      phost->gState  = HOST_CHECK_CLASS;
 8007b2e:	230a      	movs	r3, #10
 8007b30:	e7ed      	b.n	8007b0e <USBH_Process+0x256>
    if(phost->ClassNumber == 0U)
 8007b32:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007b36:	b1cb      	cbz	r3, 8007b6c <USBH_Process+0x2b4>
      phost->pActiveClass = NULL;
 8007b38:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b3a:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
      phost->pActiveClass = NULL;
 8007b3e:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b42:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8007b46:	7919      	ldrb	r1, [r3, #4]
 8007b48:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8007b4a:	bf08      	it	eq
 8007b4c:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8007b50:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8007b54:	b163      	cbz	r3, 8007b70 <USBH_Process+0x2b8>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4620      	mov	r0, r4
 8007b5a:	4798      	blx	r3
 8007b5c:	b940      	cbnz	r0, 8007b70 <USBH_Process+0x2b8>
          phost->gState  = HOST_CLASS_REQUEST;
 8007b5e:	2306      	movs	r3, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b60:	2103      	movs	r1, #3
 8007b62:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST;
 8007b64:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b66:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8007b6a:	4798      	blx	r3
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b6c:	2105      	movs	r1, #5
 8007b6e:	e7d0      	b.n	8007b12 <USBH_Process+0x25a>
        phost->gState  = HOST_ABORT_STATE;
 8007b70:	230d      	movs	r3, #13
 8007b72:	e7c3      	b.n	8007afc <USBH_Process+0x244>
    if(phost->pActiveClass != NULL)
 8007b74:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
 8007b78:	b15a      	cbz	r2, 8007b92 <USBH_Process+0x2da>
      status = phost->pActiveClass->Requests(phost);
 8007b7a:	6913      	ldr	r3, [r2, #16]
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4798      	blx	r3
 8007b80:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8007b84:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f aec9 	bne.w	8007920 <USBH_Process+0x68>
        phost->gState  = HOST_CLASS;
 8007b8e:	230b      	movs	r3, #11
 8007b90:	e6cc      	b.n	800792c <USBH_Process+0x74>
      phost->gState  = HOST_ABORT_STATE;
 8007b92:	230d      	movs	r3, #13
 8007b94:	7023      	strb	r3, [r4, #0]
 8007b96:	e76b      	b.n	8007a70 <USBH_Process+0x1b8>
    if(phost->pActiveClass != NULL)
 8007b98:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f43f aebf 	beq.w	8007920 <USBH_Process+0x68>
      phost->pActiveClass->BgndProcess(phost);
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4798      	blx	r3
 8007ba8:	e6ba      	b.n	8007920 <USBH_Process+0x68>
    DeInitStateMachine(phost);
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff fdf1 	bl	8007792 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8007bb0:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f43f aeb3 	beq.w	8007920 <USBH_Process+0x68>
      phost->pActiveClass->DeInit(phost);
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 8007bc6:	e6ab      	b.n	8007920 <USBH_Process+0x68>

08007bc8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bca:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd0:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 8007bd4:	a801      	add	r0, sp, #4
 8007bd6:	f000 fbb5 	bl	8008344 <osMessageGet>
    if(event.status == osEventMessage)
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d1f5      	bne.n	8007bcc <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007be0:	4620      	mov	r0, r4
 8007be2:	f7ff fe69 	bl	80078b8 <USBH_Process>
 8007be6:	e7f1      	b.n	8007bcc <USBH_Process_OS+0x4>

08007be8 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8007be8:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 8007bec:	4770      	bx	lr

08007bee <USBH_LL_IncTimer>:
  phost->Timer ++;
 8007bee:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007bf8:	7802      	ldrb	r2, [r0, #0]
 8007bfa:	2a0b      	cmp	r2, #11
 8007bfc:	d104      	bne.n	8007c08 <USBH_LL_IncTimer+0x1a>
 8007bfe:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8007c02:	b10b      	cbz	r3, 8007c08 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	4718      	bx	r3
 8007c08:	4770      	bx	lr

08007c0a <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8007c10:	4770      	bx	lr

08007c12 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8007c18:	4770      	bx	lr

08007c1a <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 8007c1a:	7803      	ldrb	r3, [r0, #0]
{
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 8007c20:	b98b      	cbnz	r3, 8007c46 <USBH_LL_Connect+0x2c>
    phost->device.is_connected = 1U;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8007c28:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8007c2c:	b10b      	cbz	r3, 8007c32 <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007c2e:	2104      	movs	r1, #4
 8007c30:	4798      	blx	r3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c32:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c3a:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c3e:	f000 fb59 	bl	80082f4 <osMessagePut>
}
 8007c42:	2000      	movs	r0, #0
 8007c44:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 8007c46:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d1f1      	bne.n	8007c32 <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	7003      	strb	r3, [r0, #0]
 8007c52:	e7ee      	b.n	8007c32 <USBH_LL_Connect+0x18>

08007c54 <USBH_LL_Disconnect>:
{
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 8007c58:	f001 fec4 	bl	80099e4 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007c5c:	7921      	ldrb	r1, [r4, #4]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 fade 	bl	8008220 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007c64:	7961      	ldrb	r1, [r4, #5]
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fada 	bl	8008220 <USBH_FreePipe>
  phost->device.is_connected = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8007c72:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8007c76:	b113      	cbz	r3, 8007c7e <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c78:	2105      	movs	r1, #5
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4798      	blx	r3
  USBH_LL_Start(phost);
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f001 fea2 	bl	80099c8 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 8007c84:	2303      	movs	r3, #3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c86:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c88:	2200      	movs	r2, #0
  phost->gState = HOST_DEV_DISCONNECTED;
 8007c8a:	7023      	strb	r3, [r4, #0]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c8c:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c90:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8007c94:	f000 fb2e 	bl	80082f4 <osMessagePut>
}
 8007c98:	2000      	movs	r0, #0
 8007c9a:	bd10      	pop	{r4, pc}

08007c9c <USBH_LL_NotifyURBChange>:
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c9c:	2101      	movs	r1, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c9e:	2200      	movs	r2, #0
{
 8007ca0:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ca2:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ca6:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8007caa:	f000 fb23 	bl	80082f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 8007cae:	2000      	movs	r0, #0
 8007cb0:	bd08      	pop	{r3, pc}

08007cb2 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007cb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8007cb4:	7885      	ldrb	r5, [r0, #2]
{
 8007cb6:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8007cb8:	2d01      	cmp	r5, #1
 8007cba:	d003      	beq.n	8007cc4 <USBH_CtlReq+0x12>
 8007cbc:	2d02      	cmp	r5, #2
 8007cbe:	d00f      	beq.n	8007ce0 <USBH_CtlReq+0x2e>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8007cc0:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8007cc2:	e057      	b.n	8007d74 <USBH_CtlReq+0xc2>
    phost->RequestState = CMD_WAIT;
 8007cc4:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8007cc6:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8007cc8:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 8007cca:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8007ccc:	7083      	strb	r3, [r0, #2]
          phost->Control.state = CTRL_STATUS_IN;
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cce:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cd6:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cda:	f000 fb0b 	bl	80082f4 <osMessagePut>
 8007cde:	e7ef      	b.n	8007cc0 <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 8007ce0:	7e03      	ldrb	r3, [r0, #24]
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	2b0a      	cmp	r3, #10
 8007ce8:	d8ea      	bhi.n	8007cc0 <USBH_CtlReq+0xe>
 8007cea:	e8df f003 	tbb	[pc, r3]
 8007cee:	0e06      	.short	0x0e06
 8007cf0:	50452f25 	.word	0x50452f25
 8007cf4:	a1967a70 	.word	0xa1967a70
 8007cf8:	ab          	.byte	0xab
 8007cf9:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007cfa:	7942      	ldrb	r2, [r0, #5]
 8007cfc:	f100 0110 	add.w	r1, r0, #16
 8007d00:	f000 fa03 	bl	800810a <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8007d04:	2302      	movs	r3, #2
    USBH_CtlReceiveData(phost,
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d06:	7623      	strb	r3, [r4, #24]
 8007d08:	e7da      	b.n	8007cc0 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d0a:	7941      	ldrb	r1, [r0, #5]
 8007d0c:	f001 fed8 	bl	8009ac0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8007d10:	2801      	cmp	r0, #1
 8007d12:	d10c      	bne.n	8007d2e <USBH_CtlReq+0x7c>
      if (phost->Control.setup.b.wLength.w != 0U)
 8007d14:	8ae2      	ldrh	r2, [r4, #22]
 8007d16:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8007d1a:	b122      	cbz	r2, 8007d26 <USBH_CtlReq+0x74>
        if (direction == USB_D2H)
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	da44      	bge.n	8007daa <USBH_CtlReq+0xf8>
          phost->Control.state = CTRL_DATA_IN;
 8007d20:	2303      	movs	r3, #3
          phost->Control.state = CTRL_STATUS_IN;
 8007d22:	7623      	strb	r3, [r4, #24]
 8007d24:	e7d3      	b.n	8007cce <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	da36      	bge.n	8007d98 <USBH_CtlReq+0xe6>
#endif
#endif
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007d2a:	2309      	movs	r3, #9
 8007d2c:	e7f9      	b.n	8007d22 <USBH_CtlReq+0x70>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d2e:	2804      	cmp	r0, #4
 8007d30:	d06d      	beq.n	8007e0e <USBH_CtlReq+0x15c>
 8007d32:	2802      	cmp	r0, #2
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8007d34:	d1c4      	bne.n	8007cc0 <USBH_CtlReq+0xe>
 8007d36:	e06a      	b.n	8007e0e <USBH_CtlReq+0x15c>
    phost->Control.timer = (uint16_t)phost->Timer;
 8007d38:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8007d3c:	8982      	ldrh	r2, [r0, #12]
    phost->Control.timer = (uint16_t)phost->Timer;
 8007d3e:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 8007d40:	6881      	ldr	r1, [r0, #8]
 8007d42:	7903      	ldrb	r3, [r0, #4]
 8007d44:	f000 fa09 	bl	800815a <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d48:	2304      	movs	r3, #4
 8007d4a:	e7dc      	b.n	8007d06 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007d4c:	7901      	ldrb	r1, [r0, #4]
 8007d4e:	f001 feb7 	bl	8009ac0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8007d52:	2801      	cmp	r0, #1
 8007d54:	d0e9      	beq.n	8007d2a <USBH_CtlReq+0x78>
    if  (URB_Status == USBH_URB_STALL)
 8007d56:	2805      	cmp	r0, #5
 8007d58:	d172      	bne.n	8007e40 <USBH_CtlReq+0x18e>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d5a:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d62:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d66:	f000 fac5 	bl	80082f4 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8007d6a:	2301      	movs	r3, #1
      status = USBH_NOT_SUPPORTED;
 8007d6c:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8007d6e:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	7623      	strb	r3, [r4, #24]
}
 8007d74:	b003      	add	sp, #12
 8007d76:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 8007d78:	7943      	ldrb	r3, [r0, #5]
 8007d7a:	8982      	ldrh	r2, [r0, #12]
 8007d7c:	9100      	str	r1, [sp, #0]
 8007d7e:	6881      	ldr	r1, [r0, #8]
 8007d80:	f000 f9d4 	bl	800812c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8007d84:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8007d88:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007d8a:	2306      	movs	r3, #6
 8007d8c:	e7bb      	b.n	8007d06 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007d8e:	7941      	ldrb	r1, [r0, #5]
 8007d90:	f001 fe96 	bl	8009ac0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8007d94:	2801      	cmp	r0, #1
 8007d96:	d101      	bne.n	8007d9c <USBH_CtlReq+0xea>
          phost->Control.state = CTRL_STATUS_IN;
 8007d98:	2307      	movs	r3, #7
 8007d9a:	e7c2      	b.n	8007d22 <USBH_CtlReq+0x70>
    else if  (URB_Status == USBH_URB_STALL)
 8007d9c:	2805      	cmp	r0, #5
 8007d9e:	d102      	bne.n	8007da6 <USBH_CtlReq+0xf4>
      phost->Control.state = CTRL_STALLED;
 8007da0:	230c      	movs	r3, #12
 8007da2:	7623      	strb	r3, [r4, #24]
 8007da4:	e7d9      	b.n	8007d5a <USBH_CtlReq+0xa8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007da6:	2802      	cmp	r0, #2
 8007da8:	d101      	bne.n	8007dae <USBH_CtlReq+0xfc>
      phost->Control.state = CTRL_DATA_OUT;
 8007daa:	2305      	movs	r3, #5
 8007dac:	e7b9      	b.n	8007d22 <USBH_CtlReq+0x70>
      if (URB_Status == USBH_URB_ERROR)
 8007dae:	2804      	cmp	r0, #4
 8007db0:	d186      	bne.n	8007cc0 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8007db2:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007db4:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8007dbc:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dbe:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dc2:	f000 fa97 	bl	80082f4 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8007dc6:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8007dc8:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8007dca:	70a3      	strb	r3, [r4, #2]
 8007dcc:	e7d2      	b.n	8007d74 <USBH_CtlReq+0xc2>
    USBH_CtlReceiveData (phost,
 8007dce:	2200      	movs	r2, #0
 8007dd0:	7903      	ldrb	r3, [r0, #4]
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	f000 f9c1 	bl	800815a <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8007dd8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8007ddc:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007dde:	2308      	movs	r3, #8
 8007de0:	e791      	b.n	8007d06 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007de2:	7901      	ldrb	r1, [r0, #4]
 8007de4:	f001 fe6c 	bl	8009ac0 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8007de8:	2801      	cmp	r0, #1
 8007dea:	d10e      	bne.n	8007e0a <USBH_CtlReq+0x158>
      phost->Control.state = CTRL_COMPLETE;
 8007dec:	230d      	movs	r3, #13
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dee:	2103      	movs	r1, #3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8007df6:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007df8:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dfc:	f000 fa7a 	bl	80082f4 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8007e00:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8007e02:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8007e04:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8007e06:	7620      	strb	r0, [r4, #24]
 8007e08:	e7b4      	b.n	8007d74 <USBH_CtlReq+0xc2>
    else if (URB_Status == USBH_URB_ERROR)
 8007e0a:	2804      	cmp	r0, #4
 8007e0c:	d101      	bne.n	8007e12 <USBH_CtlReq+0x160>
      {
        phost->Control.state = CTRL_ERROR;
 8007e0e:	230b      	movs	r3, #11
 8007e10:	e787      	b.n	8007d22 <USBH_CtlReq+0x70>
      if(URB_Status == USBH_URB_STALL)
 8007e12:	2805      	cmp	r0, #5
 8007e14:	f47f af54 	bne.w	8007cc0 <USBH_CtlReq+0xe>
 8007e18:	e79f      	b.n	8007d5a <USBH_CtlReq+0xa8>
    USBH_CtlSendData (phost,
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	7943      	ldrb	r3, [r0, #5]
 8007e1e:	9100      	str	r1, [sp, #0]
 8007e20:	4611      	mov	r1, r2
 8007e22:	f000 f983 	bl	800812c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8007e26:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8007e2a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e2c:	230a      	movs	r3, #10
 8007e2e:	e76a      	b.n	8007d06 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007e30:	7941      	ldrb	r1, [r0, #5]
 8007e32:	f001 fe45 	bl	8009ac0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8007e36:	2801      	cmp	r0, #1
 8007e38:	d0d8      	beq.n	8007dec <USBH_CtlReq+0x13a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007e3a:	2802      	cmp	r0, #2
 8007e3c:	f43f af75 	beq.w	8007d2a <USBH_CtlReq+0x78>
      if (URB_Status == USBH_URB_ERROR)
 8007e40:	2804      	cmp	r0, #4
 8007e42:	e777      	b.n	8007d34 <USBH_CtlReq+0x82>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e44:	7e43      	ldrb	r3, [r0, #25]
 8007e46:	3301      	adds	r3, #1
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	7643      	strb	r3, [r0, #25]
 8007e4e:	d805      	bhi.n	8007e5c <USBH_CtlReq+0x1aa>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007e50:	f001 fdc8 	bl	80099e4 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007e54:	2301      	movs	r3, #1
 8007e56:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8007e58:	70a3      	strb	r3, [r4, #2]
 8007e5a:	e731      	b.n	8007cc0 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e5c:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8007e60:	2106      	movs	r1, #6
 8007e62:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	7663      	strb	r3, [r4, #25]
 8007e68:	e7ad      	b.n	8007dc6 <USBH_CtlReq+0x114>

08007e6a <USBH_GetDescriptor>:
{
 8007e6a:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8007e6c:	7884      	ldrb	r4, [r0, #2]
{
 8007e6e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8007e72:	2c01      	cmp	r4, #1
 8007e74:	d10f      	bne.n	8007e96 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e76:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 8007e7a:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e7c:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length;
 8007e7e:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e80:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e82:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e86:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e88:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e8c:	bf0c      	ite	eq
 8007e8e:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8007e92:	2200      	movne	r2, #0
 8007e94:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 8007e96:	462a      	mov	r2, r5
 8007e98:	4619      	mov	r1, r3
}
 8007e9a:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8007e9c:	f7ff bf09 	b.w	8007cb2 <USBH_CtlReq>

08007ea0 <USBH_Get_DevDesc>:
{
 8007ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8007ea2:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8007ea6:	460d      	mov	r5, r1
 8007ea8:	9100      	str	r1, [sp, #0]
 8007eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eae:	2100      	movs	r1, #0
{
 8007eb0:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8007eb2:	f7ff ffda 	bl	8007e6a <USBH_GetDescriptor>
 8007eb6:	bbc8      	cbnz	r0, 8007f2c <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007eb8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 8007ebc:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007ebe:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007ec2:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8007ec6:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007eca:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8007ece:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007ed2:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8007ed6:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007eda:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8007ede:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007ee2:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8007ee6:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007eea:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8007eee:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8007ef2:	d91b      	bls.n	8007f2c <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8007ef4:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8007ef8:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8007efc:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8007f00:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007f04:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8007f08:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007f0c:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8007f10:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007f14:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8007f18:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007f1c:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8007f20:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007f24:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8007f28:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8007f2c:	b003      	add	sp, #12
 8007f2e:	bd30      	pop	{r4, r5, pc}

08007f30 <USBH_Get_CfgDesc>:
{
 8007f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8007f34:	f100 051c 	add.w	r5, r0, #28
{
 8007f38:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8007f3a:	9100      	str	r1, [sp, #0]
 8007f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f40:	462b      	mov	r3, r5
 8007f42:	2100      	movs	r1, #0
{
 8007f44:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8007f46:	f7ff ff90 	bl	8007e6a <USBH_GetDescriptor>
 8007f4a:	bb48      	cbnz	r0, 8007fa0 <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007f4c:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f4e:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007f50:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007f54:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007f58:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007f5a:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007f5e:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007f62:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007f66:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007f6a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8007f6e:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007f72:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007f76:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007f7a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007f7e:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007f82:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007f86:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f8a:	d909      	bls.n	8007fa0 <USBH_Get_CfgDesc+0x70>
 8007f8c:	4627      	mov	r7, r4
 8007f8e:	462b      	mov	r3, r5
 8007f90:	4606      	mov	r6, r0
 8007f92:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007f94:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f98:	2e02      	cmp	r6, #2
 8007f9a:	d001      	beq.n	8007fa0 <USBH_Get_CfgDesc+0x70>
 8007f9c:	4596      	cmp	lr, r2
 8007f9e:	d802      	bhi.n	8007fa6 <USBH_Get_CfgDesc+0x76>
}
 8007fa0:	b003      	add	sp, #12
 8007fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fa6:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007fa8:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007faa:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007fac:	7859      	ldrb	r1, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fae:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007fb0:	2904      	cmp	r1, #4
 8007fb2:	d1f1      	bne.n	8007f98 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007fb4:	7819      	ldrb	r1, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007fb6:	fb0c f806 	mul.w	r8, ip, r6
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007fba:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007fbe:	7859      	ldrb	r1, [r3, #1]
 8007fc0:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007fc4:	7899      	ldrb	r1, [r3, #2]
 8007fc6:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007fca:	78d9      	ldrb	r1, [r3, #3]
 8007fcc:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007fd0:	7919      	ldrb	r1, [r3, #4]
 8007fd2:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007fd6:	7959      	ldrb	r1, [r3, #5]
 8007fd8:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007fdc:	7999      	ldrb	r1, [r3, #6]
 8007fde:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007fe2:	79d9      	ldrb	r1, [r3, #7]
 8007fe4:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007fe8:	7a19      	ldrb	r1, [r3, #8]
 8007fea:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
        ep_ix = 0U;
 8007fee:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ff0:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8007ff4:	428d      	cmp	r5, r1
 8007ff6:	d802      	bhi.n	8007ffe <USBH_Get_CfgDesc+0xce>
 8007ff8:	3601      	adds	r6, #1
 8007ffa:	371a      	adds	r7, #26
 8007ffc:	e7cc      	b.n	8007f98 <USBH_Get_CfgDesc+0x68>
 8007ffe:	4596      	cmp	lr, r2
 8008000:	d9fa      	bls.n	8007ff8 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008002:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008004:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008006:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008008:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800800a:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800800c:	2d05      	cmp	r5, #5
 800800e:	d1ef      	bne.n	8007ff0 <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008010:	1c4d      	adds	r5, r1, #1
 8008012:	f893 9000 	ldrb.w	r9, [r3]
 8008016:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 800801a:	4421      	add	r1, r4
 800801c:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008020:	f893 9001 	ldrb.w	r9, [r3, #1]
 8008024:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008028:	f893 9002 	ldrb.w	r9, [r3, #2]
 800802c:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008030:	f893 9003 	ldrb.w	r9, [r3, #3]
 8008034:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008038:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800803c:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008040:	f893 9006 	ldrb.w	r9, [r3, #6]
 8008044:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8008048:	b2e9      	uxtb	r1, r5
 800804a:	e7d1      	b.n	8007ff0 <USBH_Get_CfgDesc+0xc0>

0800804c <USBH_Get_StringDesc>:
{
 800804c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800804e:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8008052:	4614      	mov	r4, r2
 8008054:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800805c:	462b      	mov	r3, r5
 800805e:	2100      	movs	r1, #0
{
 8008060:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8008062:	f7ff ff02 	bl	8007e6a <USBH_GetDescriptor>
 8008066:	b978      	cbnz	r0, 8008088 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008068:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800806c:	2b03      	cmp	r3, #3
 800806e:	d10b      	bne.n	8008088 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008070:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 8008074:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008076:	3b02      	subs	r3, #2
 8008078:	42bb      	cmp	r3, r7
 800807a:	bf28      	it	cs
 800807c:	463b      	movcs	r3, r7
 800807e:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8008080:	4293      	cmp	r3, r2
 8008082:	d803      	bhi.n	800808c <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8008084:	2300      	movs	r3, #0
 8008086:	7023      	strb	r3, [r4, #0]
}
 8008088:	b003      	add	sp, #12
 800808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800808c:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800808e:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8008090:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008092:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 8008094:	f804 1b01 	strb.w	r1, [r4], #1
 8008098:	e7f2      	b.n	8008080 <USBH_Get_StringDesc+0x34>

0800809a <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 800809a:	7883      	ldrb	r3, [r0, #2]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d106      	bne.n	80080ae <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080a0:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080a2:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080a4:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080a6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080a8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 80080aa:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080ac:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80080ae:	2200      	movs	r2, #0
 80080b0:	4611      	mov	r1, r2
 80080b2:	f7ff bdfe 	b.w	8007cb2 <USBH_CtlReq>

080080b6 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80080b6:	7883      	ldrb	r3, [r0, #2]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d106      	bne.n	80080ca <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080bc:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080be:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080c0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080c2:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080c4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 80080c6:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080c8:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 80080ca:	2200      	movs	r2, #0
 80080cc:	4611      	mov	r1, r2
 80080ce:	f7ff bdf0 	b.w	8007cb2 <USBH_CtlReq>

080080d2 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 80080d2:	7883      	ldrb	r3, [r0, #2]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d106      	bne.n	80080e6 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080d8:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080da:	2203      	movs	r2, #3
    phost->Control.setup.b.wValue.w = wValue;
 80080dc:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080de:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080e0:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 80080e2:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080e4:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80080e6:	2200      	movs	r2, #0
 80080e8:	4611      	mov	r1, r2
 80080ea:	f7ff bde2 	b.w	8007cb2 <USBH_CtlReq>

080080ee <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 80080ee:	7883      	ldrb	r3, [r0, #2]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d106      	bne.n	8008102 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080f4:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080f6:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080f8:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 80080fa:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080fc:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080fe:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wLength.w = 0U;
 8008100:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8008102:	2200      	movs	r2, #0
 8008104:	4611      	mov	r1, r2
 8008106:	f7ff bdd4 	b.w	8007cb2 <USBH_CtlReq>

0800810a <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800810a:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800810c:	2308      	movs	r3, #8
{
 800810e:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008110:	2400      	movs	r4, #0
{
 8008112:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008114:	9302      	str	r3, [sp, #8]
 8008116:	9101      	str	r1, [sp, #4]
 8008118:	4623      	mov	r3, r4
 800811a:	9403      	str	r4, [sp, #12]
 800811c:	4622      	mov	r2, r4
 800811e:	9400      	str	r4, [sp, #0]
 8008120:	4629      	mov	r1, r5
 8008122:	f001 fcb3 	bl	8009a8c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8008126:	4620      	mov	r0, r4
 8008128:	b005      	add	sp, #20
 800812a:	bd30      	pop	{r4, r5, pc}

0800812c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800812c:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800812e:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8008132:	b085      	sub	sp, #20
 8008134:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008136:	2d00      	cmp	r5, #0
{
 8008138:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800813c:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800813e:	bf18      	it	ne
 8008140:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008142:	9101      	str	r1, [sp, #4]
 8008144:	4621      	mov	r1, r4
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	2301      	movs	r3, #1
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	461a      	mov	r2, r3
 8008150:	f001 fc9c 	bl	8009a8c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8008154:	2000      	movs	r0, #0
 8008156:	b005      	add	sp, #20
 8008158:	bd30      	pop	{r4, r5, pc}

0800815a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800815a:	b530      	push	{r4, r5, lr}
 800815c:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800815e:	2400      	movs	r4, #0
{
 8008160:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008162:	9202      	str	r2, [sp, #8]
 8008164:	2201      	movs	r2, #1
 8008166:	9101      	str	r1, [sp, #4]
 8008168:	4623      	mov	r3, r4
 800816a:	9403      	str	r4, [sp, #12]
 800816c:	4629      	mov	r1, r5
 800816e:	9200      	str	r2, [sp, #0]
 8008170:	f001 fc8c 	bl	8009a8c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8008174:	4620      	mov	r0, r4
 8008176:	b005      	add	sp, #20
 8008178:	bd30      	pop	{r4, r5, pc}

0800817a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800817a:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800817c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8008180:	b085      	sub	sp, #20
 8008182:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008184:	2d00      	cmp	r5, #0
{
 8008186:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800818a:	9202      	str	r2, [sp, #8]
 800818c:	f04f 0200 	mov.w	r2, #0
    do_ping = 0U;
 8008190:	bf18      	it	ne
 8008192:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008194:	9101      	str	r1, [sp, #4]
 8008196:	4621      	mov	r1, r4
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	2301      	movs	r3, #1
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2302      	movs	r3, #2
 80081a0:	f001 fc74 	bl	8009a8c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80081a4:	2000      	movs	r0, #0
 80081a6:	b005      	add	sp, #20
 80081a8:	bd30      	pop	{r4, r5, pc}

080081aa <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80081aa:	b530      	push	{r4, r5, lr}
 80081ac:	b085      	sub	sp, #20
 80081ae:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80081b0:	2400      	movs	r4, #0
 80081b2:	2302      	movs	r3, #2
 80081b4:	9202      	str	r2, [sp, #8]
 80081b6:	2201      	movs	r2, #1
 80081b8:	9101      	str	r1, [sp, #4]
 80081ba:	4629      	mov	r1, r5
 80081bc:	9403      	str	r4, [sp, #12]
 80081be:	9200      	str	r2, [sp, #0]
 80081c0:	f001 fc64 	bl	8009a8c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 80081c4:	4620      	mov	r0, r4
 80081c6:	b005      	add	sp, #20
 80081c8:	bd30      	pop	{r4, r5, pc}

080081ca <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80081ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 80081cc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80081d0:	9402      	str	r4, [sp, #8]
 80081d2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80081d6:	9401      	str	r4, [sp, #4]
 80081d8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80081dc:	9400      	str	r4, [sp, #0]
 80081de:	f001 fc2f 	bl	8009a40 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 80081e2:	2000      	movs	r0, #0
 80081e4:	b004      	add	sp, #16
 80081e6:	bd10      	pop	{r4, pc}

080081e8 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80081e8:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80081ea:	f001 fc41 	bl	8009a70 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 80081ee:	2000      	movs	r0, #0
 80081f0:	bd08      	pop	{r3, pc}

080081f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081f2:	b530      	push	{r4, r5, lr}
 80081f4:	2300      	movs	r3, #0
 80081f6:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081fa:	f854 5b04 	ldr.w	r5, [r4], #4
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	042d      	lsls	r5, r5, #16
 8008202:	d407      	bmi.n	8008214 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008204:	33e0      	adds	r3, #224	; 0xe0
 8008206:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return (uint16_t)idx;
 800820a:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800820c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 8008210:	b2d0      	uxtb	r0, r2
 8008212:	bd30      	pop	{r4, r5, pc}
 8008214:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8008216:	2b0b      	cmp	r3, #11
 8008218:	d1ef      	bne.n	80081fa <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 800821a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800821e:	e7f7      	b.n	8008210 <USBH_AllocPipe+0x1e>

08008220 <USBH_FreePipe>:
   if(idx < 11U)
 8008220:	290a      	cmp	r1, #10
 8008222:	bf9f      	itttt	ls
 8008224:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8008228:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 800822c:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8008230:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8008234:	2000      	movs	r0, #0
 8008236:	4770      	bx	lr

08008238 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <FATFS_LinkDriverEx+0x40>)
{
 800823a:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800823c:	7a5d      	ldrb	r5, [r3, #9]
 800823e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8008242:	b9b5      	cbnz	r5, 8008272 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008244:	7a5d      	ldrb	r5, [r3, #9]
 8008246:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8008248:	7a5d      	ldrb	r5, [r3, #9]
 800824a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800824e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8008250:	7a58      	ldrb	r0, [r3, #9]
 8008252:	4418      	add	r0, r3
 8008254:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8008256:	7a5a      	ldrb	r2, [r3, #9]
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800825c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800825e:	b2c0      	uxtb	r0, r0
 8008260:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8008262:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8008264:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 8008266:	4620      	mov	r0, r4
    path[1] = ':';
 8008268:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800826a:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800826c:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800826e:	708b      	strb	r3, [r1, #2]
 8008270:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8008272:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8008274:	bd30      	pop	{r4, r5, pc}
 8008276:	bf00      	nop
 8008278:	200002c0 	.word	0x200002c0

0800827c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800827c:	2200      	movs	r2, #0
 800827e:	f7ff bfdb 	b.w	8008238 <FATFS_LinkDriverEx>

08008282 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008282:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008284:	f000 fff6 	bl	8009274 <vTaskStartScheduler>
  
  return osOK;
}
 8008288:	2000      	movs	r0, #0
 800828a:	bd08      	pop	{r3, pc}

0800828c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800828c:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800828e:	f001 fa81 	bl	8009794 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 8008292:	f110 30ff 	adds.w	r0, r0, #4294967295
 8008296:	bf18      	it	ne
 8008298:	2001      	movne	r0, #1
 800829a:	bd08      	pop	{r3, pc}

0800829c <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800829c:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80082a0:	b10b      	cbz	r3, 80082a6 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80082a2:	f001 b835 	b.w	8009310 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80082a6:	f001 b82d 	b.w	8009304 <xTaskGetTickCount>

080082aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80082aa:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082ac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80082b0:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082b2:	8a02      	ldrh	r2, [r0, #16]
{
 80082b4:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80082b6:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082b8:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 80082bc:	bf14      	ite	ne
 80082be:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80082c0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082c2:	a803      	add	r0, sp, #12
 80082c4:	9400      	str	r4, [sp, #0]
 80082c6:	9001      	str	r0, [sp, #4]
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 fefb 	bl	80090c4 <xTaskCreate>
 80082ce:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80082d0:	bf0c      	ite	eq
 80082d2:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80082d4:	2000      	movne	r0, #0
}
 80082d6:	b005      	add	sp, #20
 80082d8:	bd30      	pop	{r4, r5, pc}

080082da <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082da:	2800      	cmp	r0, #0
 80082dc:	bf08      	it	eq
 80082de:	2001      	moveq	r0, #1
{
 80082e0:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082e2:	f001 f92b 	bl	800953c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80082e6:	2000      	movs	r0, #0
 80082e8:	bd08      	pop	{r3, pc}

080082ea <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80082ea:	2200      	movs	r2, #0
 80082ec:	c803      	ldmia	r0, {r0, r1}
 80082ee:	f000 bc0d 	b.w	8008b0c <xQueueGenericCreate>
	...

080082f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80082f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80082f6:	2400      	movs	r4, #0
{
 80082f8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80082fa:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80082fc:	42a2      	cmp	r2, r4
 80082fe:	bf08      	it	eq
 8008300:	2201      	moveq	r2, #1
 8008302:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8008306:	b1ab      	cbz	r3, 8008334 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008308:	4623      	mov	r3, r4
 800830a:	aa03      	add	r2, sp, #12
 800830c:	a901      	add	r1, sp, #4
 800830e:	f000 fcdf 	bl	8008cd0 <xQueueGenericSendFromISR>
 8008312:	2801      	cmp	r0, #1
 8008314:	d002      	beq.n	800831c <osMessagePut+0x28>
      return osErrorOS;
 8008316:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8008318:	b004      	add	sp, #16
 800831a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	b13b      	cbz	r3, 8008330 <osMessagePut+0x3c>
 8008320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <osMessagePut+0x4c>)
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
  return osOK;
 8008330:	2000      	movs	r0, #0
 8008332:	e7f1      	b.n	8008318 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008334:	a901      	add	r1, sp, #4
 8008336:	f000 fc0d 	bl	8008b54 <xQueueGenericSend>
 800833a:	2801      	cmp	r0, #1
 800833c:	d1eb      	bne.n	8008316 <osMessagePut+0x22>
 800833e:	e7f7      	b.n	8008330 <osMessagePut+0x3c>
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008344:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8008346:	2600      	movs	r6, #0
{
 8008348:	b085      	sub	sp, #20
 800834a:	4604      	mov	r4, r0
 800834c:	4617      	mov	r7, r2
 800834e:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8008350:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8008352:	9602      	str	r6, [sp, #8]
 8008354:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8008356:	b911      	cbnz	r1, 800835e <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8008358:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	e016      	b.n	800838c <osMessageGet+0x48>
  taskWoken = pdFALSE;
 800835e:	9600      	str	r6, [sp, #0]
 8008360:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8008364:	b1cb      	cbz	r3, 800839a <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008366:	466a      	mov	r2, sp
 8008368:	a902      	add	r1, sp, #8
 800836a:	f000 fdc5 	bl	8008ef8 <xQueueReceiveFromISR>
 800836e:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8008370:	bf0a      	itet	eq
 8008372:	2310      	moveq	r3, #16
      event.status = osOK;
 8008374:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8008376:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8008378:	9b00      	ldr	r3, [sp, #0]
 800837a:	b13b      	cbz	r3, 800838c <osMessageGet+0x48>
 800837c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <osMessageGet+0x70>)
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800838c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008394:	4620      	mov	r0, r4
 8008396:	b005      	add	sp, #20
 8008398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800839a:	a902      	add	r1, sp, #8
 800839c:	f000 fd02 	bl	8008da4 <xQueueReceive>
 80083a0:	2801      	cmp	r0, #1
 80083a2:	d101      	bne.n	80083a8 <osMessageGet+0x64>
      event.status = osEventMessage;
 80083a4:	2310      	movs	r3, #16
 80083a6:	e7d8      	b.n	800835a <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	bf0c      	ite	eq
 80083ac:	2300      	moveq	r3, #0
 80083ae:	2340      	movne	r3, #64	; 0x40
 80083b0:	e7d3      	b.n	800835a <osMessageGet+0x16>
 80083b2:	bf00      	nop
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083c6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083c8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083ca:	6003      	str	r3, [r0, #0]
 80083cc:	4770      	bx	lr

080083ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	6103      	str	r3, [r0, #16]
 80083d2:	4770      	bx	lr

080083d4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80083d4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083d6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80083d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80083e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80083e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80083e6:	3301      	adds	r3, #1
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	4770      	bx	lr

080083ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083ec:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083ee:	1c53      	adds	r3, r2, #1
{
 80083f0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80083f2:	d10a      	bne.n	800840a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083f4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083fa:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083fc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80083fe:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008400:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008402:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008404:	3301      	adds	r3, #1
 8008406:	6003      	str	r3, [r0, #0]
 8008408:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800840a:	f100 0308 	add.w	r3, r0, #8
 800840e:	685c      	ldr	r4, [r3, #4]
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	42aa      	cmp	r2, r5
 8008414:	d3ef      	bcc.n	80083f6 <vListInsert+0xa>
 8008416:	4623      	mov	r3, r4
 8008418:	e7f9      	b.n	800840e <vListInsert+0x22>

0800841a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800841a:	6841      	ldr	r1, [r0, #4]
 800841c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800841e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008420:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008422:	6882      	ldr	r2, [r0, #8]
 8008424:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008426:	6859      	ldr	r1, [r3, #4]
 8008428:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800842a:	bf08      	it	eq
 800842c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800842e:	2200      	movs	r2, #0
 8008430:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	3a01      	subs	r2, #1
 8008436:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008438:	6818      	ldr	r0, [r3, #0]
}
 800843a:	4770      	bx	lr

0800843c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800843c:	2300      	movs	r3, #0
{
 800843e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008440:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <prvTaskExitError+0x44>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	d00a      	beq.n	8008460 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	b672      	cpsid	i
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	b662      	cpsie	i
 800845e:	e7fe      	b.n	800845e <prvTaskExitError+0x22>
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	b672      	cpsid	i
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0fc      	beq.n	8008474 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800847a:	b002      	add	sp, #8
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20000028 	.word	0x20000028

08008484 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008484:	4808      	ldr	r0, [pc, #32]	; (80084a8 <prvPortStartFirstTask+0x24>)
 8008486:	6800      	ldr	r0, [r0, #0]
 8008488:	6800      	ldr	r0, [r0, #0]
 800848a:	f380 8808 	msr	MSP, r0
 800848e:	f04f 0000 	mov.w	r0, #0
 8008492:	f380 8814 	msr	CONTROL, r0
 8008496:	b662      	cpsie	i
 8008498:	b661      	cpsie	f
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	df00      	svc	0
 80084a4:	bf00      	nop
 80084a6:	0000      	.short	0x0000
 80084a8:	e000ed08 	.word	0xe000ed08

080084ac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084ac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084bc <vPortEnableVFP+0x10>
 80084b0:	6801      	ldr	r1, [r0, #0]
 80084b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084b6:	6001      	str	r1, [r0, #0]
 80084b8:	4770      	bx	lr
 80084ba:	0000      	.short	0x0000
 80084bc:	e000ed88 	.word	0xe000ed88

080084c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084c4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084c8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80084cc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ce:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084d0:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084d2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084d4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084d6:	f06f 0302 	mvn.w	r3, #2
 80084da:	6203      	str	r3, [r0, #32]
}
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	0800843d 	.word	0x0800843d
	...

080084f0 <SVC_Handler>:
	__asm volatile (
 80084f0:	4b07      	ldr	r3, [pc, #28]	; (8008510 <pxCurrentTCBConst2>)
 80084f2:	6819      	ldr	r1, [r3, #0]
 80084f4:	6808      	ldr	r0, [r1, #0]
 80084f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	f380 8809 	msr	PSP, r0
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f380 8811 	msr	BASEPRI, r0
 800850a:	4770      	bx	lr
 800850c:	f3af 8000 	nop.w

08008510 <pxCurrentTCBConst2>:
 8008510:	200082ec 	.word	0x200082ec

08008514 <vPortEnterCritical>:
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	b672      	cpsid	i
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	b662      	cpsie	i
	uxCriticalNesting++;
 8008528:	4a0b      	ldr	r2, [pc, #44]	; (8008558 <vPortEnterCritical+0x44>)
 800852a:	6813      	ldr	r3, [r2, #0]
 800852c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800852e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008532:	d10f      	bne.n	8008554 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008534:	4b09      	ldr	r3, [pc, #36]	; (800855c <vPortEnterCritical+0x48>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f013 0fff 	tst.w	r3, #255	; 0xff
 800853c:	d00a      	beq.n	8008554 <vPortEnterCritical+0x40>
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	e7fe      	b.n	8008552 <vPortEnterCritical+0x3e>
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	20000028 	.word	0x20000028
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008560:	4a09      	ldr	r2, [pc, #36]	; (8008588 <vPortExitCritical+0x28>)
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	b953      	cbnz	r3, 800857c <vPortExitCritical+0x1c>
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	b672      	cpsid	i
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	b662      	cpsie	i
 800857a:	e7fe      	b.n	800857a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800857c:	3b01      	subs	r3, #1
 800857e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008580:	b90b      	cbnz	r3, 8008586 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	4770      	bx	lr
 8008588:	20000028 	.word	0x20000028
 800858c:	00000000 	.word	0x00000000

08008590 <PendSV_Handler>:
	__asm volatile
 8008590:	f3ef 8009 	mrs	r0, PSP
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <pxCurrentTCBConst>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	f01e 0f10 	tst.w	lr, #16
 80085a0:	bf08      	it	eq
 80085a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	6010      	str	r0, [r2, #0]
 80085ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085b4:	b672      	cpsid	i
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	b662      	cpsie	i
 80085c4:	f000 ffe0 	bl	8009588 <vTaskSwitchContext>
 80085c8:	f04f 0000 	mov.w	r0, #0
 80085cc:	f380 8811 	msr	BASEPRI, r0
 80085d0:	bc09      	pop	{r0, r3}
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	6808      	ldr	r0, [r1, #0]
 80085d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085da:	f01e 0f10 	tst.w	lr, #16
 80085de:	bf08      	it	eq
 80085e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085e4:	f380 8809 	msr	PSP, r0
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop

080085f0 <pxCurrentTCBConst>:
 80085f0:	200082ec 	.word	0x200082ec

080085f4 <SysTick_Handler>:
{
 80085f4:	b508      	push	{r3, lr}
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	b672      	cpsid	i
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800860a:	f000 fe89 	bl	8009320 <xTaskIncrementTick>
 800860e:	b118      	cbz	r0, 8008618 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <SysTick_Handler+0x2c>)
 8008616:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008618:	2300      	movs	r3, #0
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	bd08      	pop	{r3, pc}
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008624:	2300      	movs	r3, #0
 8008626:	4a08      	ldr	r2, [pc, #32]	; (8008648 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008628:	4908      	ldr	r1, [pc, #32]	; (800864c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800862a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800862c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800862e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008632:	4b07      	ldr	r3, [pc, #28]	; (8008650 <vPortSetupTimerInterrupt+0x2c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	fbb3 f3f1 	udiv	r3, r3, r1
 800863a:	4906      	ldr	r1, [pc, #24]	; (8008654 <vPortSetupTimerInterrupt+0x30>)
 800863c:	3b01      	subs	r3, #1
 800863e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008640:	2307      	movs	r3, #7
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	e000e010 	.word	0xe000e010
 800864c:	e000e018 	.word	0xe000e018
 8008650:	20000000 	.word	0x20000000
 8008654:	e000e014 	.word	0xe000e014

08008658 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008658:	4b2c      	ldr	r3, [pc, #176]	; (800870c <xPortStartScheduler+0xb4>)
{
 800865a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800865c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800865e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008664:	22ff      	movs	r2, #255	; 0xff
 8008666:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008668:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800866a:	4a29      	ldr	r2, [pc, #164]	; (8008710 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008672:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008676:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800867a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800867c:	2207      	movs	r2, #7
 800867e:	4b25      	ldr	r3, [pc, #148]	; (8008714 <xPortStartScheduler+0xbc>)
 8008680:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008682:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008686:	1e54      	subs	r4, r2, #1
 8008688:	0600      	lsls	r0, r0, #24
 800868a:	d40f      	bmi.n	80086ac <xPortStartScheduler+0x54>
 800868c:	b101      	cbz	r1, 8008690 <xPortStartScheduler+0x38>
 800868e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	2a03      	cmp	r2, #3
 8008694:	d013      	beq.n	80086be <xPortStartScheduler+0x66>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	b672      	cpsid	i
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	b662      	cpsie	i
 80086aa:	e7fe      	b.n	80086aa <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80086b0:	2101      	movs	r1, #1
 80086b2:	0052      	lsls	r2, r2, #1
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	f88d 2003 	strb.w	r2, [sp, #3]
 80086ba:	4622      	mov	r2, r4
 80086bc:	e7e1      	b.n	8008682 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086be:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 80086c0:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80086c6:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	4a10      	ldr	r2, [pc, #64]	; (800870c <xPortStartScheduler+0xb4>)
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086d0:	4b11      	ldr	r3, [pc, #68]	; (8008718 <xPortStartScheduler+0xc0>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80086d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80086e0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80086e2:	f7ff ff9f 	bl	8008624 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <xPortStartScheduler+0xc4>)
 80086e8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80086ea:	f7ff fedf 	bl	80084ac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086ee:	4a0c      	ldr	r2, [pc, #48]	; (8008720 <xPortStartScheduler+0xc8>)
 80086f0:	6813      	ldr	r3, [r2, #0]
 80086f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086f6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80086f8:	f7ff fec4 	bl	8008484 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80086fc:	f000 ff44 	bl	8009588 <vTaskSwitchContext>
	prvTaskExitError();
 8008700:	f7ff fe9c 	bl	800843c <prvTaskExitError>
}
 8008704:	4620      	mov	r0, r4
 8008706:	b002      	add	sp, #8
 8008708:	bd10      	pop	{r4, pc}
 800870a:	bf00      	nop
 800870c:	e000e400 	.word	0xe000e400
 8008710:	200002cc 	.word	0x200002cc
 8008714:	200002d0 	.word	0x200002d0
 8008718:	e000ed20 	.word	0xe000ed20
 800871c:	20000028 	.word	0x20000028
 8008720:	e000ef34 	.word	0xe000ef34

08008724 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008724:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008728:	2b0f      	cmp	r3, #15
 800872a:	d910      	bls.n	800874e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800872c:	4a12      	ldr	r2, [pc, #72]	; (8008778 <vPortValidateInterruptPriority+0x54>)
 800872e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008730:	4a12      	ldr	r2, [pc, #72]	; (800877c <vPortValidateInterruptPriority+0x58>)
 8008732:	7812      	ldrb	r2, [r2, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d90a      	bls.n	800874e <vPortValidateInterruptPriority+0x2a>
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	b672      	cpsid	i
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	b662      	cpsie	i
 800874c:	e7fe      	b.n	800874c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <vPortValidateInterruptPriority+0x5c>)
 8008750:	4a0c      	ldr	r2, [pc, #48]	; (8008784 <vPortValidateInterruptPriority+0x60>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800875a:	4293      	cmp	r3, r2
 800875c:	d90a      	bls.n	8008774 <vPortValidateInterruptPriority+0x50>
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	b672      	cpsid	i
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	b662      	cpsie	i
 8008772:	e7fe      	b.n	8008772 <vPortValidateInterruptPriority+0x4e>
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	e000e3f0 	.word	0xe000e3f0
 800877c:	200002cc 	.word	0x200002cc
 8008780:	e000ed0c 	.word	0xe000ed0c
 8008784:	200002d0 	.word	0x200002d0

08008788 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <prvInsertBlockIntoFreeList+0x40>)
{
 800878a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4282      	cmp	r2, r0
 8008790:	d318      	bcc.n	80087c4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008792:	685c      	ldr	r4, [r3, #4]
 8008794:	1919      	adds	r1, r3, r4
 8008796:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008798:	bf01      	itttt	eq
 800879a:	6841      	ldreq	r1, [r0, #4]
 800879c:	4618      	moveq	r0, r3
 800879e:	1909      	addeq	r1, r1, r4
 80087a0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087a2:	6844      	ldr	r4, [r0, #4]
 80087a4:	1901      	adds	r1, r0, r4
 80087a6:	428a      	cmp	r2, r1
 80087a8:	d107      	bne.n	80087ba <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087aa:	4908      	ldr	r1, [pc, #32]	; (80087cc <prvInsertBlockIntoFreeList+0x44>)
 80087ac:	6809      	ldr	r1, [r1, #0]
 80087ae:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087b0:	bf1f      	itttt	ne
 80087b2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087b4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087b6:	1909      	addne	r1, r1, r4
 80087b8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087ba:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087bc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087be:	bf18      	it	ne
 80087c0:	6018      	strne	r0, [r3, #0]
 80087c2:	bd10      	pop	{r4, pc}
 80087c4:	4613      	mov	r3, r2
 80087c6:	e7e1      	b.n	800878c <prvInsertBlockIntoFreeList+0x4>
 80087c8:	200082e4 	.word	0x200082e4
 80087cc:	200002d4 	.word	0x200002d4

080087d0 <pvPortMalloc>:
{
 80087d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80087d6:	f000 fd8d 	bl	80092f4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80087da:	4941      	ldr	r1, [pc, #260]	; (80088e0 <pvPortMalloc+0x110>)
 80087dc:	4d41      	ldr	r5, [pc, #260]	; (80088e4 <pvPortMalloc+0x114>)
 80087de:	680b      	ldr	r3, [r1, #0]
 80087e0:	bb0b      	cbnz	r3, 8008826 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80087e2:	4a41      	ldr	r2, [pc, #260]	; (80088e8 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087e4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087e6:	4e41      	ldr	r6, [pc, #260]	; (80088ec <pvPortMalloc+0x11c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087e8:	bf1b      	ittet	ne
 80087ea:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087ec:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087f0:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f4:	f020 0007 	bicne.w	r0, r0, #7
 80087f8:	bf1c      	itt	ne
 80087fa:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087fc:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80087fe:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008800:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008802:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008804:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8008806:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008808:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800880c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800880e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008810:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8008812:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008814:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008816:	4b36      	ldr	r3, [pc, #216]	; (80088f0 <pvPortMalloc+0x120>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008818:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800881a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800881c:	4b35      	ldr	r3, [pc, #212]	; (80088f4 <pvPortMalloc+0x124>)
 800881e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008824:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008826:	682f      	ldr	r7, [r5, #0]
 8008828:	4227      	tst	r7, r4
 800882a:	d116      	bne.n	800885a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800882c:	2c00      	cmp	r4, #0
 800882e:	d042      	beq.n	80088b6 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8008830:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008834:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008836:	bf1c      	itt	ne
 8008838:	f023 0307 	bicne.w	r3, r3, #7
 800883c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800883e:	b163      	cbz	r3, 800885a <pvPortMalloc+0x8a>
 8008840:	4a2c      	ldr	r2, [pc, #176]	; (80088f4 <pvPortMalloc+0x124>)
 8008842:	6816      	ldr	r6, [r2, #0]
 8008844:	4690      	mov	r8, r2
 8008846:	42b3      	cmp	r3, r6
 8008848:	d807      	bhi.n	800885a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800884a:	4a28      	ldr	r2, [pc, #160]	; (80088ec <pvPortMalloc+0x11c>)
 800884c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800884e:	6868      	ldr	r0, [r5, #4]
 8008850:	4283      	cmp	r3, r0
 8008852:	d804      	bhi.n	800885e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8008854:	6809      	ldr	r1, [r1, #0]
 8008856:	428d      	cmp	r5, r1
 8008858:	d107      	bne.n	800886a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800885a:	2400      	movs	r4, #0
 800885c:	e02b      	b.n	80088b6 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800885e:	682c      	ldr	r4, [r5, #0]
 8008860:	2c00      	cmp	r4, #0
 8008862:	d0f7      	beq.n	8008854 <pvPortMalloc+0x84>
 8008864:	462a      	mov	r2, r5
 8008866:	4625      	mov	r5, r4
 8008868:	e7f1      	b.n	800884e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800886a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800886c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800886e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008870:	1ac2      	subs	r2, r0, r3
 8008872:	2a10      	cmp	r2, #16
 8008874:	d911      	bls.n	800889a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008876:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008878:	0741      	lsls	r1, r0, #29
 800887a:	d00a      	beq.n	8008892 <pvPortMalloc+0xc2>
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	b672      	cpsid	i
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	b662      	cpsie	i
 8008890:	e7fe      	b.n	8008890 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008892:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008894:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008896:	f7ff ff77 	bl	8008788 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800889a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800889c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800889e:	4914      	ldr	r1, [pc, #80]	; (80088f0 <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088a0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088a2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088a4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80088a6:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088a8:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088ac:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088ae:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088b0:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088b2:	bf38      	it	cc
 80088b4:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80088b6:	f000 fdc7 	bl	8009448 <xTaskResumeAll>
		if( pvReturn == NULL )
 80088ba:	b90c      	cbnz	r4, 80088c0 <pvPortMalloc+0xf0>
			vApplicationMallocFailedHook();
 80088bc:	f7f8 f8ff 	bl	8000abe <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088c0:	0763      	lsls	r3, r4, #29
 80088c2:	d00a      	beq.n	80088da <pvPortMalloc+0x10a>
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	b672      	cpsid	i
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	b662      	cpsie	i
 80088d8:	e7fe      	b.n	80088d8 <pvPortMalloc+0x108>
}
 80088da:	4620      	mov	r0, r4
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	200002d4 	.word	0x200002d4
 80088e4:	200082d8 	.word	0x200082d8
 80088e8:	200002d8 	.word	0x200002d8
 80088ec:	200082e4 	.word	0x200082e4
 80088f0:	200082e0 	.word	0x200082e0
 80088f4:	200082dc 	.word	0x200082dc

080088f8 <vPortFree>:
{
 80088f8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80088fa:	4604      	mov	r4, r0
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d032      	beq.n	8008966 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008900:	4a19      	ldr	r2, [pc, #100]	; (8008968 <vPortFree+0x70>)
 8008902:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	4213      	tst	r3, r2
 800890a:	d10a      	bne.n	8008922 <vPortFree+0x2a>
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	b672      	cpsid	i
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	b662      	cpsie	i
 8008920:	e7fe      	b.n	8008920 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008922:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008926:	b151      	cbz	r1, 800893e <vPortFree+0x46>
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	b672      	cpsid	i
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	b662      	cpsie	i
 800893c:	e7fe      	b.n	800893c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800893e:	ea23 0302 	bic.w	r3, r3, r2
 8008942:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008946:	f000 fcd5 	bl	80092f4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800894a:	4a08      	ldr	r2, [pc, #32]	; (800896c <vPortFree+0x74>)
 800894c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008950:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008954:	6811      	ldr	r1, [r2, #0]
 8008956:	440b      	add	r3, r1
 8008958:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800895a:	f7ff ff15 	bl	8008788 <prvInsertBlockIntoFreeList>
}
 800895e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008962:	f000 bd71 	b.w	8009448 <xTaskResumeAll>
 8008966:	bd10      	pop	{r4, pc}
 8008968:	200082d8 	.word	0x200082d8
 800896c:	200082dc 	.word	0x200082dc

08008970 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008970:	b510      	push	{r4, lr}
 8008972:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008974:	f7ff fdce 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008978:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800897a:	f7ff fdf1 	bl	8008560 <vPortExitCritical>

	return xReturn;
}
 800897e:	fab4 f084 	clz	r0, r4
 8008982:	0940      	lsrs	r0, r0, #5
 8008984:	bd10      	pop	{r4, pc}

08008986 <prvCopyDataToQueue>:
{
 8008986:	b570      	push	{r4, r5, r6, lr}
 8008988:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800898a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800898c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800898e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008990:	b942      	cbnz	r2, 80089a4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008992:	6805      	ldr	r5, [r0, #0]
 8008994:	b99d      	cbnz	r5, 80089be <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008996:	6840      	ldr	r0, [r0, #4]
 8008998:	f000 ff0c 	bl	80097b4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800899c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800899e:	3601      	adds	r6, #1
 80089a0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80089a4:	b96d      	cbnz	r5, 80089c2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80089a6:	6880      	ldr	r0, [r0, #8]
 80089a8:	f001 f91a 	bl	8009be0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80089ac:	68a3      	ldr	r3, [r4, #8]
 80089ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80089b0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80089b6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089b8:	d301      	bcc.n	80089be <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80089be:	2000      	movs	r0, #0
 80089c0:	e7ed      	b.n	800899e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c2:	68c0      	ldr	r0, [r0, #12]
 80089c4:	f001 f90c 	bl	8009be0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80089c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089ca:	68e2      	ldr	r2, [r4, #12]
 80089cc:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089ce:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80089d0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089d2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80089d4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80089d6:	bf3e      	ittt	cc
 80089d8:	6862      	ldrcc	r2, [r4, #4]
 80089da:	189b      	addcc	r3, r3, r2
 80089dc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80089de:	2d02      	cmp	r5, #2
 80089e0:	d1ed      	bne.n	80089be <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089e2:	b10e      	cbz	r6, 80089e8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80089e4:	3e01      	subs	r6, #1
 80089e6:	e7ea      	b.n	80089be <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80089e8:	4630      	mov	r0, r6
 80089ea:	e7d8      	b.n	800899e <prvCopyDataToQueue+0x18>

080089ec <prvCopyDataFromQueue>:
{
 80089ec:	4603      	mov	r3, r0
 80089ee:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80089f2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089f4:	b162      	cbz	r2, 8008a10 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80089f6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089f8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80089fa:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089fc:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80089fe:	60d9      	str	r1, [r3, #12]
}
 8008a00:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008a04:	bf24      	itt	cs
 8008a06:	6819      	ldrcs	r1, [r3, #0]
 8008a08:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008a0a:	68d9      	ldr	r1, [r3, #12]
 8008a0c:	f001 b8e8 	b.w	8009be0 <memcpy>
}
 8008a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <prvUnlockQueue>:
{
 8008a16:	b570      	push	{r4, r5, r6, lr}
 8008a18:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008a1a:	f7ff fd7b 	bl	8008514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008a1e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a22:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008a26:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	dc14      	bgt.n	8008a56 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008a2c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a2e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8008a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008a36:	f7ff fd93 	bl	8008560 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008a3a:	f7ff fd6b 	bl	8008514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008a3e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008a42:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	dc12      	bgt.n	8008a6e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008a48:	23ff      	movs	r3, #255	; 0xff
 8008a4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008a52:	f7ff bd85 	b.w	8008560 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0e7      	beq.n	8008a2c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 fe03 	bl	8009668 <xTaskRemoveFromEventList>
 8008a62:	b108      	cbz	r0, 8008a68 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008a64:	f000 fe90 	bl	8009788 <vTaskMissedYield>
 8008a68:	3d01      	subs	r5, #1
 8008a6a:	b26d      	sxtb	r5, r5
 8008a6c:	e7dc      	b.n	8008a28 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0e9      	beq.n	8008a48 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a74:	4630      	mov	r0, r6
 8008a76:	f000 fdf7 	bl	8009668 <xTaskRemoveFromEventList>
 8008a7a:	b108      	cbz	r0, 8008a80 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008a7c:	f000 fe84 	bl	8009788 <vTaskMissedYield>
 8008a80:	3d01      	subs	r5, #1
 8008a82:	b26d      	sxtb	r5, r5
 8008a84:	e7de      	b.n	8008a44 <prvUnlockQueue+0x2e>
	...

08008a88 <xQueueGenericReset>:
{
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	b950      	cbnz	r0, 8008aa6 <xQueueGenericReset+0x1e>
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	b672      	cpsid	i
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	b662      	cpsie	i
 8008aa4:	e7fe      	b.n	8008aa4 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8008aa6:	f7ff fd35 	bl	8008514 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008aaa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ab2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008ab4:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008ab6:	1a1b      	subs	r3, r3, r0
 8008ab8:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008aba:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008abc:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008abe:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ac0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ac2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8008ac4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008acc:	b995      	cbnz	r5, 8008af4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	b163      	cbz	r3, 8008aec <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ad2:	f104 0010 	add.w	r0, r4, #16
 8008ad6:	f000 fdc7 	bl	8009668 <xTaskRemoveFromEventList>
 8008ada:	b138      	cbz	r0, 8008aec <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <xQueueGenericReset+0x80>)
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008aec:	f7ff fd38 	bl	8008560 <vPortExitCritical>
}
 8008af0:	2001      	movs	r0, #1
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008af4:	f104 0010 	add.w	r0, r4, #16
 8008af8:	f7ff fc5e 	bl	80083b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008afc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b00:	f7ff fc5a 	bl	80083b8 <vListInitialise>
 8008b04:	e7f2      	b.n	8008aec <xQueueGenericReset+0x64>
 8008b06:	bf00      	nop
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <xQueueGenericCreate>:
	{
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b10:	4606      	mov	r6, r0
 8008b12:	b950      	cbnz	r0, 8008b2a <xQueueGenericCreate+0x1e>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	b672      	cpsid	i
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	b662      	cpsie	i
 8008b28:	e7fe      	b.n	8008b28 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b2a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008b2c:	3048      	adds	r0, #72	; 0x48
 8008b2e:	f7ff fe4f 	bl	80087d0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008b32:	4604      	mov	r4, r0
 8008b34:	b138      	cbz	r0, 8008b46 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b36:	b945      	cbnz	r5, 8008b4a <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b38:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008b3a:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b3c:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8008b3e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7ff ffa1 	bl	8008a88 <xQueueGenericReset>
	}
 8008b46:	4620      	mov	r0, r4
 8008b48:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008b4a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b4e:	6003      	str	r3, [r0, #0]
 8008b50:	e7f3      	b.n	8008b3a <xQueueGenericCreate+0x2e>
	...

08008b54 <xQueueGenericSend>:
{
 8008b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	4689      	mov	r9, r1
 8008b5a:	9201      	str	r2, [sp, #4]
 8008b5c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008b5e:	4604      	mov	r4, r0
 8008b60:	b950      	cbnz	r0, 8008b78 <xQueueGenericSend+0x24>
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	b672      	cpsid	i
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	b662      	cpsie	i
 8008b76:	e7fe      	b.n	8008b76 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b78:	2900      	cmp	r1, #0
 8008b7a:	f040 808c 	bne.w	8008c96 <xQueueGenericSend+0x142>
 8008b7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8088 	beq.w	8008c96 <xQueueGenericSend+0x142>
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	b672      	cpsid	i
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	b662      	cpsie	i
 8008b9a:	e7fe      	b.n	8008b9a <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b9c:	9e01      	ldr	r6, [sp, #4]
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	f000 8084 	beq.w	8008cac <xQueueGenericSend+0x158>
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	b672      	cpsid	i
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	b662      	cpsie	i
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bba:	9d01      	ldr	r5, [sp, #4]
 8008bbc:	b91d      	cbnz	r5, 8008bc6 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8008bbe:	f7ff fccf 	bl	8008560 <vPortExitCritical>
			return errQUEUE_FULL;
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e058      	b.n	8008c78 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8008bc6:	b916      	cbnz	r6, 8008bce <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bc8:	a802      	add	r0, sp, #8
 8008bca:	f000 fd91 	bl	80096f0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008bce:	f7ff fcc7 	bl	8008560 <vPortExitCritical>
		vTaskSuspendAll();
 8008bd2:	f000 fb8f 	bl	80092f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bd6:	f7ff fc9d 	bl	8008514 <vPortEnterCritical>
 8008bda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008bde:	2bff      	cmp	r3, #255	; 0xff
 8008be0:	d101      	bne.n	8008be6 <xQueueGenericSend+0x92>
 8008be2:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8008be6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008bea:	2bff      	cmp	r3, #255	; 0xff
 8008bec:	d101      	bne.n	8008bf2 <xQueueGenericSend+0x9e>
 8008bee:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8008bf2:	f7ff fcb5 	bl	8008560 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bf6:	a901      	add	r1, sp, #4
 8008bf8:	a802      	add	r0, sp, #8
 8008bfa:	f000 fd85 	bl	8009708 <xTaskCheckForTimeOut>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d143      	bne.n	8008c8a <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c02:	f7ff fc87 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c06:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008c08:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008c0a:	f7ff fca9 	bl	8008560 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c0e:	42ae      	cmp	r6, r5
 8008c10:	d135      	bne.n	8008c7e <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c12:	9901      	ldr	r1, [sp, #4]
 8008c14:	f104 0010 	add.w	r0, r4, #16
 8008c18:	f000 fd0a 	bl	8009630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f7ff fefa 	bl	8008a16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c22:	f000 fc11 	bl	8009448 <xTaskResumeAll>
 8008c26:	b938      	cbnz	r0, 8008c38 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8008c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c2c:	f8ca 3000 	str.w	r3, [sl]
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008c3a:	f7ff fc6b 	bl	8008514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d301      	bcc.n	8008c4a <xQueueGenericSend+0xf6>
 8008c46:	2f02      	cmp	r7, #2
 8008c48:	d1b7      	bne.n	8008bba <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7ff fe99 	bl	8008986 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c56:	b11b      	cbz	r3, 8008c60 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c5c:	f000 fd04 	bl	8009668 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008c60:	b138      	cbz	r0, 8008c72 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	4b19      	ldr	r3, [pc, #100]	; (8008ccc <xQueueGenericSend+0x178>)
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008c72:	f7ff fc75 	bl	8008560 <vPortExitCritical>
				return pdPASS;
 8008c76:	2001      	movs	r0, #1
}
 8008c78:	b004      	add	sp, #16
 8008c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f7ff fec9 	bl	8008a16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c84:	f000 fbe0 	bl	8009448 <xTaskResumeAll>
 8008c88:	e7d6      	b.n	8008c38 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff fec3 	bl	8008a16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c90:	f000 fbda 	bl	8009448 <xTaskResumeAll>
 8008c94:	e795      	b.n	8008bc2 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c96:	2f02      	cmp	r7, #2
 8008c98:	d102      	bne.n	8008ca0 <xQueueGenericSend+0x14c>
 8008c9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10a      	bne.n	8008cb6 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ca0:	f000 fd78 	bl	8009794 <xTaskGetSchedulerState>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f43f af79 	beq.w	8008b9c <xQueueGenericSend+0x48>
 8008caa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008cac:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8008cb0:	f8df a018 	ldr.w	sl, [pc, #24]	; 8008ccc <xQueueGenericSend+0x178>
 8008cb4:	e7c1      	b.n	8008c3a <xQueueGenericSend+0xe6>
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	b672      	cpsid	i
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	b662      	cpsie	i
 8008cca:	e7fe      	b.n	8008cca <xQueueGenericSend+0x176>
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <xQueueGenericSendFromISR>:
{
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd4:	4688      	mov	r8, r1
 8008cd6:	4691      	mov	r9, r2
 8008cd8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008cda:	4604      	mov	r4, r0
 8008cdc:	b950      	cbnz	r0, 8008cf4 <xQueueGenericSendFromISR+0x24>
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	b672      	cpsid	i
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	b662      	cpsie	i
 8008cf2:	e7fe      	b.n	8008cf2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf4:	bb19      	cbnz	r1, 8008d3e <xQueueGenericSendFromISR+0x6e>
 8008cf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008cf8:	b30b      	cbz	r3, 8008d3e <xQueueGenericSendFromISR+0x6e>
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	b672      	cpsid	i
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	b662      	cpsie	i
 8008d0e:	e7fe      	b.n	8008d0e <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d14:	f000 fca8 	bl	8009668 <xTaskRemoveFromEventList>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d036      	beq.n	8008d8a <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8008d1c:	f1b9 0f00 	cmp.w	r9, #0
 8008d20:	d033      	beq.n	8008d8a <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d22:	2001      	movs	r0, #1
 8008d24:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8008d28:	f386 8811 	msr	BASEPRI, r6
}
 8008d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d30:	3501      	adds	r5, #1
 8008d32:	b26d      	sxtb	r5, r5
 8008d34:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008d38:	e027      	b.n	8008d8a <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e7f4      	b.n	8008d28 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d3e:	2f02      	cmp	r7, #2
 8008d40:	d102      	bne.n	8008d48 <xQueueGenericSendFromISR+0x78>
 8008d42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d122      	bne.n	8008d8e <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d48:	f7ff fcec 	bl	8008724 <vPortValidateInterruptPriority>
	__asm volatile
 8008d4c:	f3ef 8611 	mrs	r6, BASEPRI
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	b672      	cpsid	i
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d301      	bcc.n	8008d70 <xQueueGenericSendFromISR+0xa0>
 8008d6c:	2f02      	cmp	r7, #2
 8008d6e:	d1e4      	bne.n	8008d3a <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d70:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d74:	463a      	mov	r2, r7
 8008d76:	4641      	mov	r1, r8
 8008d78:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d7a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d7c:	f7ff fe03 	bl	8008986 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008d80:	1c6b      	adds	r3, r5, #1
 8008d82:	d1d5      	bne.n	8008d30 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1c2      	bne.n	8008d10 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	e7cc      	b.n	8008d28 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	b672      	cpsid	i
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	b662      	cpsie	i
 8008da2:	e7fe      	b.n	8008da2 <xQueueGenericSendFromISR+0xd2>

08008da4 <xQueueReceive>:
{
 8008da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008da8:	b085      	sub	sp, #20
 8008daa:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 8008dac:	4604      	mov	r4, r0
{
 8008dae:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008db0:	b950      	cbnz	r0, 8008dc8 <xQueueReceive+0x24>
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	b672      	cpsid	i
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	b662      	cpsie	i
 8008dc6:	e7fe      	b.n	8008dc6 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	f040 808a 	bne.w	8008ee2 <xQueueReceive+0x13e>
 8008dce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 8086 	beq.w	8008ee2 <xQueueReceive+0x13e>
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	b672      	cpsid	i
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	b662      	cpsie	i
 8008dea:	e7fe      	b.n	8008dea <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dec:	9e01      	ldr	r6, [sp, #4]
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	d07c      	beq.n	8008eec <xQueueReceive+0x148>
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	b672      	cpsid	i
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	b662      	cpsie	i
 8008e06:	e7fe      	b.n	8008e06 <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e08:	9d01      	ldr	r5, [sp, #4]
 8008e0a:	b91d      	cbnz	r5, 8008e14 <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 8008e0c:	f7ff fba8 	bl	8008560 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008e10:	2000      	movs	r0, #0
 8008e12:	e052      	b.n	8008eba <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8008e14:	b916      	cbnz	r6, 8008e1c <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e16:	a802      	add	r0, sp, #8
 8008e18:	f000 fc6a 	bl	80096f0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008e1c:	f7ff fba0 	bl	8008560 <vPortExitCritical>
		vTaskSuspendAll();
 8008e20:	f000 fa68 	bl	80092f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e24:	f7ff fb76 	bl	8008514 <vPortEnterCritical>
 8008e28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e2c:	2bff      	cmp	r3, #255	; 0xff
 8008e2e:	d101      	bne.n	8008e34 <xQueueReceive+0x90>
 8008e30:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8008e34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e38:	2bff      	cmp	r3, #255	; 0xff
 8008e3a:	d101      	bne.n	8008e40 <xQueueReceive+0x9c>
 8008e3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e40:	f7ff fb8e 	bl	8008560 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e44:	a901      	add	r1, sp, #4
 8008e46:	a802      	add	r0, sp, #8
 8008e48:	f000 fc5e 	bl	8009708 <xTaskCheckForTimeOut>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d13d      	bne.n	8008ecc <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff fd8d 	bl	8008970 <prvIsQueueEmpty>
 8008e56:	b398      	cbz	r0, 8008ec0 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e58:	9901      	ldr	r1, [sp, #4]
 8008e5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e5e:	f000 fbe7 	bl	8009630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff fdd7 	bl	8008a16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e68:	f000 faee 	bl	8009448 <xTaskResumeAll>
 8008e6c:	b938      	cbnz	r0, 8008e7e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8008e6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e72:	f8c9 3000 	str.w	r3, [r9]
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008e80:	f7ff fb48 	bl	8008514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e84:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e86:	2d00      	cmp	r5, #0
 8008e88:	d0be      	beq.n	8008e08 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e8a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff fdac 	bl	80089ec <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e94:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	b163      	cbz	r3, 8008eb4 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9a:	f104 0010 	add.w	r0, r4, #16
 8008e9e:	f000 fbe3 	bl	8009668 <xTaskRemoveFromEventList>
 8008ea2:	b138      	cbz	r0, 8008eb4 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8008ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea8:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <xQueueReceive+0x150>)
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008eb4:	f7ff fb54 	bl	8008560 <vPortExitCritical>
				return pdPASS;
 8008eb8:	2001      	movs	r0, #1
}
 8008eba:	b005      	add	sp, #20
 8008ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f7ff fda8 	bl	8008a16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ec6:	f000 fabf 	bl	8009448 <xTaskResumeAll>
 8008eca:	e7d8      	b.n	8008e7e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7ff fda2 	bl	8008a16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ed2:	f000 fab9 	bl	8009448 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f7ff fd4a 	bl	8008970 <prvIsQueueEmpty>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d0ce      	beq.n	8008e7e <xQueueReceive+0xda>
 8008ee0:	e796      	b.n	8008e10 <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee2:	f000 fc57 	bl	8009794 <xTaskGetSchedulerState>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d080      	beq.n	8008dec <xQueueReceive+0x48>
 8008eea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008eec:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8008eee:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8008ef4 <xQueueReceive+0x150>
 8008ef2:	e7c5      	b.n	8008e80 <xQueueReceive+0xdc>
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <xQueueReceiveFromISR>:
{
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	4689      	mov	r9, r1
 8008efe:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008f00:	4605      	mov	r5, r0
 8008f02:	b950      	cbnz	r0, 8008f1a <xQueueReceiveFromISR+0x22>
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	e7fe      	b.n	8008f18 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f1a:	bb81      	cbnz	r1, 8008f7e <xQueueReceiveFromISR+0x86>
 8008f1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008f1e:	b373      	cbz	r3, 8008f7e <xQueueReceiveFromISR+0x86>
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	b672      	cpsid	i
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	b662      	cpsie	i
 8008f34:	e7fe      	b.n	8008f34 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f36:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f3e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f40:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f42:	f7ff fd53 	bl	80089ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f46:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008f48:	1c73      	adds	r3, r6, #1
 8008f4a:	d113      	bne.n	8008f74 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f4c:	692b      	ldr	r3, [r5, #16]
 8008f4e:	b90b      	cbnz	r3, 8008f54 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8008f50:	2001      	movs	r0, #1
 8008f52:	e00b      	b.n	8008f6c <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f54:	f105 0010 	add.w	r0, r5, #16
 8008f58:	f000 fb86 	bl	8009668 <xTaskRemoveFromEventList>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d0f7      	beq.n	8008f50 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8008f60:	f1b8 0f00 	cmp.w	r8, #0
 8008f64:	d0f4      	beq.n	8008f50 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f66:	2001      	movs	r0, #1
 8008f68:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008f6c:	f387 8811 	msr	BASEPRI, r7
}
 8008f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f74:	3601      	adds	r6, #1
 8008f76:	b276      	sxtb	r6, r6
 8008f78:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008f7c:	e7e8      	b.n	8008f50 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f7e:	f7ff fbd1 	bl	8008724 <vPortValidateInterruptPriority>
	__asm volatile
 8008f82:	f3ef 8711 	mrs	r7, BASEPRI
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	b672      	cpsid	i
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f9a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f9c:	2c00      	cmp	r4, #0
 8008f9e:	d1ca      	bne.n	8008f36 <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	e7e3      	b.n	8008f6c <xQueueReceiveFromISR+0x74>

08008fa4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa4:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <prvResetNextTaskUnblockTime+0x1c>)
 8008fa6:	6813      	ldr	r3, [r2, #0]
 8008fa8:	6819      	ldr	r1, [r3, #0]
 8008faa:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <prvResetNextTaskUnblockTime+0x20>)
 8008fac:	b919      	cbnz	r1, 8008fb6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fb6:	6812      	ldr	r2, [r2, #0]
 8008fb8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fba:	68d2      	ldr	r2, [r2, #12]
 8008fbc:	6852      	ldr	r2, [r2, #4]
 8008fbe:	e7f8      	b.n	8008fb2 <prvResetNextTaskUnblockTime+0xe>
 8008fc0:	200082f0 	.word	0x200082f0
 8008fc4:	200083c8 	.word	0x200083c8

08008fc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008fcc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fce:	4e1b      	ldr	r6, [pc, #108]	; (800903c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8008fd0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008fd2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd4:	6830      	ldr	r0, [r6, #0]
 8008fd6:	3004      	adds	r0, #4
 8008fd8:	f7ff fa1f 	bl	800841a <uxListRemove>
 8008fdc:	4633      	mov	r3, r6
 8008fde:	b940      	cbnz	r0, 8008ff2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008fe0:	6831      	ldr	r1, [r6, #0]
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	4e16      	ldr	r6, [pc, #88]	; (8009040 <prvAddCurrentTaskToDelayedList+0x78>)
 8008fe6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008fe8:	6832      	ldr	r2, [r6, #0]
 8008fea:	4088      	lsls	r0, r1
 8008fec:	ea22 0200 	bic.w	r2, r2, r0
 8008ff0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ff2:	1c62      	adds	r2, r4, #1
 8008ff4:	d107      	bne.n	8009006 <prvAddCurrentTaskToDelayedList+0x3e>
 8008ff6:	b137      	cbz	r7, 8009006 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	4812      	ldr	r0, [pc, #72]	; (8009044 <prvAddCurrentTaskToDelayedList+0x7c>)
 8008ffc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009002:	f7ff b9e7 	b.w	80083d4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009006:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009008:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800900a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800900c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800900e:	d907      	bls.n	8009020 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009010:	4a0d      	ldr	r2, [pc, #52]	; (8009048 <prvAddCurrentTaskToDelayedList+0x80>)
 8009012:	6810      	ldr	r0, [r2, #0]
 8009014:	6819      	ldr	r1, [r3, #0]
}
 8009016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800901a:	3104      	adds	r1, #4
 800901c:	f7ff b9e6 	b.w	80083ec <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009020:	4a0a      	ldr	r2, [pc, #40]	; (800904c <prvAddCurrentTaskToDelayedList+0x84>)
 8009022:	6810      	ldr	r0, [r2, #0]
 8009024:	6819      	ldr	r1, [r3, #0]
 8009026:	3104      	adds	r1, #4
 8009028:	f7ff f9e0 	bl	80083ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800902c:	4b08      	ldr	r3, [pc, #32]	; (8009050 <prvAddCurrentTaskToDelayedList+0x88>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	4294      	cmp	r4, r2
 8009032:	d200      	bcs.n	8009036 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8009034:	601c      	str	r4, [r3, #0]
 8009036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009038:	20008410 	.word	0x20008410
 800903c:	200082ec 	.word	0x200082ec
 8009040:	20008398 	.word	0x20008398
 8009044:	200083e8 	.word	0x200083e8
 8009048:	200082f4 	.word	0x200082f4
 800904c:	200082f0 	.word	0x200082f0
 8009050:	200083c8 	.word	0x200083c8

08009054 <prvIdleTask>:
{
 8009054:	b580      	push	{r7, lr}
				taskYIELD();
 8009056:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80090c0 <prvIdleTask+0x6c>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800905a:	4f15      	ldr	r7, [pc, #84]	; (80090b0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800905c:	4c15      	ldr	r4, [pc, #84]	; (80090b4 <prvIdleTask+0x60>)
				--uxCurrentNumberOfTasks;
 800905e:	4e16      	ldr	r6, [pc, #88]	; (80090b8 <prvIdleTask+0x64>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	b973      	cbnz	r3, 8009082 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009064:	4b15      	ldr	r3, [pc, #84]	; (80090bc <prvIdleTask+0x68>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d907      	bls.n	800907c <prvIdleTask+0x28>
				taskYIELD();
 800906c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009070:	f8c8 3000 	str.w	r3, [r8]
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800907c:	f7f7 fd1d 	bl	8000aba <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009080:	e7ec      	b.n	800905c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8009082:	f7ff fa47 	bl	8008514 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800908a:	1d28      	adds	r0, r5, #4
 800908c:	f7ff f9c5 	bl	800841a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009090:	6833      	ldr	r3, [r6, #0]
 8009092:	3b01      	subs	r3, #1
 8009094:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	3b01      	subs	r3, #1
 800909a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800909c:	f7ff fa60 	bl	8008560 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80090a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80090a2:	f7ff fc29 	bl	80088f8 <vPortFree>
			vPortFree( pxTCB );
 80090a6:	4628      	mov	r0, r5
 80090a8:	f7ff fc26 	bl	80088f8 <vPortFree>
 80090ac:	e7d8      	b.n	8009060 <prvIdleTask+0xc>
 80090ae:	bf00      	nop
 80090b0:	200083fc 	.word	0x200083fc
 80090b4:	20008388 	.word	0x20008388
 80090b8:	20008384 	.word	0x20008384
 80090bc:	200082f8 	.word	0x200082f8
 80090c0:	e000ed04 	.word	0xe000ed04

080090c4 <xTaskCreate>:
	{
 80090c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80090cc:	4680      	mov	r8, r0
 80090ce:	460d      	mov	r5, r1
 80090d0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d2:	4650      	mov	r0, sl
	{
 80090d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d6:	f7ff fb7b 	bl	80087d0 <pvPortMalloc>
			if( pxStack != NULL )
 80090da:	4607      	mov	r7, r0
 80090dc:	2800      	cmp	r0, #0
 80090de:	f000 809e 	beq.w	800921e <xTaskCreate+0x15a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80090e2:	2058      	movs	r0, #88	; 0x58
 80090e4:	f7ff fb74 	bl	80087d0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80090e8:	4604      	mov	r4, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f000 8094 	beq.w	8009218 <xTaskCreate+0x154>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090f0:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 80090f2:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090f4:	21a5      	movs	r1, #165	; 0xa5
 80090f6:	4638      	mov	r0, r7
 80090f8:	f000 fd7d 	bl	8009bf6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090fc:	f1aa 0a04 	sub.w	sl, sl, #4
 8009100:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009102:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8009106:	449a      	add	sl, r3
 8009108:	1e6b      	subs	r3, r5, #1
 800910a:	350f      	adds	r5, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800910c:	f02a 0a07 	bic.w	sl, sl, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009110:	7859      	ldrb	r1, [r3, #1]
 8009112:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8009116:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800911a:	b109      	cbz	r1, 8009120 <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800911c:	42ab      	cmp	r3, r5
 800911e:	d1f7      	bne.n	8009110 <xTaskCreate+0x4c>
 8009120:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009122:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009126:	1d27      	adds	r7, r4, #4
 8009128:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800912a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800912e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8009130:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8009134:	bf28      	it	cs
 8009136:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8009138:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800913a:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800913c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009140:	f7ff f945 	bl	80083ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009144:	f104 0018 	add.w	r0, r4, #24
 8009148:	f7ff f941 	bl	80083ce <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800914c:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009150:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009152:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009154:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009156:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009158:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800915a:	4650      	mov	r0, sl
		pxNewTCB->pxTaskTag = NULL;
 800915c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009160:	f884 b054 	strb.w	fp, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009164:	f7ff f9ac 	bl	80084c0 <pxPortInitialiseStack>
 8009168:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800916a:	b106      	cbz	r6, 800916e <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800916c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800916e:	f7ff f9d1 	bl	8008514 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009172:	4b32      	ldr	r3, [pc, #200]	; (800923c <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8009174:	4e32      	ldr	r6, [pc, #200]	; (8009240 <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800926c <xTaskCreate+0x1a8>
 800917c:	3201      	adds	r2, #1
 800917e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009180:	6835      	ldr	r5, [r6, #0]
 8009182:	2d00      	cmp	r5, #0
 8009184:	d14e      	bne.n	8009224 <xTaskCreate+0x160>
			pxCurrentTCB = pxNewTCB;
 8009186:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d11d      	bne.n	80091ca <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800918e:	eb08 0005 	add.w	r0, r8, r5
 8009192:	3514      	adds	r5, #20
 8009194:	f7ff f910 	bl	80083b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009198:	2d8c      	cmp	r5, #140	; 0x8c
 800919a:	d1f8      	bne.n	800918e <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 800919c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8009270 <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 80091a0:	4d28      	ldr	r5, [pc, #160]	; (8009244 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 80091a2:	4648      	mov	r0, r9
 80091a4:	f7ff f908 	bl	80083b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091a8:	4628      	mov	r0, r5
 80091aa:	f7ff f905 	bl	80083b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091ae:	4826      	ldr	r0, [pc, #152]	; (8009248 <xTaskCreate+0x184>)
 80091b0:	f7ff f902 	bl	80083b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80091b4:	4825      	ldr	r0, [pc, #148]	; (800924c <xTaskCreate+0x188>)
 80091b6:	f7ff f8ff 	bl	80083b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80091ba:	4825      	ldr	r0, [pc, #148]	; (8009250 <xTaskCreate+0x18c>)
 80091bc:	f7ff f8fc 	bl	80083b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80091c0:	4b24      	ldr	r3, [pc, #144]	; (8009254 <xTaskCreate+0x190>)
 80091c2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091c6:	4b24      	ldr	r3, [pc, #144]	; (8009258 <xTaskCreate+0x194>)
 80091c8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80091ca:	4a24      	ldr	r2, [pc, #144]	; (800925c <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 80091cc:	2501      	movs	r5, #1
 80091ce:	4924      	ldr	r1, [pc, #144]	; (8009260 <xTaskCreate+0x19c>)
		uxTaskNumber++;
 80091d0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80091d2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80091d4:	3301      	adds	r3, #1
 80091d6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80091d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091da:	fa05 f302 	lsl.w	r3, r5, r2
 80091de:	4303      	orrs	r3, r0
 80091e0:	2014      	movs	r0, #20
 80091e2:	600b      	str	r3, [r1, #0]
 80091e4:	4639      	mov	r1, r7
 80091e6:	fb00 8002 	mla	r0, r0, r2, r8
 80091ea:	f7ff f8f3 	bl	80083d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80091ee:	f7ff f9b7 	bl	8008560 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <xTaskCreate+0x1a0>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	b163      	cbz	r3, 8009212 <xTaskCreate+0x14e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091f8:	6833      	ldr	r3, [r6, #0]
 80091fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80091fe:	429a      	cmp	r2, r3
 8009200:	d207      	bcs.n	8009212 <xTaskCreate+0x14e>
			taskYIELD_IF_USING_PREEMPTION();
 8009202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009206:	4b18      	ldr	r3, [pc, #96]	; (8009268 <xTaskCreate+0x1a4>)
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	f3bf 8f6f 	isb	sy
	}
 8009212:	4628      	mov	r0, r5
 8009214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff fb6d 	bl	80088f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800921e:	f04f 35ff 	mov.w	r5, #4294967295
 8009222:	e7f6      	b.n	8009212 <xTaskCreate+0x14e>
			if( xSchedulerRunning == pdFALSE )
 8009224:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <xTaskCreate+0x1a0>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1ce      	bne.n	80091ca <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800922c:	6833      	ldr	r3, [r6, #0]
 800922e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009232:	429a      	cmp	r2, r3
 8009234:	d8c9      	bhi.n	80091ca <xTaskCreate+0x106>
					pxCurrentTCB = pxNewTCB;
 8009236:	6034      	str	r4, [r6, #0]
 8009238:	e7c7      	b.n	80091ca <xTaskCreate+0x106>
 800923a:	bf00      	nop
 800923c:	20008384 	.word	0x20008384
 8009240:	200082ec 	.word	0x200082ec
 8009244:	200083b0 	.word	0x200083b0
 8009248:	200083d0 	.word	0x200083d0
 800924c:	200083fc 	.word	0x200083fc
 8009250:	200083e8 	.word	0x200083e8
 8009254:	200082f0 	.word	0x200082f0
 8009258:	200082f4 	.word	0x200082f4
 800925c:	20008394 	.word	0x20008394
 8009260:	20008398 	.word	0x20008398
 8009264:	200083e4 	.word	0x200083e4
 8009268:	e000ed04 	.word	0xe000ed04
 800926c:	200082f8 	.word	0x200082f8
 8009270:	2000839c 	.word	0x2000839c

08009274 <vTaskStartScheduler>:
{
 8009274:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8009276:	4b19      	ldr	r3, [pc, #100]	; (80092dc <vTaskStartScheduler+0x68>)
 8009278:	2400      	movs	r4, #0
 800927a:	2280      	movs	r2, #128	; 0x80
 800927c:	4918      	ldr	r1, [pc, #96]	; (80092e0 <vTaskStartScheduler+0x6c>)
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	4623      	mov	r3, r4
 8009282:	9400      	str	r4, [sp, #0]
 8009284:	4817      	ldr	r0, [pc, #92]	; (80092e4 <vTaskStartScheduler+0x70>)
 8009286:	f7ff ff1d 	bl	80090c4 <xTaskCreate>
	if( xReturn == pdPASS )
 800928a:	2801      	cmp	r0, #1
 800928c:	d116      	bne.n	80092bc <vTaskStartScheduler+0x48>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	b672      	cpsid	i
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80092a2:	f04f 32ff 	mov.w	r2, #4294967295
 80092a6:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <vTaskStartScheduler+0x74>)
 80092a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092aa:	4b10      	ldr	r3, [pc, #64]	; (80092ec <vTaskStartScheduler+0x78>)
 80092ac:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80092ae:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <vTaskStartScheduler+0x7c>)
 80092b0:	601c      	str	r4, [r3, #0]
}
 80092b2:	b002      	add	sp, #8
 80092b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80092b8:	f7ff b9ce 	b.w	8008658 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092bc:	3001      	adds	r0, #1
 80092be:	d10a      	bne.n	80092d6 <vTaskStartScheduler+0x62>
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	b672      	cpsid	i
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	b662      	cpsie	i
 80092d4:	e7fe      	b.n	80092d4 <vTaskStartScheduler+0x60>
}
 80092d6:	b002      	add	sp, #8
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	200083c4 	.word	0x200083c4
 80092e0:	08009e30 	.word	0x08009e30
 80092e4:	08009055 	.word	0x08009055
 80092e8:	200083c8 	.word	0x200083c8
 80092ec:	200083e4 	.word	0x200083e4
 80092f0:	20008410 	.word	0x20008410

080092f4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80092f4:	4a02      	ldr	r2, [pc, #8]	; (8009300 <vTaskSuspendAll+0xc>)
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	20008390 	.word	0x20008390

08009304 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009304:	4b01      	ldr	r3, [pc, #4]	; (800930c <xTaskGetTickCount+0x8>)
 8009306:	6818      	ldr	r0, [r3, #0]
}
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20008410 	.word	0x20008410

08009310 <xTaskGetTickCountFromISR>:
{
 8009310:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009312:	f7ff fa07 	bl	8008724 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8009316:	4b01      	ldr	r3, [pc, #4]	; (800931c <xTaskGetTickCountFromISR+0xc>)
 8009318:	6818      	ldr	r0, [r3, #0]
}
 800931a:	bd08      	pop	{r3, pc}
 800931c:	20008410 	.word	0x20008410

08009320 <xTaskIncrementTick>:
{
 8009320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009324:	4b3d      	ldr	r3, [pc, #244]	; (800941c <xTaskIncrementTick+0xfc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d155      	bne.n	80093d8 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800932c:	4b3c      	ldr	r3, [pc, #240]	; (8009420 <xTaskIncrementTick+0x100>)
 800932e:	681c      	ldr	r4, [r3, #0]
 8009330:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8009332:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009334:	b9cc      	cbnz	r4, 800936a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8009336:	4b3b      	ldr	r3, [pc, #236]	; (8009424 <xTaskIncrementTick+0x104>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	b152      	cbz	r2, 8009354 <xTaskIncrementTick+0x34>
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	b672      	cpsid	i
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	b662      	cpsie	i
 8009352:	e7fe      	b.n	8009352 <xTaskIncrementTick+0x32>
 8009354:	4a34      	ldr	r2, [pc, #208]	; (8009428 <xTaskIncrementTick+0x108>)
 8009356:	6819      	ldr	r1, [r3, #0]
 8009358:	6810      	ldr	r0, [r2, #0]
 800935a:	6018      	str	r0, [r3, #0]
 800935c:	6011      	str	r1, [r2, #0]
 800935e:	4a33      	ldr	r2, [pc, #204]	; (800942c <xTaskIncrementTick+0x10c>)
 8009360:	6813      	ldr	r3, [r2, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	f7ff fe1d 	bl	8008fa4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800936a:	4d31      	ldr	r5, [pc, #196]	; (8009430 <xTaskIncrementTick+0x110>)
 800936c:	f04f 0b00 	mov.w	fp, #0
 8009370:	4f30      	ldr	r7, [pc, #192]	; (8009434 <xTaskIncrementTick+0x114>)
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	429c      	cmp	r4, r3
 8009376:	d33e      	bcc.n	80093f6 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009378:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8009424 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 800937c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8009444 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009380:	f8d8 2000 	ldr.w	r2, [r8]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	bb72      	cbnz	r2, 80093e6 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	602a      	str	r2, [r5, #0]
					break;
 800938e:	e032      	b.n	80093f6 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009390:	f106 0a04 	add.w	sl, r6, #4
 8009394:	4650      	mov	r0, sl
 8009396:	f7ff f840 	bl	800841a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800939a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800939c:	b119      	cbz	r1, 80093a6 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800939e:	f106 0018 	add.w	r0, r6, #24
 80093a2:	f7ff f83a 	bl	800841a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093a6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80093a8:	2201      	movs	r2, #1
 80093aa:	f8d9 3000 	ldr.w	r3, [r9]
 80093ae:	f04f 0e14 	mov.w	lr, #20
 80093b2:	fa02 f100 	lsl.w	r1, r2, r0
 80093b6:	4319      	orrs	r1, r3
 80093b8:	4b1f      	ldr	r3, [pc, #124]	; (8009438 <xTaskIncrementTick+0x118>)
 80093ba:	f8c9 1000 	str.w	r1, [r9]
 80093be:	4651      	mov	r1, sl
 80093c0:	fb0e 3000 	mla	r0, lr, r0, r3
 80093c4:	f7ff f806 	bl	80083d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c8:	6838      	ldr	r0, [r7, #0]
 80093ca:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80093cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80093ce:	4291      	cmp	r1, r2
 80093d0:	bf28      	it	cs
 80093d2:	f04f 0b01 	movcs.w	fp, #1
 80093d6:	e7d3      	b.n	8009380 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80093d8:	4a18      	ldr	r2, [pc, #96]	; (800943c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80093da:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80093de:	6813      	ldr	r3, [r2, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	e011      	b.n	800940a <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80093e6:	f8d8 2000 	ldr.w	r2, [r8]
 80093ea:	68d2      	ldr	r2, [r2, #12]
 80093ec:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093ee:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80093f0:	428c      	cmp	r4, r1
 80093f2:	d2cd      	bcs.n	8009390 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80093f4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <xTaskIncrementTick+0x118>)
 80093fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80093fc:	2214      	movs	r2, #20
 80093fe:	434a      	muls	r2, r1
 8009400:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8009402:	2a02      	cmp	r2, #2
 8009404:	bf28      	it	cs
 8009406:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800940a:	4a0d      	ldr	r2, [pc, #52]	; (8009440 <xTaskIncrementTick+0x120>)
 800940c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800940e:	2a00      	cmp	r2, #0
 8009410:	bf18      	it	ne
 8009412:	f04f 0b01 	movne.w	fp, #1
}
 8009416:	4658      	mov	r0, fp
 8009418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	20008390 	.word	0x20008390
 8009420:	20008410 	.word	0x20008410
 8009424:	200082f0 	.word	0x200082f0
 8009428:	200082f4 	.word	0x200082f4
 800942c:	200083cc 	.word	0x200083cc
 8009430:	200083c8 	.word	0x200083c8
 8009434:	200082ec 	.word	0x200082ec
 8009438:	200082f8 	.word	0x200082f8
 800943c:	2000838c 	.word	0x2000838c
 8009440:	20008414 	.word	0x20008414
 8009444:	20008398 	.word	0x20008398

08009448 <xTaskResumeAll>:
{
 8009448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800944c:	4c32      	ldr	r4, [pc, #200]	; (8009518 <xTaskResumeAll+0xd0>)
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	b953      	cbnz	r3, 8009468 <xTaskResumeAll+0x20>
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	b672      	cpsid	i
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	b662      	cpsie	i
 8009466:	e7fe      	b.n	8009466 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8009468:	f7ff f854 	bl	8008514 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	3b01      	subs	r3, #1
 8009470:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009472:	6824      	ldr	r4, [r4, #0]
 8009474:	b12c      	cbz	r4, 8009482 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8009476:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009478:	f7ff f872 	bl	8008560 <vPortExitCritical>
}
 800947c:	4620      	mov	r0, r4
 800947e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009482:	4b26      	ldr	r3, [pc, #152]	; (800951c <xTaskResumeAll+0xd4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0f5      	beq.n	8009476 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800948a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8009534 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800948e:	4f24      	ldr	r7, [pc, #144]	; (8009520 <xTaskResumeAll+0xd8>)
 8009490:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009538 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009494:	f8d9 3000 	ldr.w	r3, [r9]
 8009498:	b9e3      	cbnz	r3, 80094d4 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800949a:	b10c      	cbz	r4, 80094a0 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 800949c:	f7ff fd82 	bl	8008fa4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80094a0:	4d20      	ldr	r5, [pc, #128]	; (8009524 <xTaskResumeAll+0xdc>)
 80094a2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80094a4:	b144      	cbz	r4, 80094b8 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 80094a6:	4e20      	ldr	r6, [pc, #128]	; (8009528 <xTaskResumeAll+0xe0>)
 80094a8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80094aa:	f7ff ff39 	bl	8009320 <xTaskIncrementTick>
 80094ae:	b100      	cbz	r0, 80094b2 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 80094b0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80094b2:	3c01      	subs	r4, #1
 80094b4:	d1f9      	bne.n	80094aa <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 80094b6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80094b8:	4b1b      	ldr	r3, [pc, #108]	; (8009528 <xTaskResumeAll+0xe0>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d0da      	beq.n	8009476 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80094c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c4:	4b19      	ldr	r3, [pc, #100]	; (800952c <xTaskResumeAll+0xe4>)
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80094d0:	2401      	movs	r4, #1
 80094d2:	e7d1      	b.n	8009478 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80094d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80094d8:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80094da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094dc:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094de:	f104 0018 	add.w	r0, r4, #24
 80094e2:	f7fe ff9a 	bl	800841a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7fe ff97 	bl	800841a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	2014      	movs	r0, #20
 80094f2:	fa05 f302 	lsl.w	r3, r5, r2
 80094f6:	fb00 8002 	mla	r0, r0, r2, r8
 80094fa:	430b      	orrs	r3, r1
 80094fc:	4631      	mov	r1, r6
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	f7fe ff68 	bl	80083d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009504:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <xTaskResumeAll+0xe8>)
 8009506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	429a      	cmp	r2, r3
 800950e:	d3c1      	bcc.n	8009494 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8009510:	4b05      	ldr	r3, [pc, #20]	; (8009528 <xTaskResumeAll+0xe0>)
 8009512:	601d      	str	r5, [r3, #0]
 8009514:	e7be      	b.n	8009494 <xTaskResumeAll+0x4c>
 8009516:	bf00      	nop
 8009518:	20008390 	.word	0x20008390
 800951c:	20008384 	.word	0x20008384
 8009520:	20008398 	.word	0x20008398
 8009524:	2000838c 	.word	0x2000838c
 8009528:	20008414 	.word	0x20008414
 800952c:	e000ed04 	.word	0xe000ed04
 8009530:	200082ec 	.word	0x200082ec
 8009534:	200083d0 	.word	0x200083d0
 8009538:	200082f8 	.word	0x200082f8

0800953c <vTaskDelay>:
	{
 800953c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800953e:	b940      	cbnz	r0, 8009552 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8009540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009544:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <vTaskDelay+0x44>)
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009552:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <vTaskDelay+0x48>)
 8009554:	6819      	ldr	r1, [r3, #0]
 8009556:	b151      	cbz	r1, 800956e <vTaskDelay+0x32>
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	b672      	cpsid	i
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	b662      	cpsie	i
 800956c:	e7fe      	b.n	800956c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800956e:	f7ff fec1 	bl	80092f4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009572:	f7ff fd29 	bl	8008fc8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009576:	f7ff ff67 	bl	8009448 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800957a:	2800      	cmp	r0, #0
 800957c:	d0e0      	beq.n	8009540 <vTaskDelay+0x4>
 800957e:	bd08      	pop	{r3, pc}
 8009580:	e000ed04 	.word	0xe000ed04
 8009584:	20008390 	.word	0x20008390

08009588 <vTaskSwitchContext>:
{
 8009588:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800958a:	4b24      	ldr	r3, [pc, #144]	; (800961c <vTaskSwitchContext+0x94>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b24      	ldr	r3, [pc, #144]	; (8009620 <vTaskSwitchContext+0x98>)
 8009590:	b112      	cbz	r2, 8009598 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009592:	2201      	movs	r2, #1
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8009598:	4c22      	ldr	r4, [pc, #136]	; (8009624 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800959a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80095a6:	d10b      	bne.n	80095c0 <vTaskSwitchContext+0x38>
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80095ae:	d107      	bne.n	80095c0 <vTaskSwitchContext+0x38>
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80095b6:	d103      	bne.n	80095c0 <vTaskSwitchContext+0x38>
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80095be:	d004      	beq.n	80095ca <vTaskSwitchContext+0x42>
 80095c0:	6820      	ldr	r0, [r4, #0]
 80095c2:	6821      	ldr	r1, [r4, #0]
 80095c4:	3134      	adds	r1, #52	; 0x34
 80095c6:	f7f7 fa79 	bl	8000abc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80095ca:	4b17      	ldr	r3, [pc, #92]	; (8009628 <vTaskSwitchContext+0xa0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095ce:	fab3 f383 	clz	r3, r3
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2214      	movs	r2, #20
 80095d6:	4915      	ldr	r1, [pc, #84]	; (800962c <vTaskSwitchContext+0xa4>)
 80095d8:	f1c3 031f 	rsb	r3, r3, #31
 80095dc:	435a      	muls	r2, r3
 80095de:	588d      	ldr	r5, [r1, r2]
 80095e0:	1888      	adds	r0, r1, r2
 80095e2:	b955      	cbnz	r5, 80095fa <vTaskSwitchContext+0x72>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	b672      	cpsid	i
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	b662      	cpsie	i
 80095f8:	e7fe      	b.n	80095f8 <vTaskSwitchContext+0x70>
 80095fa:	6845      	ldr	r5, [r0, #4]
 80095fc:	3208      	adds	r2, #8
 80095fe:	686d      	ldr	r5, [r5, #4]
 8009600:	440a      	add	r2, r1
 8009602:	4295      	cmp	r5, r2
 8009604:	6045      	str	r5, [r0, #4]
 8009606:	bf04      	itt	eq
 8009608:	686a      	ldreq	r2, [r5, #4]
 800960a:	6042      	streq	r2, [r0, #4]
 800960c:	2214      	movs	r2, #20
 800960e:	fb02 1303 	mla	r3, r2, r3, r1
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	bd38      	pop	{r3, r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	20008390 	.word	0x20008390
 8009620:	20008414 	.word	0x20008414
 8009624:	200082ec 	.word	0x200082ec
 8009628:	20008398 	.word	0x20008398
 800962c:	200082f8 	.word	0x200082f8

08009630 <vTaskPlaceOnEventList>:
{
 8009630:	b510      	push	{r4, lr}
 8009632:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009634:	b950      	cbnz	r0, 800964c <vTaskPlaceOnEventList+0x1c>
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	b672      	cpsid	i
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	b662      	cpsie	i
 800964a:	e7fe      	b.n	800964a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <vTaskPlaceOnEventList+0x34>)
 800964e:	6819      	ldr	r1, [r3, #0]
 8009650:	3118      	adds	r1, #24
 8009652:	f7fe fecb 	bl	80083ec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009656:	4620      	mov	r0, r4
 8009658:	2101      	movs	r1, #1
}
 800965a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800965e:	f7ff bcb3 	b.w	8008fc8 <prvAddCurrentTaskToDelayedList>
 8009662:	bf00      	nop
 8009664:	200082ec 	.word	0x200082ec

08009668 <xTaskRemoveFromEventList>:
{
 8009668:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800966a:	68c3      	ldr	r3, [r0, #12]
 800966c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800966e:	b954      	cbnz	r4, 8009686 <xTaskRemoveFromEventList+0x1e>
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	b672      	cpsid	i
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	b662      	cpsie	i
 8009684:	e7fe      	b.n	8009684 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009686:	f104 0518 	add.w	r5, r4, #24
 800968a:	4628      	mov	r0, r5
 800968c:	f7fe fec5 	bl	800841a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <xTaskRemoveFromEventList+0x70>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	b9db      	cbnz	r3, 80096ce <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009696:	1d25      	adds	r5, r4, #4
 8009698:	4628      	mov	r0, r5
 800969a:	f7fe febe 	bl	800841a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800969e:	490f      	ldr	r1, [pc, #60]	; (80096dc <xTaskRemoveFromEventList+0x74>)
 80096a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80096a2:	2301      	movs	r3, #1
 80096a4:	6808      	ldr	r0, [r1, #0]
 80096a6:	4093      	lsls	r3, r2
 80096a8:	4303      	orrs	r3, r0
 80096aa:	2014      	movs	r0, #20
 80096ac:	600b      	str	r3, [r1, #0]
 80096ae:	4629      	mov	r1, r5
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <xTaskRemoveFromEventList+0x78>)
 80096b2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096b6:	f7fe fe8d 	bl	80083d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096ba:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <xTaskRemoveFromEventList+0x7c>)
 80096bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d906      	bls.n	80096d4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80096c6:	2001      	movs	r0, #1
 80096c8:	4b07      	ldr	r3, [pc, #28]	; (80096e8 <xTaskRemoveFromEventList+0x80>)
 80096ca:	6018      	str	r0, [r3, #0]
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096ce:	4629      	mov	r1, r5
 80096d0:	4806      	ldr	r0, [pc, #24]	; (80096ec <xTaskRemoveFromEventList+0x84>)
 80096d2:	e7f0      	b.n	80096b6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80096d4:	2000      	movs	r0, #0
}
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	20008390 	.word	0x20008390
 80096dc:	20008398 	.word	0x20008398
 80096e0:	200082f8 	.word	0x200082f8
 80096e4:	200082ec 	.word	0x200082ec
 80096e8:	20008414 	.word	0x20008414
 80096ec:	200083d0 	.word	0x200083d0

080096f0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <vTaskInternalSetTimeOutState+0x10>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096f6:	4b03      	ldr	r3, [pc, #12]	; (8009704 <vTaskInternalSetTimeOutState+0x14>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6043      	str	r3, [r0, #4]
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	200083cc 	.word	0x200083cc
 8009704:	20008410 	.word	0x20008410

08009708 <xTaskCheckForTimeOut>:
{
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800970c:	4605      	mov	r5, r0
 800970e:	b950      	cbnz	r0, 8009726 <xTaskCheckForTimeOut+0x1e>
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	b672      	cpsid	i
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	b662      	cpsie	i
 8009724:	e7fe      	b.n	8009724 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8009726:	b951      	cbnz	r1, 800973e <xTaskCheckForTimeOut+0x36>
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	b672      	cpsid	i
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	b662      	cpsie	i
 800973c:	e7fe      	b.n	800973c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800973e:	f7fe fee9 	bl	8008514 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009744:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8009746:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	1c58      	adds	r0, r3, #1
 800974c:	d00e      	beq.n	800976c <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800974e:	480d      	ldr	r0, [pc, #52]	; (8009784 <xTaskCheckForTimeOut+0x7c>)
 8009750:	682e      	ldr	r6, [r5, #0]
 8009752:	6800      	ldr	r0, [r0, #0]
 8009754:	4286      	cmp	r6, r0
 8009756:	d001      	beq.n	800975c <xTaskCheckForTimeOut+0x54>
 8009758:	428a      	cmp	r2, r1
 800975a:	d20e      	bcs.n	800977a <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800975c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800975e:	429a      	cmp	r2, r3
 8009760:	d209      	bcs.n	8009776 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 8009762:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009764:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8009766:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009768:	f7ff ffc2 	bl	80096f0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800976c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800976e:	f7fe fef7 	bl	8008560 <vPortExitCritical>
}
 8009772:	4620      	mov	r0, r4
 8009774:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800977a:	2401      	movs	r4, #1
 800977c:	e7f7      	b.n	800976e <xTaskCheckForTimeOut+0x66>
 800977e:	bf00      	nop
 8009780:	20008410 	.word	0x20008410
 8009784:	200083cc 	.word	0x200083cc

08009788 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009788:	2201      	movs	r2, #1
 800978a:	4b01      	ldr	r3, [pc, #4]	; (8009790 <vTaskMissedYield+0x8>)
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	4770      	bx	lr
 8009790:	20008414 	.word	0x20008414

08009794 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009794:	4b05      	ldr	r3, [pc, #20]	; (80097ac <xTaskGetSchedulerState+0x18>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	b133      	cbz	r3, 80097a8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <xTaskGetSchedulerState+0x1c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80097a0:	bf0c      	ite	eq
 80097a2:	2002      	moveq	r0, #2
 80097a4:	2000      	movne	r0, #0
 80097a6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097a8:	2001      	movs	r0, #1
	}
 80097aa:	4770      	bx	lr
 80097ac:	200083e4 	.word	0x200083e4
 80097b0:	20008390 	.word	0x20008390

080097b4 <xTaskPriorityDisinherit>:
	{
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80097b6:	4604      	mov	r4, r0
 80097b8:	b908      	cbnz	r0, 80097be <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80097ba:	2000      	movs	r0, #0
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80097be:	4b24      	ldr	r3, [pc, #144]	; (8009850 <xTaskPriorityDisinherit+0x9c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4298      	cmp	r0, r3
 80097c4:	d00a      	beq.n	80097dc <xTaskPriorityDisinherit+0x28>
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	b672      	cpsid	i
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	b662      	cpsie	i
 80097da:	e7fe      	b.n	80097da <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80097dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80097de:	b953      	cbnz	r3, 80097f6 <xTaskPriorityDisinherit+0x42>
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	b672      	cpsid	i
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	b662      	cpsie	i
 80097f4:	e7fe      	b.n	80097f4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80097f8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80097fc:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097fe:	4291      	cmp	r1, r2
 8009800:	d0db      	beq.n	80097ba <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1d9      	bne.n	80097ba <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009806:	1d05      	adds	r5, r0, #4
 8009808:	4e12      	ldr	r6, [pc, #72]	; (8009854 <xTaskPriorityDisinherit+0xa0>)
 800980a:	4628      	mov	r0, r5
 800980c:	f7fe fe05 	bl	800841a <uxListRemove>
 8009810:	4a11      	ldr	r2, [pc, #68]	; (8009858 <xTaskPriorityDisinherit+0xa4>)
 8009812:	b950      	cbnz	r0, 800982a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009814:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009816:	2114      	movs	r1, #20
 8009818:	4379      	muls	r1, r7
 800981a:	5873      	ldr	r3, [r6, r1]
 800981c:	b92b      	cbnz	r3, 800982a <xTaskPriorityDisinherit+0x76>
 800981e:	2001      	movs	r0, #1
 8009820:	6813      	ldr	r3, [r2, #0]
 8009822:	40b8      	lsls	r0, r7
 8009824:	ea23 0300 	bic.w	r3, r3, r0
 8009828:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800982a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009830:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009832:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009834:	2401      	movs	r4, #1
 8009836:	6811      	ldr	r1, [r2, #0]
 8009838:	fa04 f003 	lsl.w	r0, r4, r3
 800983c:	4308      	orrs	r0, r1
 800983e:	4629      	mov	r1, r5
 8009840:	6010      	str	r0, [r2, #0]
 8009842:	2014      	movs	r0, #20
 8009844:	fb00 6003 	mla	r0, r0, r3, r6
 8009848:	f7fe fdc4 	bl	80083d4 <vListInsertEnd>
					xReturn = pdTRUE;
 800984c:	4620      	mov	r0, r4
	}
 800984e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009850:	200082ec 	.word	0x200082ec
 8009854:	200082f8 	.word	0x200082f8
 8009858:	20008398 	.word	0x20008398

0800985c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800985c:	2904      	cmp	r1, #4
 800985e:	d00a      	beq.n	8009876 <USBH_UserProcess+0x1a>
 8009860:	2905      	cmp	r1, #5
 8009862:	d004      	beq.n	800986e <USBH_UserProcess+0x12>
 8009864:	2902      	cmp	r1, #2
 8009866:	d105      	bne.n	8009874 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009868:	4b04      	ldr	r3, [pc, #16]	; (800987c <USBH_UserProcess+0x20>)
 800986a:	7019      	strb	r1, [r3, #0]
  break;
 800986c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800986e:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <USBH_UserProcess+0x20>)
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	4770      	bx	lr
 8009876:	2201      	movs	r2, #1
 8009878:	e7fa      	b.n	8009870 <USBH_UserProcess+0x14>
 800987a:	bf00      	nop
 800987c:	20008418 	.word	0x20008418

08009880 <MX_USB_HOST_Init>:
{
 8009880:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009882:	2201      	movs	r2, #1
 8009884:	490b      	ldr	r1, [pc, #44]	; (80098b4 <MX_USB_HOST_Init+0x34>)
 8009886:	480c      	ldr	r0, [pc, #48]	; (80098b8 <MX_USB_HOST_Init+0x38>)
 8009888:	f7fd ffa6 	bl	80077d8 <USBH_Init>
 800988c:	b108      	cbz	r0, 8009892 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800988e:	f7f7 fcc1 	bl	8001214 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009892:	490a      	ldr	r1, [pc, #40]	; (80098bc <MX_USB_HOST_Init+0x3c>)
 8009894:	4808      	ldr	r0, [pc, #32]	; (80098b8 <MX_USB_HOST_Init+0x38>)
 8009896:	f7fd ffd3 	bl	8007840 <USBH_RegisterClass>
 800989a:	b108      	cbz	r0, 80098a0 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800989c:	f7f7 fcba 	bl	8001214 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80098a0:	4805      	ldr	r0, [pc, #20]	; (80098b8 <MX_USB_HOST_Init+0x38>)
 80098a2:	f7fd ffff 	bl	80078a4 <USBH_Start>
 80098a6:	b118      	cbz	r0, 80098b0 <MX_USB_HOST_Init+0x30>
}
 80098a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80098ac:	f7f7 bcb2 	b.w	8001214 <Error_Handler>
 80098b0:	bd08      	pop	{r3, pc}
 80098b2:	bf00      	nop
 80098b4:	0800985d 	.word	0x0800985d
 80098b8:	200090b8 	.word	0x200090b8
 80098bc:	20000008 	.word	0x20000008

080098c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80098c0:	b510      	push	{r4, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c6:	2214      	movs	r2, #20
 80098c8:	2100      	movs	r1, #0
 80098ca:	a803      	add	r0, sp, #12
 80098cc:	f000 f993 	bl	8009bf6 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098d6:	d130      	bne.n	800993a <HAL_HCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098d8:	4c19      	ldr	r4, [pc, #100]	; (8009940 <HAL_HCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098da:	a903      	add	r1, sp, #12
 80098dc:	4819      	ldr	r0, [pc, #100]	; (8009944 <HAL_HCD_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80098e0:	f043 0301 	orr.w	r3, r3, #1
 80098e4:	6323      	str	r3, [r4, #48]	; 0x30
 80098e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80098f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80098f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098f6:	2302      	movs	r3, #2
 80098f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098fa:	2303      	movs	r3, #3
 80098fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098fe:	230a      	movs	r3, #10
 8009900:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009902:	f7f9 f8f7 	bl	8002af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009906:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009908:	2043      	movs	r0, #67	; 0x43
 800990a:	2200      	movs	r2, #0
 800990c:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800990e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009912:	6363      	str	r3, [r4, #52]	; 0x34
 8009914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009924:	6463      	str	r3, [r4, #68]	; 0x44
 8009926:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800992c:	9302      	str	r3, [sp, #8]
 800992e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009930:	f7f8 fcce 	bl	80022d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009934:	2043      	movs	r0, #67	; 0x43
 8009936:	f7f8 fd03 	bl	8002340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800993a:	b008      	add	sp, #32
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	40023800 	.word	0x40023800
 8009944:	40020000 	.word	0x40020000

08009948 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8009948:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800994c:	f7fe b94f 	b.w	8007bee <USBH_LL_IncTimer>

08009950 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8009950:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009954:	f7fe b961 	b.w	8007c1a <USBH_LL_Connect>

08009958 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8009958:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800995c:	f7fe b97a 	b.w	8007c54 <USBH_LL_Disconnect>

08009960 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009960:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009964:	f7fe b99a 	b.w	8007c9c <USBH_LL_NotifyURBChange>

08009968 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8009968:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800996c:	f7fe b94d 	b.w	8007c0a <USBH_LL_PortEnabled>

08009970 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8009970:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009974:	f7fe b94d 	b.w	8007c12 <USBH_LL_PortDisabled>

08009978 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009978:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800997a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 800997e:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8009980:	2b01      	cmp	r3, #1
 8009982:	d11c      	bne.n	80099be <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009984:	480f      	ldr	r0, [pc, #60]	; (80099c4 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009986:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800998a:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800998c:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800998e:	2308      	movs	r3, #8
  phost->pData = &hhcd_USB_OTG_FS;
 8009990:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009994:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009996:	2303      	movs	r3, #3
  hhcd_USB_OTG_FS.pData = phost;
 8009998:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800999c:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800999e:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80099a0:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099a2:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099a4:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80099a6:	f7f9 f9e5 	bl	8002d74 <HAL_HCD_Init>
 80099aa:	b108      	cbz	r0, 80099b0 <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 80099ac:	f7f7 fc32 	bl	8001214 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80099b0:	4804      	ldr	r0, [pc, #16]	; (80099c4 <USBH_LL_Init+0x4c>)
 80099b2:	f7f9 fdd1 	bl	8003558 <HAL_HCD_GetCurrentFrame>
 80099b6:	4601      	mov	r1, r0
 80099b8:	4620      	mov	r0, r4
 80099ba:	f7fe f915 	bl	8007be8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 80099be:	2000      	movs	r0, #0
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	bf00      	nop
 80099c4:	20009490 	.word	0x20009490

080099c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80099c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 80099ca:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80099ce:	f7f9 fd8d 	bl	80034ec <HAL_HCD_Start>
 80099d2:	2803      	cmp	r0, #3
 80099d4:	bf9a      	itte	ls
 80099d6:	4b02      	ldrls	r3, [pc, #8]	; (80099e0 <USBH_LL_Start+0x18>)
 80099d8:	5c18      	ldrbls	r0, [r3, r0]
 80099da:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80099dc:	bd08      	pop	{r3, pc}
 80099de:	bf00      	nop
 80099e0:	08009e38 	.word	0x08009e38

080099e4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80099e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 80099e6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80099ea:	f7f9 fd95 	bl	8003518 <HAL_HCD_Stop>
 80099ee:	2803      	cmp	r0, #3
 80099f0:	bf9a      	itte	ls
 80099f2:	4b02      	ldrls	r3, [pc, #8]	; (80099fc <USBH_LL_Stop+0x18>)
 80099f4:	5c18      	ldrbls	r0, [r3, r0]
 80099f6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80099f8:	bd08      	pop	{r3, pc}
 80099fa:	bf00      	nop
 80099fc:	08009e38 	.word	0x08009e38

08009a00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009a00:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009a02:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8009a06:	f7f9 fdaa 	bl	800355e <HAL_HCD_GetCurrentSpeed>
 8009a0a:	2802      	cmp	r0, #2
 8009a0c:	bf9a      	itte	ls
 8009a0e:	4b02      	ldrls	r3, [pc, #8]	; (8009a18 <USBH_LL_GetSpeed+0x18>)
 8009a10:	5c18      	ldrbls	r0, [r3, r0]
 8009a12:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8009a14:	bd08      	pop	{r3, pc}
 8009a16:	bf00      	nop
 8009a18:	08009e35 	.word	0x08009e35

08009a1c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009a1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009a1e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8009a22:	f7f9 fd8b 	bl	800353c <HAL_HCD_ResetPort>
 8009a26:	2803      	cmp	r0, #3
 8009a28:	bf9a      	itte	ls
 8009a2a:	4b02      	ldrls	r3, [pc, #8]	; (8009a34 <USBH_LL_ResetPort+0x18>)
 8009a2c:	5c18      	ldrbls	r0, [r3, r0]
 8009a2e:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8009a30:	bd08      	pop	{r3, pc}
 8009a32:	bf00      	nop
 8009a34:	08009e38 	.word	0x08009e38

08009a38 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009a38:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8009a3c:	f7f9 bd87 	b.w	800354e <HAL_HCD_HC_GetXferCount>

08009a40 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009a42:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009a46:	9402      	str	r4, [sp, #8]
 8009a48:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8009a4c:	9401      	str	r4, [sp, #4]
 8009a4e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009a52:	9400      	str	r4, [sp, #0]
 8009a54:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8009a58:	f7f9 f941 	bl	8002cde <HAL_HCD_HC_Init>
 8009a5c:	2803      	cmp	r0, #3
 8009a5e:	bf96      	itet	ls
 8009a60:	4b02      	ldrls	r3, [pc, #8]	; (8009a6c <USBH_LL_OpenPipe+0x2c>)
 8009a62:	2002      	movhi	r0, #2
 8009a64:	5c18      	ldrbls	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8009a66:	b004      	add	sp, #16
 8009a68:	bd10      	pop	{r4, pc}
 8009a6a:	bf00      	nop
 8009a6c:	08009e38 	.word	0x08009e38

08009a70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a70:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a72:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8009a76:	f7f9 f96b 	bl	8002d50 <HAL_HCD_HC_Halt>
 8009a7a:	2803      	cmp	r0, #3
 8009a7c:	bf9a      	itte	ls
 8009a7e:	4b02      	ldrls	r3, [pc, #8]	; (8009a88 <USBH_LL_ClosePipe+0x18>)
 8009a80:	5c18      	ldrbls	r0, [r3, r0]
 8009a82:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8009a84:	bd08      	pop	{r3, pc}
 8009a86:	bf00      	nop
 8009a88:	08009e38 	.word	0x08009e38

08009a8c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a8e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8009a92:	9403      	str	r4, [sp, #12]
 8009a94:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009a98:	9402      	str	r4, [sp, #8]
 8009a9a:	9c07      	ldr	r4, [sp, #28]
 8009a9c:	9401      	str	r4, [sp, #4]
 8009a9e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009aa2:	9400      	str	r4, [sp, #0]
 8009aa4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8009aa8:	f7f9 f9a8 	bl	8002dfc <HAL_HCD_HC_SubmitRequest>
 8009aac:	2803      	cmp	r0, #3
 8009aae:	bf96      	itet	ls
 8009ab0:	4b02      	ldrls	r3, [pc, #8]	; (8009abc <USBH_LL_SubmitURB+0x30>)
 8009ab2:	2002      	movhi	r0, #2
 8009ab4:	5c18      	ldrbls	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8009ab6:	b004      	add	sp, #16
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	bf00      	nop
 8009abc:	08009e38 	.word	0x08009e38

08009ac0 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009ac0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8009ac4:	f7f9 bd3d 	b.w	8003542 <HAL_HCD_HC_GetURBState>

08009ac8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ac8:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8009aca:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d102      	bne.n	8009ad8 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	f000 f816 	bl	8009b04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009ad8:	20c8      	movs	r0, #200	; 0xc8
 8009ada:	f7f8 fa8f 	bl	8001ffc <HAL_Delay>
  return USBH_OK;
}
 8009ade:	2000      	movs	r0, #0
 8009ae0:	bd08      	pop	{r3, pc}

08009ae2 <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 8009ae2:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 8009ae4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
  if(pHandle->hc[pipe].ep_is_in)
 8009ae8:	fb03 0101 	mla	r1, r3, r1, r0
 8009aec:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8009af0:	b11b      	cbz	r3, 8009afa <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009af2:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8009af6:	2000      	movs	r0, #0
 8009af8:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8009afa:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8009afe:	e7fa      	b.n	8009af6 <USBH_LL_SetToggle+0x14>

08009b00 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8009b00:	f7f8 ba7c 	b.w	8001ffc <HAL_Delay>

08009b04 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8009b04:	fab0 f280 	clz	r2, r0
 8009b08:	2120      	movs	r1, #32
 8009b0a:	4802      	ldr	r0, [pc, #8]	; (8009b14 <MX_DriverVbusFS+0x10>)
 8009b0c:	0952      	lsrs	r2, r2, #5
 8009b0e:	f7f9 b8e1 	b.w	8002cd4 <HAL_GPIO_WritePin>
 8009b12:	bf00      	nop
 8009b14:	40020c00 	.word	0x40020c00

08009b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b1e:	e003      	b.n	8009b28 <LoopCopyDataInit>

08009b20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b20:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b26:	3104      	adds	r1, #4

08009b28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b28:	480b      	ldr	r0, [pc, #44]	; (8009b58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b30:	d3f6      	bcc.n	8009b20 <CopyDataInit>
  ldr  r2, =_sbss
 8009b32:	4a0b      	ldr	r2, [pc, #44]	; (8009b60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009b34:	e002      	b.n	8009b3c <LoopFillZerobss>

08009b36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009b36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009b38:	f842 3b04 	str.w	r3, [r2], #4

08009b3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009b3c:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009b3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009b40:	d3f9      	bcc.n	8009b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009b42:	f7f7 fec1 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b46:	f000 f817 	bl	8009b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b4a:	f7f7 fb1f 	bl	800118c <main>
  bx  lr    
 8009b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009b50:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009b54:	08009e4c 	.word	0x08009e4c
  ldr  r0, =_sdata
 8009b58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009b5c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8009b60:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8009b64:	20009758 	.word	0x20009758

08009b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b68:	e7fe      	b.n	8009b68 <ADC_IRQHandler>
	...

08009b6c <__errno>:
 8009b6c:	4b01      	ldr	r3, [pc, #4]	; (8009b74 <__errno+0x8>)
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	2000002c 	.word	0x2000002c

08009b78 <__libc_init_array>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	4e0d      	ldr	r6, [pc, #52]	; (8009bb0 <__libc_init_array+0x38>)
 8009b7c:	4c0d      	ldr	r4, [pc, #52]	; (8009bb4 <__libc_init_array+0x3c>)
 8009b7e:	1ba4      	subs	r4, r4, r6
 8009b80:	10a4      	asrs	r4, r4, #2
 8009b82:	2500      	movs	r5, #0
 8009b84:	42a5      	cmp	r5, r4
 8009b86:	d109      	bne.n	8009b9c <__libc_init_array+0x24>
 8009b88:	4e0b      	ldr	r6, [pc, #44]	; (8009bb8 <__libc_init_array+0x40>)
 8009b8a:	4c0c      	ldr	r4, [pc, #48]	; (8009bbc <__libc_init_array+0x44>)
 8009b8c:	f000 f8fa 	bl	8009d84 <_init>
 8009b90:	1ba4      	subs	r4, r4, r6
 8009b92:	10a4      	asrs	r4, r4, #2
 8009b94:	2500      	movs	r5, #0
 8009b96:	42a5      	cmp	r5, r4
 8009b98:	d105      	bne.n	8009ba6 <__libc_init_array+0x2e>
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ba0:	4798      	blx	r3
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	e7ee      	b.n	8009b84 <__libc_init_array+0xc>
 8009ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009baa:	4798      	blx	r3
 8009bac:	3501      	adds	r5, #1
 8009bae:	e7f2      	b.n	8009b96 <__libc_init_array+0x1e>
 8009bb0:	08009e44 	.word	0x08009e44
 8009bb4:	08009e44 	.word	0x08009e44
 8009bb8:	08009e44 	.word	0x08009e44
 8009bbc:	08009e48 	.word	0x08009e48

08009bc0 <malloc>:
 8009bc0:	4b02      	ldr	r3, [pc, #8]	; (8009bcc <malloc+0xc>)
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	f000 b86d 	b.w	8009ca4 <_malloc_r>
 8009bca:	bf00      	nop
 8009bcc:	2000002c 	.word	0x2000002c

08009bd0 <free>:
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <free+0xc>)
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f000 b817 	b.w	8009c08 <_free_r>
 8009bda:	bf00      	nop
 8009bdc:	2000002c 	.word	0x2000002c

08009be0 <memcpy>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	1e43      	subs	r3, r0, #1
 8009be4:	440a      	add	r2, r1
 8009be6:	4291      	cmp	r1, r2
 8009be8:	d100      	bne.n	8009bec <memcpy+0xc>
 8009bea:	bd10      	pop	{r4, pc}
 8009bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf4:	e7f7      	b.n	8009be6 <memcpy+0x6>

08009bf6 <memset>:
 8009bf6:	4402      	add	r2, r0
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d100      	bne.n	8009c00 <memset+0xa>
 8009bfe:	4770      	bx	lr
 8009c00:	f803 1b01 	strb.w	r1, [r3], #1
 8009c04:	e7f9      	b.n	8009bfa <memset+0x4>
	...

08009c08 <_free_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	d045      	beq.n	8009c9c <_free_r+0x94>
 8009c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c14:	1f0c      	subs	r4, r1, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfb8      	it	lt
 8009c1a:	18e4      	addlt	r4, r4, r3
 8009c1c:	f000 f8b0 	bl	8009d80 <__malloc_lock>
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <_free_r+0x98>)
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	4610      	mov	r0, r2
 8009c26:	b933      	cbnz	r3, 8009c36 <_free_r+0x2e>
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	6014      	str	r4, [r2, #0]
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c32:	f000 b8a6 	b.w	8009d82 <__malloc_unlock>
 8009c36:	42a3      	cmp	r3, r4
 8009c38:	d90c      	bls.n	8009c54 <_free_r+0x4c>
 8009c3a:	6821      	ldr	r1, [r4, #0]
 8009c3c:	1862      	adds	r2, r4, r1
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	bf04      	itt	eq
 8009c42:	681a      	ldreq	r2, [r3, #0]
 8009c44:	685b      	ldreq	r3, [r3, #4]
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	bf04      	itt	eq
 8009c4a:	1852      	addeq	r2, r2, r1
 8009c4c:	6022      	streq	r2, [r4, #0]
 8009c4e:	6004      	str	r4, [r0, #0]
 8009c50:	e7ec      	b.n	8009c2c <_free_r+0x24>
 8009c52:	4613      	mov	r3, r2
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	b10a      	cbz	r2, 8009c5c <_free_r+0x54>
 8009c58:	42a2      	cmp	r2, r4
 8009c5a:	d9fa      	bls.n	8009c52 <_free_r+0x4a>
 8009c5c:	6819      	ldr	r1, [r3, #0]
 8009c5e:	1858      	adds	r0, r3, r1
 8009c60:	42a0      	cmp	r0, r4
 8009c62:	d10b      	bne.n	8009c7c <_free_r+0x74>
 8009c64:	6820      	ldr	r0, [r4, #0]
 8009c66:	4401      	add	r1, r0
 8009c68:	1858      	adds	r0, r3, r1
 8009c6a:	4282      	cmp	r2, r0
 8009c6c:	6019      	str	r1, [r3, #0]
 8009c6e:	d1dd      	bne.n	8009c2c <_free_r+0x24>
 8009c70:	6810      	ldr	r0, [r2, #0]
 8009c72:	6852      	ldr	r2, [r2, #4]
 8009c74:	605a      	str	r2, [r3, #4]
 8009c76:	4401      	add	r1, r0
 8009c78:	6019      	str	r1, [r3, #0]
 8009c7a:	e7d7      	b.n	8009c2c <_free_r+0x24>
 8009c7c:	d902      	bls.n	8009c84 <_free_r+0x7c>
 8009c7e:	230c      	movs	r3, #12
 8009c80:	602b      	str	r3, [r5, #0]
 8009c82:	e7d3      	b.n	8009c2c <_free_r+0x24>
 8009c84:	6820      	ldr	r0, [r4, #0]
 8009c86:	1821      	adds	r1, r4, r0
 8009c88:	428a      	cmp	r2, r1
 8009c8a:	bf04      	itt	eq
 8009c8c:	6811      	ldreq	r1, [r2, #0]
 8009c8e:	6852      	ldreq	r2, [r2, #4]
 8009c90:	6062      	str	r2, [r4, #4]
 8009c92:	bf04      	itt	eq
 8009c94:	1809      	addeq	r1, r1, r0
 8009c96:	6021      	streq	r1, [r4, #0]
 8009c98:	605c      	str	r4, [r3, #4]
 8009c9a:	e7c7      	b.n	8009c2c <_free_r+0x24>
 8009c9c:	bd38      	pop	{r3, r4, r5, pc}
 8009c9e:	bf00      	nop
 8009ca0:	2000841c 	.word	0x2000841c

08009ca4 <_malloc_r>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	1ccd      	adds	r5, r1, #3
 8009ca8:	f025 0503 	bic.w	r5, r5, #3
 8009cac:	3508      	adds	r5, #8
 8009cae:	2d0c      	cmp	r5, #12
 8009cb0:	bf38      	it	cc
 8009cb2:	250c      	movcc	r5, #12
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	db01      	blt.n	8009cbe <_malloc_r+0x1a>
 8009cba:	42a9      	cmp	r1, r5
 8009cbc:	d903      	bls.n	8009cc6 <_malloc_r+0x22>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	6033      	str	r3, [r6, #0]
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	bd70      	pop	{r4, r5, r6, pc}
 8009cc6:	f000 f85b 	bl	8009d80 <__malloc_lock>
 8009cca:	4a23      	ldr	r2, [pc, #140]	; (8009d58 <_malloc_r+0xb4>)
 8009ccc:	6814      	ldr	r4, [r2, #0]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	b991      	cbnz	r1, 8009cf8 <_malloc_r+0x54>
 8009cd2:	4c22      	ldr	r4, [pc, #136]	; (8009d5c <_malloc_r+0xb8>)
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	b91b      	cbnz	r3, 8009ce0 <_malloc_r+0x3c>
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f841 	bl	8009d60 <_sbrk_r>
 8009cde:	6020      	str	r0, [r4, #0]
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f000 f83c 	bl	8009d60 <_sbrk_r>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d126      	bne.n	8009d3a <_malloc_r+0x96>
 8009cec:	230c      	movs	r3, #12
 8009cee:	6033      	str	r3, [r6, #0]
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f000 f846 	bl	8009d82 <__malloc_unlock>
 8009cf6:	e7e4      	b.n	8009cc2 <_malloc_r+0x1e>
 8009cf8:	680b      	ldr	r3, [r1, #0]
 8009cfa:	1b5b      	subs	r3, r3, r5
 8009cfc:	d41a      	bmi.n	8009d34 <_malloc_r+0x90>
 8009cfe:	2b0b      	cmp	r3, #11
 8009d00:	d90f      	bls.n	8009d22 <_malloc_r+0x7e>
 8009d02:	600b      	str	r3, [r1, #0]
 8009d04:	50cd      	str	r5, [r1, r3]
 8009d06:	18cc      	adds	r4, r1, r3
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 f83a 	bl	8009d82 <__malloc_unlock>
 8009d0e:	f104 000b 	add.w	r0, r4, #11
 8009d12:	1d23      	adds	r3, r4, #4
 8009d14:	f020 0007 	bic.w	r0, r0, #7
 8009d18:	1ac3      	subs	r3, r0, r3
 8009d1a:	d01b      	beq.n	8009d54 <_malloc_r+0xb0>
 8009d1c:	425a      	negs	r2, r3
 8009d1e:	50e2      	str	r2, [r4, r3]
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	428c      	cmp	r4, r1
 8009d24:	bf0d      	iteet	eq
 8009d26:	6863      	ldreq	r3, [r4, #4]
 8009d28:	684b      	ldrne	r3, [r1, #4]
 8009d2a:	6063      	strne	r3, [r4, #4]
 8009d2c:	6013      	streq	r3, [r2, #0]
 8009d2e:	bf18      	it	ne
 8009d30:	460c      	movne	r4, r1
 8009d32:	e7e9      	b.n	8009d08 <_malloc_r+0x64>
 8009d34:	460c      	mov	r4, r1
 8009d36:	6849      	ldr	r1, [r1, #4]
 8009d38:	e7ca      	b.n	8009cd0 <_malloc_r+0x2c>
 8009d3a:	1cc4      	adds	r4, r0, #3
 8009d3c:	f024 0403 	bic.w	r4, r4, #3
 8009d40:	42a0      	cmp	r0, r4
 8009d42:	d005      	beq.n	8009d50 <_malloc_r+0xac>
 8009d44:	1a21      	subs	r1, r4, r0
 8009d46:	4630      	mov	r0, r6
 8009d48:	f000 f80a 	bl	8009d60 <_sbrk_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d0cd      	beq.n	8009cec <_malloc_r+0x48>
 8009d50:	6025      	str	r5, [r4, #0]
 8009d52:	e7d9      	b.n	8009d08 <_malloc_r+0x64>
 8009d54:	bd70      	pop	{r4, r5, r6, pc}
 8009d56:	bf00      	nop
 8009d58:	2000841c 	.word	0x2000841c
 8009d5c:	20008420 	.word	0x20008420

08009d60 <_sbrk_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4c06      	ldr	r4, [pc, #24]	; (8009d7c <_sbrk_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4605      	mov	r5, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	f7f7 fd92 	bl	8001894 <_sbrk>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_sbrk_r+0x1a>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_sbrk_r+0x1a>
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	20009754 	.word	0x20009754

08009d80 <__malloc_lock>:
 8009d80:	4770      	bx	lr

08009d82 <__malloc_unlock>:
 8009d82:	4770      	bx	lr

08009d84 <_init>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	bf00      	nop
 8009d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	469e      	mov	lr, r3
 8009d8e:	4770      	bx	lr

08009d90 <_fini>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	bf00      	nop
 8009d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d96:	bc08      	pop	{r3}
 8009d98:	469e      	mov	lr, r3
 8009d9a:	4770      	bx	lr
